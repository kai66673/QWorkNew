import os

namespace = 'Postgres'

work_dir = 'C:/Alex/__Hg/qx/QxAdvice/QWorkNew/plugins/database/PostgresProvider/engine'

if not os.path.exists(work_dir):
    os.makedirs(work_dir)

classes = [
  [ 'TranslationUnit',          '',
    [ (2, 'Statement', 'statements') ] ],
  [ 'DdlStatement',              'Statement',                   [] ],
  [ 'DmlStatement',              'Statement',                   [] ],
  [ 'UnknownStatement',          'Statement',
    [ (0, 'first'),
      (0, 'last') ] ],
  [ 'CreateStatement',          'DdlStatement',                 [] ],
  [ 'CreateViewStmt',           'CreateStatement',
    [ (0, 'create'),
      (0, 'or'),
      (0, 'replace'),
      (1, 'TempClause', 'tempClause'),
      (0, 'recursive'),
      (0, 'view'),
      (1, 'TableIdentifier', 'viewIdent'),
      (1, 'RefColumns', 'columns'),
      (1, 'WithReloptions', 'relOpts'),
      (0, 'as'),
      (1, 'SelectStmt', 'query'),
      (1, 'WithCheckOptionClause', 'checkOpt') ] ],
  [ 'WithCheckOptionClause',    '',
    [ (0, 'with'),
      (0, 'local_or_cascaded'),
      (0, 'check'),
      (0, 'option') ] ],
  [ 'VacuumStmt',               'DdlStatement',                 [] ],
  [ 'CommonVacuumStmt',         'VacuumStmt',
    [ (0, 'vacuum'),
      (0, 'lparen'),
      (2, 'VacuumOption', 'options'),
      (0, 'rparen'),
      (1, 'TableIdentifier', 'tableIdent'),
      (1, 'CompoundColumnNames', 'columns') ] ],
  [ 'VacuumOption',             '',
    [ (0, 'analyze_verbose_freeze_full') ] ],
  [ 'VacuumTableStmt',          'VacuumStmt',
    [ (0, 'vacuum'),
      (0, 'full'),
      (0, 'freeze'),
      (0, 'verbose'),
      (1, 'TableIdentifier', 'tableIdent') ] ],
  [ 'VacuumAnalyzeStmt',        'VacuumStmt',
    [ (0, 'vacuum'),
      (0, 'full'),
      (0, 'freeze'),
      (0, 'verbose'),
      (1, 'AnalyzeStmt', 'analyzeStmt') ] ],
  [ 'TruncateStmt',             'DmlStatement',
    [ (0, 'truncate'),
      (0, 'table'),
      (2, 'RelationExpr', 'tables'),
      (1, 'TruncateRestartClause', 'restartClause'),
      (0, 'behavior') ] ],
  [ 'TruncateRestartClause',    '',
    [ (0, 'continue_or_restart'),
      (0, 'identity') ] ],
  [ 'TransactionStmt',          'Statement',                    [] ],
  [ 'BeginTransactionStmt',     'TransactionStmt',
    [ (0, 'begin_or_start'),
      (0, 'transaction'),
      (2, 'TransactionMode', 'transOptions') ] ],
  [ 'SavepointTransactionStmt', 'TransactionStmt',
    [ (0, 'savepoint'),
      (0, 'savepoint_label') ] ],
  [ 'ReleaseTransactionStmt',   'TransactionStmt',
    [ (0, 'release'),
      (0, 'transaction'),
      (0, 'savepoint_label') ] ],
  [ 'CommitTransactionStmt',    'TransactionStmt',
    [ (0, 'commit_or_end'),
      (0, 'transaction') ] ],
  [ 'RollbackTransactionStmt',  'TransactionStmt',
    [ (0, 'rollback_or_abort'),
      (0, 'transaction'),
      (0, 'to'),
      (0, 'savepoint'),
      (0, 'savepoint_label') ] ],
  [ 'PrepareTransactionStmt',   'TransactionStmt',
    [ (0, 'prepare'),
      (0, 'transaction'),
      (0, 'pre_trans_label') ] ],
  [ 'CommitPrepTransactionStmt','TransactionStmt',
    [ (0, 'commit'),
      (0, 'prepared'),
      (0, 'pre_trans_label') ] ],
  [ 'RollPrepTransactionStmt',  'TransactionStmt',
    [ (0, 'rollback'),
      (0, 'prepared'),
      (0, 'pre_trans_label') ] ],
  [ 'SecLabelStmt',             'DdlStatement',                 [] ],
  [ 'ColSecLabelStmt',          'SecLabelStmt',
    [ (0, 'security'),
      (0, 'label'),
      (1, 'SecurityProvider', 'provider'),
      (0, 'on'),
      (0, 'column'),
      (1, 'ColumnIdentifier', 'column'),
      (0, 'is'),
      (0, 'seq_label') ] ],
  [ 'SequenceSecLabelStmt',     'SecLabelStmt',
    [ (0, 'security'),
      (0, 'label'),
      (1, 'SecurityProvider', 'provider'),
      (0, 'on'),
      (0, 'sequence'),
      (1, 'SequenceIdentifier', 'seqIdent'),
      (0, 'is'),
      (0, 'seq_label') ] ],
  [ 'TableSecLabelStmt',        'SecLabelStmt',
    [ (0, 'security'),
      (0, 'label'),
      (1, 'SecurityProvider', 'provider'),
      (0, 'on'),
      (0, 'foreign_or_materialized'),
      (0, 'table_or_view'),
      (1, 'TableIdentifier', 'ident'),
      (0, 'is'),
      (0, 'seq_label') ] ],
  [ 'AggrSecLabelStmt',         'SecLabelStmt',
    [ (0, 'security'),
      (0, 'label'),
      (1, 'SecurityProvider', 'provider'),
      (0, 'on'),
      (0, 'aggregate'),
      (1, 'FunctionRef', 'funcRef'),
      (1, 'AggrArguments', 'args'),
      (0, 'is'),
      (0, 'seq_label') ] ],
  [ 'FuncSecLabelStmt',         'SecLabelStmt',
    [ (0, 'security'),
      (0, 'label'),
      (1, 'SecurityProvider', 'provider'),
      (0, 'on'),
      (0, 'function'),
      (1, 'FunctionRef', 'funcRef'),
      (1, 'FunctionArgTypes', 'argTypes'),
      (0, 'is'),
      (0, 'seq_label') ] ],
  [ 'LargeObjSecLabelStmt',     'SecLabelStmt',
    [ (0, 'security'),
      (0, 'label'),
      (1, 'SecurityProvider', 'provider'),
      (0, 'on'),
      (0, 'large'),
      (0, 'object'),
      (0, 'sp_num'),
      (0, 'is'),
      (0, 'seq_label') ] ],
  [ 'LangSecLabelStmt',         'SecLabelStmt',
    [ (0, 'security'),
      (0, 'label'),
      (1, 'SecurityProvider', 'provider'),
      (0, 'on'),
      (0, 'procedural'),
      (0, 'language'),
      (1, 'AnyIdentifier', 'ident'),
      (0, 'is'),
      (0, 'seq_label') ] ],
  [ 'SchemaSecLabelStmt',       'SecLabelStmt',
    [ (0, 'security'),
      (0, 'label'),
      (1, 'SecurityProvider', 'provider'),
      (0, 'on'),
      (0, 'schema'),
      (1, 'Name', 'schemaName'),
      (0, 'is'),
      (0, 'seq_label') ] ],
  [ 'RoleSecLabelStmt',         'SecLabelStmt',
    [ (0, 'security'),
      (0, 'label'),
      (1, 'SecurityProvider', 'provider'),
      (0, 'on'),
      (0, 'role'),
      (1, 'RoleId', 'roleId'),
      (0, 'is'),
      (0, 'seq_label') ] ],
  [ 'CommonSecLabelStmt',       'SecLabelStmt',
    [ (0, 'security'),
      (0, 'label'),
      (1, 'SecurityProvider', 'provider'),
      (0, 'on'),
      (1, 'CommonSecurityType', 'secType'),
      (1, 'AnyIdentifier', 'ident'),
      (0, 'is'),
      (0, 'seq_label') ] ],
  [ 'SecurityProvider',         '',
    [ (0, 'for'),
      (0, 'prov_id') ] ],
  [ 'CommonSecurityType',       '',
    [ (0, 'sp1'),
      (0, 'sp2') ] ],
  [ 'RenameStmt',               'DdlStatement',                 [] ],
  [ 'RenameTypeStmt',           'RenameStmt',
    [ (0, 'alter'),
      (0, 'type'),
      (1, 'AnyIdentifier', 'ident'),
      (0, 'rename'),
      (0, 'to'),
      (1, 'Name', 'newName') ] ],
  [ 'RenameTypeAttrStmt',       'RenameStmt',
    [ (0, 'alter'),
      (0, 'type'),
      (1, 'AnyIdentifier', 'ident'),
      (0, 'rename'),
      (0, 'attribute'),
      (1, 'Name', 'oldName'),
      (0, 'to'),
      (1, 'Name', 'newName') ] ],
  [ 'RenameRuleStmt',           'RenameStmt',
    [ (0, 'alter'),
      (0, 'rule'),
      (1, 'Name', 'ruleName'),
      (0, 'on'),
      (1, 'TableIdentifier', 'tableIdent'),
      (0, 'rename'),
      (0, 'to'),
      (1, 'Name', 'newName') ] ],
  [ 'RenameTriggerStmt',        'RenameStmt',
    [ (0, 'alter'),
      (0, 'trigger'),
      (1, 'Name', 'triggerName'),
      (0, 'on'),
      (1, 'TableIdentifier', 'tableIdent'),
      (0, 'rename'),
      (0, 'to'),
      (1, 'Name', 'newName') ] ],
  [ 'RenameSchemaStmt',         'RenameStmt',
    [ (0, 'alter'),
      (0, 'schema'),
      (1, 'Name', 'oldName'),
      (0, 'rename'),
      (0, 'to'),
      (1, 'Name', 'newName') ] ],
  [ 'RenameServerStmt',         'RenameStmt',
    [ (0, 'alter'),
      (0, 'server'),
      (1, 'Name', 'oldName'),
      (0, 'rename'),
      (0, 'to'),
      (1, 'Name', 'newName') ] ],
  [ 'RenameEvtTrgStmt',         'RenameStmt',
    [ (0, 'alter'),
      (0, 'event'),
      (0, 'trigger'),
      (1, 'Name', 'oldName'),
      (0, 'rename'),
      (0, 'to'),
      (1, 'Name', 'newName') ] ],
  [ 'RenameRoleStmt',           'RenameStmt',
    [ (0, 'alter'),
      (0, 'role_or_user'),
      (1, 'RoleId', 'oldName'),
      (0, 'rename'),
      (0, 'to'),
      (1, 'RoleId', 'newName') ] ],
  [ 'RenameTablespaceStmt',     'RenameStmt',
    [ (0, 'alter'),
      (0, 'tablespace'),
      (1, 'Name', 'oldName'),
      (0, 'rename'),
      (0, 'to'),
      (1, 'Name', 'newName') ] ],
  [ 'ChgReloptsTablespaceStmt','RenameStmt',
    [ (0, 'alter'),
      (0, 'tablespace'),
      (1, 'Name', 'tablespaceName'),
      (0, 'set_or_reset'),
      (1, 'RelOptions', 'relOptions') ] ],
  [ 'RenameSearchStmt',         'RenameStmt',
    [ (0, 'alter'),
      (0, 'text'),
      (0, 'search'),
      (0, 'sp_obj'),
      (1, 'AnyIdentifier', 'ident'),
      (0, 'rename'),
      (0, 'to'),
      (1, 'Name', 'newName') ] ],
  [ 'RenameTableStmt',         'RenameStmt',
    [ (0, 'alter'),
      (0, 'foreign'),
      (0, 'table'),
      (0, 'if'),
      (0, 'exists'),
      (1, 'RelationExpr', 'oldName'),
      (0, 'rename'),
      (0, 'to'),
      (1, 'Name', 'newName') ] ],
  [ 'RenameTableColStmt',       'RenameStmt',
    [ (0, 'alter'),
      (0, 'foreign'),
      (0, 'table'),
      (0, 'if'),
      (0, 'exists'),
      (1, 'RelationExpr', 'rel'),
      (0, 'rename'),
      (0, 'column'),
      (1, 'Name', 'oldColName'),
      (0, 'to'),
      (1, 'Name', 'newColName') ] ],
  [ 'RenameTableConstrStmt',    'RenameStmt',
    [ (0, 'alter'),
      (0, 'table'),
      (1, 'RelationExpr', 'rel'),
      (0, 'rename'),
      (0, 'constraint'),
      (1, 'Name', 'oldConstrName'),
      (0, 'to'),
      (1, 'Name', 'newConstrName') ] ],
  [ 'RenameMatViewColStmt',       'RenameStmt',
    [ (0, 'alter'),
      (0, 'materialized'),
      (0, 'view'),
      (0, 'if'),
      (0, 'exists'),
      (1, 'TableIdentifier', 'viewIdent'),
      (0, 'rename'),
      (0, 'column'),
      (1, 'Name', 'oldColName'),
      (0, 'to'),
      (1, 'Name', 'newColName') ] ],
  [ 'RenameSequenceStmt',       'RenameStmt',
    [ (0, 'alter'),
      (0, 'sequence'),
      (0, 'if'),
      (0, 'exists'),
      (1, 'SequenceIdentifier', 'oldName'),
      (0, 'rename'),
      (0, 'to'),
      (1, 'Name', 'newName') ] ],
  [ 'RenameViewStmt',           'RenameStmt',
    [ (0, 'alter'),
      (0, 'matirialized'),
      (0, 'view'),
      (0, 'if'),
      (0, 'exists'),
      (1, 'TableIdentifier', 'oldName'),
      (0, 'rename'),
      (0, 'to'),
      (1, 'Name', 'newName') ] ],
  [ 'RenameIndexStmt',          'RenameStmt',
    [ (0, 'alter'),
      (0, 'index'),
      (0, 'if'),
      (0, 'exists'),
      (1, 'IndexIdentifier', 'oldName'),
      (0, 'rename'),
      (0, 'to'),
      (1, 'Name', 'newName') ] ],
  [ 'RenameCollationStmt',      'RenameStmt',
    [ (0, 'alter'),
      (0, 'collation'),
      (1, 'AnyIdentifier', 'ident'),
      (0, 'rename'),
      (0, 'to'),
      (1, 'Name', 'newName') ] ],
  [ 'RenameConversionStmt',     'RenameStmt',
    [ (0, 'alter'),
      (0, 'conversion'),
      (1, 'AnyIdentifier', 'ident'),
      (0, 'rename'),
      (0, 'to'),
      (1, 'Name', 'newName') ] ],
  [ 'RenameDomainStmt',         'RenameStmt',
    [ (0, 'alter'),
      (0, 'domain'),
      (1, 'AnyIdentifier', 'ident'),
      (0, 'rename'),
      (0, 'to'),
      (1, 'Name', 'newName') ] ],
  [ 'RenameDomainConstrStmt',   'RenameStmt',
    [ (0, 'alter'),
      (0, 'domain'),
      (1, 'AnyIdentifier', 'ident'),
      (0, 'rename'),
      (0, 'constraint'),
      (1, 'Name', 'constraintName'),
      (0, 'to'),
      (1, 'Name', 'newName') ] ],
  [ 'RenameDatabaseStmt',       'RenameStmt',
    [ (0, 'alter'),
      (0, 'database'),
      (1, 'DatabaseName', 'oldName'),
      (0, 'rename'),
      (0, 'to'),
      (1, 'DatabaseName', 'newName') ] ],
  [ 'RenameFdwStmt',            'RenameStmt',
    [ (0, 'alter'),
      (0, 'foreign'),
      (0, 'data'),
      (0, 'wrapper'),
      (1, 'Name', 'oldName'),
      (0, 'rename'),
      (0, 'to'),
      (1, 'Name', 'newName') ] ],
  [ 'RenameFuncStmt',           'RenameStmt',
    [ (0, 'alter'),
      (0, 'function'),
      (1, 'FunctionWithArgTypes', 'args'),
      (0, 'rename'),
      (0, 'to'),
      (1, 'Name', 'newName') ] ],
  [ 'RenameOpUsingStmt',        'RenameStmt',
    [ (0, 'alter'),
      (0, 'operator'),
      (0, 'class_or_family'),
      (1, 'AnyIdentifier', 'ident'),
      (0, 'using'),
      (0, 'acc_method'),
      (0, 'rename'),
      (0, 'to'),
      (1, 'Name', 'newName') ] ],
  [ 'RenameGroupRoleStmt',      'RenameStmt',
    [ (0, 'alter'),
      (0, 'group'),
      (1, 'RoleId', 'oldName'),
      (0, 'rename'),
      (0, 'to'),
      (1, 'RoleId', 'newName') ] ],
  [ 'RenameLangStmt',           'RenameStmt',
    [ (0, 'alter'),
      (0, 'procedural'),
      (0, 'language'),
      (1, 'Name', 'oldName'),
      (0, 'rename'),
      (0, 'to'),
      (1, 'Name', 'newName') ] ],
  [ 'RenameAggrStmt',           'RenameStmt',
    [ (0, 'alter'),
      (0, 'aggregate'),
      (1, 'FunctionRef', 'funcRef'),
      (1, 'AggrArguments', 'args'),
      (0, 'rename'),
      (0, 'to'),
      (1, 'Name', 'newName') ] ],
  [ 'ReindexStmt',              'Statement',                    [] ],
  [ 'ReindexTableStmt',         'ReindexStmt',
    [ (0, 'reindex'),
      (0, 'table'),
      (1, 'TableIdentifier', 'tableIdent'),
      (0, 'force') ] ],
  [ 'ReindexIndexStmt',         'ReindexStmt',
    [ (0, 'reindex'),
      (0, 'index'),
      (1, 'IndexIdentifier', 'tableIdent'),
      (0, 'force') ] ],
  [ 'ReindexSystemStmt',        'ReindexStmt',
    [ (0, 'reindex'),
      (0, 'system'),
      (1, 'Name', 'systemName'),
      (0, 'force') ] ],
  [ 'ReindexDatabaseStmt',      'ReindexStmt',
    [ (0, 'reindex'),
      (0, 'database'),
      (1, 'Name', 'dbName'),
      (0, 'force') ] ],
  [ 'PrepareStmt',              'Statement',
    [ (0, 'prepare'),
      (1, 'Name', 'prepName'),
      (1, 'PrepareTypeClause', 'prepareTypeClause'),
      (0, 'as'),
      (1, 'Statement', 'stmt') ] ],
  [ 'PrepareTypeClause',        '',
    [ (0, 'lparen'),
      (2, 'Type', 'types'),
      (0, 'rparen') ] ],
  [ 'LockStmt',                 'Statement',
    [ (0, 'lock'),
      (0, 'table'),
      (2, 'RelationExpr', 'reations'),
      (1, 'LockModeClause', 'lockMode'),
      (0, 'nowait') ] ],
  [ 'LockModeClause',           '',
    [ (0, 'in'),
      (1, 'LockType', 'lockType'),
      (0, 'mode') ] ],
  [ 'LockType',                 '',
    [ (0, 'sp1'),
      (0, 'sp2'),
      (0, 'sp3') ] ],
  [ 'DropStmt',                 'DdlStatement',                 [] ],
  [ 'DropAggrStmt',             'DropStmt',
    [ (0, 'drop'),
      (0, 'aggregate'),
      (0, 'if'),
      (0, 'exists'),
      (1, 'FunctionRef', 'funcRef'),
      (1, 'AggrArguments', 'args'),
      (0, 'behavior') ] ],
  [ 'DropFuncStmt',             'DropStmt',
    [ (0, 'drop'),
      (0, 'function'),
      (0, 'if'),
      (0, 'exists'),
      (1, 'FunctionRef', 'funcRef'),
      (1, 'FunctionArgTypes', 'argTypes'),
      (0, 'behavior') ] ],
  [ 'DropOperStmt',             'DropStmt',
    [ (0, 'drop'),
      (0, 'operator'),
      (0, 'if'),
      (0, 'exists'),
      (1, 'Operand', 'operand'),
      (1, 'OperArgTypes', 'argTypes'),
      (0, 'behavior') ] ],
  [ 'LoadStmt',                 'Statement',
    [ (0, 'load'),
      (0, 'file_name') ] ],
  [ 'NotifyStmt',               'Statement',
    [ (0, 'notify'),
      (0, 'notify_label'),
      (1, 'NotifyPayload', 'payload') ] ],
  [ 'NotifyPayload',            '',
    [ (0, 'comma'),
      (0, 'sp_str') ] ],
  [ 'ListenStmt',               'Statement',
    [ (0, 'listen'),
      (0, 'listen_label') ] ],
  [ 'UnlistenStmt',             'Statement',
    [ (0, 'unlisten'),
      (0, 'star_or_ident') ] ],
  [ 'CreateIndexStatement',     'CreateStatement',
    [ (0, 'create'),
      (0, 'unique'),
      (0, 'index'),
      (0, 'concurrently'),
      (1, 'Name', 'indexName'),
      (0, 'on'),
      (1, 'TableIdentifier', 'tableIdent'),
      (1, 'AccessMethodClause', 'accMethod'),
      (0, 'lparen'),
      (2, 'IndexElement', 'elements'),
      (0, 'rparen'),
      (1, 'WithReloptions', 'reopts'),
      (1, 'TableSpaceClause', 'tablespaceClause'),
      (1, 'WhereClause', 'whereClause') ] ],
  [ 'GrantRoleStmt',            'Statement',
    [ (0, 'grant'),
      (2, 'CommonPrivilege', 'privs'),
      (0, 'to'),
      (2, 'RoleId', 'roles'),
      (1, 'WithAdminOption', 'withAdmin'),
      (1, 'GrantedByClause', 'grantedBy') ] ],
  [ 'RevokeRoleStmt',           'Statement',
    [ (0, 'revoke'),
      (0, 'admin'),
      (0, 'option'),
      (0, 'for'),
      (2, 'CommonPrivilege', 'privs'),
      (0, 'from'),
      (2, 'RoleId', 'roles'),
      (1, 'GrantedByClause', 'grantedBy'),
      (0, 'behavior') ] ],
  [ 'WithAdminOption',          '',
    [ (0, 'with'),
      (0, 'admin'),
      (0, 'option') ] ],
  [ 'GrantedByClause',          '',
    [ (0, 'granted'),
      (0, 'by'),
      (1, 'RoleId', 'granter') ] ],
  [ 'GrantStmt',                'Statement',
    [ (0, 'grant'),
      (1, 'Privileges', 'privs'),
      (0, 'on'),
      (1, 'PrivilegeTarget', 'target'),
      (0, 'to'),
      (2, 'Grantee', 'grantees'),
      (1, 'WithGrantOption', 'withGrantOption') ] ],
  [ 'RevokeStmt',               'Statement',
    [ (0, 'revoke'),
      (0, 'grant'),
      (0, 'option'),
      (0, 'for'),
      (1, 'Privileges', 'privs'),
      (0, 'on'),
      (1, 'PrivilegeTarget', 'target'),
      (0, 'from'),
      (2, 'Grantee', 'grantees'),
      (0, 'behavior') ] ],
  [ 'PrivilegeTarget',          '',                             [] ],
  [ 'TablePrivilegeTarget',     'PrivilegeTarget',
    [ (0, 'table'),
      (2, 'TableIdentifier', 'tables') ] ],
  [ 'SequencePrivilegeTarget',  'PrivilegeTarget',
    [ (0, 'sequence'),
      (2, 'SequenceIdentifier', 'seqs') ] ],
  [ 'FdwPrivilegeTarget',       'PrivilegeTarget',
    [ (0, 'foreign'),
      (0, 'data'),
      (0, 'wrapper'),
      (2, 'Name', 'wrappers') ] ],
  [ 'ForeignSrvPrivilegeTarget','PrivilegeTarget',
    [ (0, 'foreign'),
      (0, 'server'),
      (2, 'Name', 'servers') ] ],
  [ 'FuncPrivilegeTarget',      'PrivilegeTarget',
    [ (0, 'function'),
      (2, 'FunctionWithArgTypes', 'functions') ] ],
  [ 'DbPrivilegeTarget',        'PrivilegeTarget',
    [ (0, 'database'),
      (2, 'Name', 'databases') ] ],
  [ 'DomainPrivilegeTarget',    'PrivilegeTarget',
    [ (0, 'domain'),
      (2, 'AnyIdentifier', 'domains') ] ],
  [ 'LangPrivilegeTarget',      'PrivilegeTarget',
    [ (0, 'language'),
      (2, 'Name', 'langs') ] ],
  [ 'LargeObjPrivilegeTarget',  'PrivilegeTarget',
    [ (0, 'large'),
      (0, 'object'),
      (2, 'Numeric', 'nums') ] ],
  [ 'SchemaPrivilegeTarget',    'PrivilegeTarget',
    [ (0, 'schema'),
      (2, 'Name', 'schemas') ] ],
  [ 'TblspacePrivilegeTarget',  'PrivilegeTarget',
    [ (0, 'tablespace'),
      (2, 'Name', 'tablespaces') ] ],
  [ 'TypePrivilegeTarget',      'PrivilegeTarget',
    [ (0, 'type'),
      (2, 'AnyIdentifier', 'types') ] ],
  [ 'AllInSchPrivilegeTarget',  'PrivilegeTarget',
    [ (0, 'all'),
      (0, 'sp_obj'),
      (0, 'in'),
      (0, 'schema'),
      (2, 'Name', 'schemas') ] ],
  [ 'Numeric',                  '',
    [ (0, 'sp_num') ] ],
  [ 'FetchStmt',                'Statement',
    [ (0, 'fetch_or_move'),
      (1, 'FetchClause', 'fetchClause') ] ],
  [ 'FetchClause',              '',
    [ (0, 'sp_step'),
      (0, 'sp_step_spec'),
      (0, 'from_or_in'),
      (1, 'Name', 'cursorName') ] ],
  [ 'BaseExplainStmt',          'Statement',                    [] ],
  [ 'CommonExplainStmt',        'BaseExplainStmt',
    [ (0, 'explain'),
      (0, 'analize'),
      (0, 'verbose'),
      (1, 'Statement', 'explStmt') ] ],
  [ 'OptExplainStmt',           'BaseExplainStmt',
    [ (0, 'explain'),
      (0, 'lparen'),
      (2, 'ExplainOption', 'options'),
      (0, 'rparen'),
      (1, 'Statement', 'explStmt') ] ],
  [ 'ExplainOption',            '',
    [ (0, 'sp_name'),
      (0, 'sp_arg') ] ],
  [ 'RefreshMatViewStmt',       'Statement',
    [ (0, 'refresh'),
      (0, 'materialized'),
      (0, 'view'),
      (1, 'TableIdentifier', 'viewIdent'),
      (1, 'WithDataClause', 'withData') ] ],
  [ 'DropDbStmt',               'DropStmt',
    [ (0, 'drop'),
      (0, 'database'),
      (0, 'if'),
      (0, 'exists'),
      (1, 'DatabaseName', 'dbName') ] ],
  [ 'DropUserMappingStmt',      'DropStmt',
    [ (0, 'drop'),
      (0, 'user'),
      (0, 'mapping'),
      (0, 'if'),
      (0, 'exists'),
      (0, 'for'),
      (1, 'AuthIdentifier', 'authIdent'),
      (0, 'server'),
      (1, 'Name', 'serverName') ] ],
  [ 'DropTableSpaceStmt',       'DropStmt',
    [ (0, 'drop'),
      (0, 'tablespace'),
      (0, 'if'),
      (0, 'exists'),
      (1, 'Name', 'tablespaceName') ] ],
  [ 'CommonDropStmt',           '',
    [ (0, 'drop'),
      (1, 'CommonDropType', 'dropType'),
      (0, 'if'),
      (0, 'exists'),
      (2, 'AnyIdentifier', 'idents'),
      (0, 'behavior') ] ],
  [ 'CommonDropType',           '',
    [ (0, 'sp1'),
      (0, 'sp2'),
      (0, 'sp3') ] ],
  [ 'DropTableStmt',        'DropStmt',
    [ (0, 'drop'),
      (0, 'foreign'),
      (0, 'table'),
      (0, 'if'),
      (0, 'exists'),
      (2, 'TableIdentifier', 'tables'),
      (0, 'behavior') ] ],
  [ 'DropViewStmt',        'DropStmt',
    [ (0, 'drop'),
      (0, 'materialized'),
      (0, 'view'),
      (0, 'if'),
      (0, 'exists'),
      (2, 'TableIdentifier', 'tables'),
      (0, 'behavior') ] ],
  [ 'DropIndexStmt',            'DropStmt',
    [ (0, 'drop'),
      (0, 'index'),
      (0, 'concurrently'),
      (0, 'if'),
      (0, 'exists'),
      (2, 'IndexIdentifier', 'indexes'),
      (0, 'behavior') ] ],
  [ 'DropSchemaStmt',           'DropStmt',
    [ (0, 'drop'),
      (0, 'schema'),
      (0, 'if'),
      (0, 'exists'),
      (2, 'Name', 'schemas'),
      (0, 'behavior') ] ],
  [ 'DropSequenceStmt',         'DropStmt',
    [ (0, 'drop'),
      (0, 'sequence'),
      (0, 'if'),
      (0, 'exists'),
      (2, 'SequenceIdentifier', 'seqs'),
      (0, 'behavior') ] ],
  [ 'RuleStmt',                 'CreateStatement',
    [ (0, 'create'),
      (1, 'OrReplaceClause', 'orReplace'),
      (0, 'rule'),
      (1, 'Name', 'ruleName'),
      (0, 'as'),
      (0, 'on'),
      (0, 'sp_event'),
      (0, 'to'),
      (1, 'TableIdentifier', 'tableIdent'),
      (1, 'WhereClause', 'whereClause'),
      (0, 'do'),
      (0, 'instaed'),
      (1, 'RuleActions', 'actions') ] ],
  [ 'RuleActions',              '',                             [] ],
  [ 'NothingRuleActions',       'RuleActions',
    [ (0, 'nothing') ] ],
  [ 'SingleRuleActions',        'RuleActions',
    [ (1, 'Statement', 'actStatement') ] ],
  [ 'MultiRuleActions',         'RuleActions',
    [ (0, 'lparen'),
      (2, 'Statement', 'actions'),
      (0, 'rparen') ] ],
  [ 'DropRuleStmt',             'DropStmt',
    [ (0, 'drop'),
      (0, 'rule'),
      (0, 'if'),
      (0, 'exists'),
      (1, 'Name', 'ruleName'),
      (0, 'on'),
      (1, 'TableIdentifier', 'tableIdent'),
      (0, 'behavior') ] ],
  [ 'DropOwnedStmt',            'DropStmt',
    [ (0, 'drop'),
      (0, 'owned'),
      (0, 'by'),
      (2, 'RoleId', 'roles'),
      (0, 'behavior') ] ],
  [ 'ReassignOwnedStmt',        'DdlStatement',
    [ (0, 'reassign'),
      (0, 'owned'),
      (0, 'by'),
      (2, 'RoleId', 'roles'),
      (0, 'to'),
      (1, 'Name', 'newRole') ] ],
  [ 'DropGroupStmt',            'DropStmt',
    [ (0, 'drop'),
      (0, 'group'),
      (0, 'if'),
      (0, 'exists'),
      (2, 'RoleId', 'roles') ] ],
  [ 'DropForeignServerStmt',    'DropStmt',
    [ (0, 'drop'),
      (0, 'server'),
      (0, 'if'),
      (0, 'exists'),
      (1, 'Name', 'serverName'),
      (0, 'behavior') ] ],
  [ 'DropFdwStmt',              'DropStmt',
    [ (0, 'drop'),
      (0, 'foreign'),
      (0, 'data'),
      (0, 'wrapper'),
      (0, 'if'),
      (0, 'exists'),
      (1, 'Name', 'fdwName'),
      (0, 'behavior') ] ],
  [ 'DoStmt',                   'Statement',
    [ (0, 'do'),
      (2, 'DoStmtItem', 'items') ] ],
  [ 'DoStmtItem',               '',                             [] ],
  [ 'DoStmtCmdItem',            'DoStmtItem',
    [ (0, 'str_cmd') ] ],
  [ 'DoStmtLangItem',           'DoStmtItem',
    [ (0, 'language'),
      (0, 'lang_label') ] ],
  [ 'CreateOldAggregateStmt',   'CreateStatement',
    [ (0, 'create'),
      (0, 'aggregate'),
      (1, 'FunctionRef', 'functionRef'),
      (1, 'AggregateDefinition', 'aggrDefinition') ] ],
  [ 'AggregateDefinition',      '',
    [ (0, 'lparen'),
      (2, 'AggrDefinition', 'defs'),
      (0, 'rparen') ] ],
  [ 'AggrDefinition',           '',
    [ (0, 'identifier'),
      (0, 'equal'),
      (1, 'DefinitionArgument', 'arg') ] ],
  [ 'CreateAggregateStmt',      'CreateStatement',
    [ (0, 'create'),
      (0, 'aggregate'),
      (1, 'FunctionRef', 'functionRef'),
      (1, 'AggrArguments', 'args'),
      (1, 'Definition', 'defintion') ] ],
  [ 'CreateOpStmt',             'CreateStatement',
    [ (0, 'create'),
      (0, 'operator'),
      (1, 'Operand', 'operand'),
      (1, 'Definition', 'defintion') ] ],
  [ 'CreateTypeStmt',           'CreateStatement',              [] ],
  [ 'CreateTypeAsRecordStmt',   'CreateTypeStmt',
    [ (0, 'create'),
      (0, 'type'),
      (1, 'AnyIdentifier', 'typeIdent'),
      (0, 'as'),
      (0, 'lparen'),
      (2, 'TableFuncElement', 'members'),
      (0, 'rparen') ] ],
  [ 'CreateTypeAsEnumStmt',     'CreateTypeStmt',
    [ (0, 'create'),
      (0, 'type'),
      (1, 'AnyIdentifier', 'typeIdent'),
      (0, 'as'),
      (0, 'enum'),
      (0, 'lparen'),
      (2, 'EnumValue', 'values'),
      (0, 'rparen') ] ],
  [ 'EnumValue',                '',
    [ (0, 'str_value') ] ],
  [ 'CreateTypeAsDefStmt',      'CreateTypeStmt',
    [ (0, 'create'),
      (0, 'type'),
      (1, 'AnyIdentifier', 'typeIdent'),
      (1, 'Definition', 'defintion') ] ],
  [ 'CreateTypeAsRangeStmt',    'CreateTypeStmt',
    [ (0, 'create'),
      (0, 'type'),
      (1, 'AnyIdentifier', 'typeIdent'),
      (0, 'as'),
      (0, 'range'),
      (1, 'Definition', 'defintion') ] ],
  [ 'CreateSearchObjStmt',      'CreateStatement',
    [ (0, 'create'),
      (0, 'text'),
      (0, 'search'),
      (0, 'sp_obj'),
      (1, 'AnyIdentifier', 'ident'),
      (1, 'Definition', 'defintion') ] ],
  [ 'CreateCollationStmt',      'CreateStatement',              [] ],
  [ 'CreateCollationDefStmt',   'CreateCollationStmt',
    [ (0, 'create'),
      (0, 'collation'),
      (1, 'AnyIdentifier', 'collationIdent'),
      (1, 'Definition', 'defintion') ] ],
  [ 'CreateCollationFromStmt',  'CreateCollationStmt',
    [ (0, 'create'),
      (0, 'collation'),
      (1, 'AnyIdentifier', 'collationIdent'),
      (0, 'from'),
      (1, 'AnyIdentifier', 'fromCollationIdent') ] ],
  [ 'DeclareCursorStmt',        'Statement',
    [ (0, 'declare'),
      (1, 'Name', 'cursorName'),
      (0, 'cursor'),
      (1, 'CursorHoldOption', 'holdOption'),
      (0, 'for'),
      (1, 'SelectStmt', 'query') ] ],
  [ 'CursorHoldOption',         '',
    [ (0, 'with_or_without'),
      (0, 'hold') ] ],
  [ 'DeallocateStmt',           'Statement',
    [ (0, 'deallocate'),
      (0, 'prepare'),
      (0, 'all_or_plan_name') ] ],
  [ 'CreateDbStmt',             'CreateStatement',
    [ (0, 'create'),
      (0, 'database'),
      (1, 'DatabaseName', 'dbName'),
      (0, 'with'),
      (2, 'CreateDbOption', 'options') ] ],
  [ 'CreateDbOption',           '',                             [] ],
  [ 'NamedCreateDbOption',      'CreateDbOption',
    [ (0, 'sp_opt'),
      (0, 'equal'),
      (1, 'Name', 'optName') ] ],
  [ 'ValDefCreateDbOption',     'CreateDbOption',
    [ (0, 'sp1'),
      (0, 'sp2'),
      (0, 'equal'),
      (0, 'default_or_value') ] ],
  [ 'CreateUserMappingStmt',    'CreateStatement',
    [ (0, 'create'),
      (0, 'user'),
      (0, 'mapping'),
      (0, 'for'),
      (1, 'AuthIdentifier', 'authIdent'),
      (0, 'server'),
      (1, 'Name', 'serverName'),
      (1, 'CreateGeneticOptions', 'options') ] ],
  [ 'DropTrigStmt',             'DdlStatement',
    [ (0, 'drop'),
      (0, 'trigger'),
      (0, 'if'),
      (0, 'exists'),
      (1, 'Name', 'triggerName'),
      (0, 'on'),
      (1, 'TableIdentifier', 'tableIdent'),
      (0, 'behavior') ] ],
  [ 'CreateConstrTrigStmt',     'CreateStatement',
    [ (0, 'create'),
      (0, 'constraint'),
      (0, 'trigger'),
      (1, 'Name', 'triggerName'),
      (0, 'after'),
      (2, 'TriggerEvent', 'events'),
      (0, 'on'),
      (1, 'TableIdentifier', 'tableIdent'),
      (1, 'ConstrFromTable', 'fromTable'),
      (2, 'ConstraintAttribute', 'constraints'),
      (1, 'TriggerForSpec', 'forSpec'),
      (1, 'TriggerWhen', 'trgWhen'),
      (1, 'TriggerExecuteClause', 'execClause') ] ],
  [ 'ConstrFromTable',          '',
    [ (0, 'from'),
      (1, 'TableIdentifier', 'tableIdent') ] ],
  [ 'CreateTrigStmt',           'CreateStatement',
    [ (0, 'create'),
      (0, 'trigger'),
      (1, 'Name', 'triggerName'),
      (1, 'TriggerActionTime', 'actTime'),
      (2, 'TriggerEvent', 'events'),
      (0, 'on'),
      (1, 'TableIdentifier', 'tableIdent'),
      (1, 'TriggerForSpec', 'forSpec'),
      (1, 'TriggerWhen', 'trgWhen'),
      (1, 'TriggerExecuteClause', 'execClause') ] ],
  [ 'TriggerExecuteClause',     '',
    [ (0, 'execute'),
      (0, 'procedure'),
      (1, 'FunctionRef', 'functionRef'),
      (0, 'lparen'),
      (2, 'TriggerFuncArg', 'args'),
      (0, 'rparen') ] ],
  [ 'TriggerFuncArg',           '',
    [ (0, 'arg_value') ] ],
  [ 'TriggerWhen',              '',
    [ (0, 'when'),
      (0, 'lparen'),
      (1, 'Expression', 'expr'),
      (0, 'rparen') ] ],
  [ 'TriggerForSpec',           '',
    [ (0, 'for'),
      (0, 'each'),
      (0, 'row_or_statement') ] ],
  [ 'TriggerEvent',             '',
    [ (0, 'sp_event'),
      (0, 'of'),
      (2, 'Name', 'columns') ] ],
  [ 'TriggerActionTime',        '',
    [ (0, 'before_after_instaed'),
      (0, 'of') ] ],
  [ 'CreateTableSpaceStmt',     'CreateStatement',
    [ (0, 'create'),
      (0, 'tablespace'),
      (1, 'Name', 'tablespaceName'),
      (1, 'TableSpaceOwnerClause', 'tablespaceOwner'),
      (0, 'location'),
      (0, 'path_value') ] ],
  [ 'TableSpaceOwnerClause' ,   '',
    [ (0, 'owner'),
      (1, 'Name', 'ownerName') ] ],
  [ 'CreateTableAsExecStmt',    'CreateStatement',
    [ (0, 'create'),
      (1, 'TempClause', 'tempClause'),
      (0, 'table'),
      (1, 'CreateAsTarget', 'target'),
      (0, 'as'),
      (1, 'ExecuteStmt', 'execStmt'),
      (1, 'WithDataClause', 'withData') ] ],
  [ 'ExecuteStmt',              'Statement',
    [ (0, 'execute'),
      (1, 'Name', 'planName'),
      (1, 'ExecuteParamClause', 'parClause') ] ],
  [ 'ExecuteParamClause',       '',
    [ (0, 'lparen'),
      (2, 'Expression', 'params'),
      (0, 'rparen') ] ],
  [ 'CreateTableStmt',          'CreateStatement',
    [ (0, 'create'),
      (1, 'TempClause', 'tempClause'),
      (0, 'table'),
      (0, 'if'),
      (0, 'not'),
      (0, 'exists'),
      (1, 'TableIdentifier', 'tableIdent'),
      (1, 'CreateTableClause', 'createClause'),
      (1, 'CreateTableOptions', 'options') ] ],
  [ 'CreateTableOptions',       '',
    [ (1, 'CreateWithOptions', 'withOptions'),
      (1, 'OnCommitOption', 'commitOption'),
      (1, 'TableSpaceClause', 'tablespaceClause') ] ],
  [ 'CreateTableClause',        '',                             [] ],
  [ 'CreateTableDirecClause',   'CreateTableClause',
    [ (0, 'lparen'),
      (2, 'TableElement', 'columns'),
      (0, 'rparen'),
      (1, 'TableInheritClause', 'inherit') ] ],
  [ 'CreateTableOfClause',      'CreateTableClause',
    [ (0, 'of'),
      (1, 'AnyIdentifier', 'ident'),
      (1, 'TypedTableElements', 'elements') ] ],
  [ 'TypedTableElements',       '',
    [ (0, 'lparen'),
      (2, 'TypedTableElement', 'members'),
      (0, 'rparen') ] ],
  [ 'TypedTableElement',        '',                             [] ],
  [ 'TypedTableConstrElement',  'TypedTableElement',
    [ (1, 'TableConstraint', 'constraint') ] ],
  [ 'TypedTableColElement',     'TypedTableElement',
    [ (1, 'Name', 'columnName'),
      (0, 'with'),
      (0, 'options'),
      (2, 'ColumnConstraint', 'constraints') ] ],
  [ 'TableInheritClause',       '',
    [ (0, 'inherits'),
      (0, 'lparen'),
      (2, 'TableIdentifier', 'tables'),
      (0, 'rparen') ] ],
  [ 'CreateSchemaStmt',         'CreateStatement',
    [ (0, 'create'),
      (0, 'schema'),
      (0, 'if'),
      (0, 'not'),
      (0, 'exists'),
      (1, 'CreateSchemaClause', 'schemaClause') ] ],
  [ 'CreateSchemaClause',       '',
    [ (1, 'Name', 'schemaName'),
      (0, 'authorization'),
      (1, 'RoleId', 'roleId'),
      (2, 'Statement', 'schemaStatements') ] ],
  [ 'DropPLangStmt',            'DdlStatement',
    [ (0, 'drop'),
      (0, 'procedural'),
      (0, 'language'),
      (0, 'if'),
      (0, 'exists'),
      (0, 'lang_alias'),
      (0, 'behavior') ] ],
  [ 'CreatePLangStmt',          'CreateStatement',
    [ (0, 'create'),
      (1, 'OrReplaceClause', 'orReplaceClause'),
      (0, 'trusted'),
      (0, 'procedural'),
      (0, 'language'),
      (0, 'lang_alias'),
      (0, 'handler'),
      (1, 'HandlerIdentifier', 'handlerIdent'),
      (1, 'InlineHandlerClause', 'inlineClause'),
      (1, 'ValidatorHandlerClause', 'validatorClause') ] ],
  [ 'InlineHandlerClause',      '',
    [ (0, 'inline'),
      (1, 'HandlerIdentifier', 'handlerIdent') ] ],
  [ 'ValidatorHandlerClause',   '',
    [ (0, 'validator'),
      (1, 'HandlerIdentifier', 'handlerIdent') ] ],
  [ 'DropOpClassStmt',          'DdlStatement',
    [ (0, 'drop'),
      (0, 'operator'),
      (0, 'class'),
      (0, 'if'),
      (0, 'exists'),
      (1, 'AnyIdentifier', 'opIdent'),
      (0, 'using'),
      (0, 'acc_method'),
      (0, 'ehavior') ] ],
  [ 'DropOpFamilyStmt',         'DdlStatement',
    [ (0, 'drop'),
      (0, 'operator'),
      (0, 'family'),
      (0, 'if'),
      (0, 'exists'),
      (1, 'AnyIdentifier', 'opIdent'),
      (0, 'using'),
      (0, 'acc_method'),
      (0, 'ehavior') ] ],
  [ 'AlterOpFamilyAddStmt',     'DdlStatement',
    [ (0, 'alter'),
      (0, 'operator'),
      (0, 'family'),
      (1, 'AnyIdentifier', 'opIdent'),
      (0, 'using'),
      (0, 'acc_method'),
      (0, 'add'),
      (2, 'OpClass', 'opClasses') ] ],
  [ 'AlterOpFamilyDropStmt',    'DdlStatement',
    [ (0, 'alter'),
      (0, 'operator'),
      (0, 'family'),
      (1, 'AnyIdentifier', 'opIdent'),
      (0, 'using'),
      (0, 'acc_method'),
      (0, 'drop'),
      (2, 'OpClassDrop', 'opClasses') ] ],
  [ 'OpClassDrop',              '',
    [ (0, 'function_or_operator'),
      (0, 'sp_value'),
      (0, 'lparen'),
      (2, 'Type', 'types'),
      (0, 'rparen') ] ],
  [ 'CreateOpFamilyStmt',       'CreateStatement',
    [ (0, 'create'),
      (0, 'operator'),
      (0, 'family'),
      (1, 'AnyIdentifier', 'opIdent'),
      (0, 'using'),
      (0, 'acc_method') ] ],
  [ 'CreateOpClassStmt',        'CreateStatement',
    [ (0, 'create'),
      (0, 'operator'),
      (0, 'class'),
      (1, 'AnyIdentifier', 'opIdent'),
      (0, 'default'),
      (0, 'for'),
      (0, 'type'),
      (1, 'Type', 'opType'),
      (0, 'using'),
      (0, 'acc_method'),
      (1, 'OpFamily', 'opFamily'),
      (0, 'as'),
      (2, 'OpClass', 'opClass') ] ],
  [ 'OpClass',                  '',                             [] ],
  [ 'StorageOpClass',           'OpClass',
    [ (0, 'storage'),
      (1, 'Type', 'storageType') ] ],
  [ 'OperatorOpClass',          'OpClass',
    [ (0, 'operator'),
      (0, 'sp_value'),
      (1, 'Operand', 'operand'),
      (1, 'OperArgTypes', 'argTypes'),
      (1, 'OpClassPurpose', 'purpose'),
      (0, 'recheck') ] ],
  [ 'OpClassPurpose',           '',                             [] ],
  [ 'OpClassSearchPurpose',     'OpClassPurpose',
    [ (0, 'for'),
      (0, 'search') ] ],
  [ 'OpClassOrderPurpose',      'OpClassPurpose',
    [ (0, 'for'),
      (0, 'order'),
      (0, 'by'),
      (1, 'AnyIdentifier', 'orderIdent') ] ],
  [ 'FunctionOpClass',          'OpClass',
    [ (0, 'function'),
      (0, 'sp_value'),
      (0, 'lparen'),
      (2, 'Type', 'types'),
      (0, 'rparen'),
      (1, 'FunctionRef', 'functionRef'),
      (1, 'FunctionArgTypes', 'argTypes') ] ],
  [ 'OpFamily',                 '',
    [ (0, 'family'),
      (1, 'AnyIdentifier', 'ident') ] ],
  [ 'CreateMatViewStmt',        'CreateStatement',
    [ (0, 'create'),
      (0, 'unlogged'),
      (0, 'materialized'),
      (0, 'view'),
      (1, 'CreateMvTarget', 'target'),
      (0, 'as'),
      (1, 'SelectStmt', 'query'),
      (1, 'WithDataClause', 'withDataClause') ] ],
  [ 'CreateMvTarget',           '',
    [ (1, 'TableIdentifier', 'viewIdent'),
      (1, 'RefColumns', 'columns'),
      (1, 'WithReloptions', 'reloptions'),
      (1, 'TableSpaceClause', 'tablespaceClause') ] ],
  [ 'WithReloptions',           '',
    [ (0, 'with'),
      (1, 'RelOptions', 'relOptions') ] ],
  [ 'CreateFunctionStmt',       'CreateStatement',
    [ (0, 'create'),
      (1, 'OrReplaceClause', 'orReplace'),
      (0, 'function'),
      (1, 'FunctionRef', 'functionRef'),
      (1, 'FuncArgsWithDefaults', 'args'),
      (0, 'returns'),
      (1, 'BaseFuncReturn', 'funcReturn'),
      (2, 'CreateFuncOption', 'options'),
      (1, 'ConstraintDefinitions', 'defs') ] ],
  [ 'BaseFuncReturn',           '',                             [] ],
  [ 'FuncTypeFuncReturn',       'BaseFuncReturn',
    [ (1, 'FunctionType', 'functionType') ] ],
  [ 'TableFuncReturn',          'BaseFuncReturn',
    [ (0, 'table'),
      (0, 'lparen'),
      (2, 'TableFuncColumn', 'columns'),
      (0, 'rparen')] ],
  [ 'TableFuncColumn',          '',
    [ (1, 'Name', 'paramName'),
      (1, 'FunctionType', 'functionType') ] ],
  [ 'CreateFuncOption',         '',                             [] ],
  [ 'CreateFuncAsOption',       'CreateFuncOption',
    [ (0, 'as'),
      (1, 'FunctionAsClause', 'asClause') ] ],
  [ 'CreateFuncLangOption',     'CreateFuncOption',
    [ (0, 'language'),
      (0, 'lang_value') ] ],
  [ 'CreateFuncWindowOption',   'CreateFuncOption',
    [ (0, 'window') ] ],
  [ 'CreateFuncCommonOption',   'CreateFuncOption',
    [ (1, 'CommonAlterFunctionOpt', 'commonOpt') ] ],
  [ 'FunctionAsClause',         '',
    [ (0, 'first_value'),
      (0, 'comma'),
      (0, 'second_value') ] ],
  [ 'FuncArgsWithDefaults',     '',
    [ (0, 'lparen'),
      (2, 'FuncArgWithDefault', 'args'),
      (0, 'rparen') ] ],
  [ 'FuncArgWithDefault',       '',
    [ (1, 'FunctionArg', 'arg'),
      (0, 'default_or_equal'),
      (1, 'Expression', 'defExpr') ] ],
  [ 'OrReplaceClause',          '',
    [ (0, 'or'),
      (0, 'replace') ] ],
  [ 'CreateForeignTableStmt',   'CreateStatement',
    [ (0, 'create'),
      (0, 'foreign'),
      (0, 'table'),
      (0, 'if'),
      (0, 'not'),
      (0, 'exists'),
      (1, 'TableIdentifier', 'tableIdent'),
      (0, 'lparen'),
      (2, 'TableElement', 'columns'),
      (0, 'rparen'),
      (0, 'server'),
      (1, 'Name', 'serverName'),
      (1, 'CreateGeneticOptions', 'genericOptions') ] ],
  [ 'TableElement',             '',                             [] ],
  [ 'ColumnDefTableElement',    'TableElement',
    [ (1, 'ColumnDef', 'columnDef') ] ],
  [ 'LikeTableElement',         'TableElement',
    [ (1, 'TableLikeClause', 'tableLikeClause') ] ],
  [ 'TableLikeClause',          '',
    [ (0, 'like'),
      (1, 'TableIdentifier', 'tableIdent'),
      (2, 'TableLikeOption', 'options') ] ],
  [ 'TableLikeOption',          '',
    [ (0, 'sp_kwd') ] ],
  [ 'ConstraintTableElement',   'TableElement',
    [ (1, 'TableConstraint', 'constraint') ] ],
  [ 'CreateForeignServerStmt',  'CreateStatement',
    [ (0, 'create'),
      (0, 'server'),
      (1, 'Name', 'serverName'),
      (1, 'ServerTypeClause', 'serverType'),
      (1, 'ForeignServerVersion', 'serverVersion'),
      (0, 'foreign'),
      (0, 'data'),
      (0, 'wrapper'),
      (1, 'Name', 'wrapperName'),
      (1, 'CreateGeneticOptions', 'genericOptions') ] ],
  [ 'ServerTypeClause',         '',
    [ (0, 'type'),
      (0, 'type_value') ] ],
  [ 'CreateFdwStmt',            'CreateStatement',
    [ (0, 'create'),
      (0, 'foreign'),
      (0, 'data'),
      (0, 'wrapper'),
      (1, 'Name', 'wrapperName'),
      (2, 'FdwOption', 'options'),
      (1, 'CreateGeneticOptions', 'genericOptions') ] ],
  [ 'CreateExtensionStmt',      'CreateStatement',
    [ (0, 'create'),
      (0, 'extension'),
      (0, 'if'),
      (0, 'not'),
      (0, 'exists'),
      (1, 'Name', 'extensionName'),
      (0, 'with'),
      (2, 'CreateExtOption', 'options') ] ],
  [ 'CreateExtOption',          '',                             [] ],
  [ 'CreateExtSchemaOption',    'CreateExtOption',
    [ (0, 'schema'),
      (1, 'Name', 'schemaName') ] ],
  [ 'CreateExtVerFromOption',   'CreateExtOption',
    [ (0, 'version_or_from'),
      (0, 'sp_value') ] ],
  [ 'CreateConversionStmt',     'CreateStatement',
    [ (0, 'create'),
      (0, 'default'),
      (0, 'conversion'),
      (1, 'AnyIdentifier', 'ident'),
      (0, 'for'),
      (0, 'for_value'),
      (0, 'to'),
      (0, 'to_value'),
      (0, 'from'),
      (1, 'AnyIdentifier', 'fromIdent') ] ],
  [ 'CreateCastStmt',           'CreateStatement',
    [ (0, 'create'),
      (0, 'cast'),
      (0, 'lparen'),
      (1, 'Type', 'fromType'),
      (0, 'as'),
      (1, 'Type', 'toType'),
      (0, 'rparen'),
      (0, 'with_or_without'),
      (0, 'function_or_inout'),
      (1, 'FunctionWithArgTypes', 'functionWithArgTypes'),
      (1, 'CastContext', 'context') ] ],
  [ 'CastContext',              '',
    [ (0, 'as'),
      (0, 'implicit_or_assignment') ] ],
  [ 'DropCastStmt',             'DdlStatement',
    [ (0, 'drop'),
      (0, 'cast'),
      (1, 'IfExists', 'ifExists'),
      (0, 'lparen'),
      (1, 'Type', 'fromType'),
      (0, 'as'),
      (1, 'Type', 'toType'),
      (0, 'rparen'),
      (0, 'behavior') ] ],
  [ 'IfExists',                 '',
    [ (0, 'if'),
      (0, 'exists') ] ],
  [ 'DropAssertStmt',           'DdlStatement',
    [ (0, 'drop'),
      (0, 'assertion'),
      (1, 'Name', 'assertName'),
      (0, 'behavior') ] ],
  [ 'CreateAssertStmt',         'CreateStatement',
    [ (0, 'create'),
      (0, 'assertion'),
      (1, 'Name', 'assertName'),
      (0, 'check'),
      (0, 'lparen'),
      (1, 'Expression', 'expr'),
      (0, 'rparen'),
      (2, 'ConstraintAttribute', 'constrAttrs') ] ],
  [ 'CreateTableAsStmt',        'CreateStatement',
    [ (0, 'create'),
      (1, 'TempClause', 'tempClause'),
      (0, 'table'),
      (1, 'CreateAsTarget', 'createTarget'),
      (0, 'as'),
      (1, 'SelectStmt', 'query'),
      (1, 'WithDataClause', 'withDataClause') ] ],
  [ 'CreateAsTarget',           '',
    [ (1, 'TableIdentifier', 'tableIdent'),
      (1, 'RefColumns', 'columns'),
      (1, 'CreateWithOptions', 'createOpts'),
      (1, 'OnCommitOption', 'onCommitOption'),
      (1, 'TableSpaceClause', 'tablespceOpt') ] ],
  [ 'TableSpaceClause',         '',
    [ (0, 'tablespace'),
      (1, 'Name', 'tablespaceName') ] ],
  [ 'OnCommitOption',           '',
    [ (0, 'on'),
      (0, 'commit'),
      (0, 'sp_act'),
      (0, 'rows') ] ],
  [ 'CreateWithOptions',        '',                             [] ],
  [ 'CreateWithRelOptions',     'CreateWithOptions',
    [ (0, 'with'),
      (1, 'RelOptions', 'opts') ] ],
  [ 'CreateWithOidsOptions',    'CreateWithOptions',
    [ (0, 'with_or_without'),
      (0, 'oids') ] ],
  [ 'WithDataClause',           '',
    [ (0, 'with'),
      (0, 'no'),
      (0, 'data') ] ],
  [ 'CopyStmt',                 'Statement',                    [] ],
  [ 'TableCopyStmt',            'CopyStmt',
    [ (0, 'copy'),
      (0, 'binary'),
      (1, 'TableIdentifier', 'tableIdent'),
      (1, 'RefColumns', 'columns'),
      (1, 'WithOidsClause', 'oids'),
      (0, 'from_or_to'),
      (0, 'program'),
      (0, 'file_name'),
      (1, 'CopyDelimiter', 'delimiter'),
      (0, 'with'),
      (1, 'CopyOptions', 'options') ] ],
  [ 'WithOidsClause',           '',
    [ (0, 'with'),
      (0, 'oids') ] ],
  [ 'CopyDelimiter',            '',
    [ (0, 'using'),
      (0, 'delimiters'),
      (0, 'delim_value') ] ],
  [ 'SelectCopyStmt',           'CopyStmt',
    [ (0, 'copy'),
      (1, 'SelectWithParens', 'query'),
      (0, 'to'),
      (0, 'program'),
      (0, 'copy_file_name'),
      (0, 'with'),
      (1, 'CopyOptions', 'options') ] ],
  [ 'CopyOptions',              '',                             [] ],
  [ 'NewCopyOptions',           'CopyOptions',
    [ (0, 'lparen'),
      (2, 'GenericCopyOption', 'opts'),
      (0, 'rparen') ] ],
  [ 'GenericCopyOption',        '',
    [ (0, 'label'),
      (1, 'GenericCopyOptionArg', 'arg') ] ],
  [ 'GenericCopyOptionArg',     '',                             [] ],
  [ 'GenericCopyOptionValArg',  'GenericCopyOptionArg',
    [ (0, 'star_or_value') ] ],
  [ 'GenericCopyOptionCmpArg',  'GenericCopyOptionArg',
    [ (0, 'lparen'),
      (2, 'GenericCopyOptionCmpArgItem', 'items'),
      (0, 'rparen') ] ],
  [ 'GenericCopyOptionCmpArgItem',  '',
    [ (0, 'bool_or_str_value') ] ],
  [ 'OldCopyOptions',           'CopyOptions',
    [ (2, 'CopyOption', 'opts') ] ],
  [ 'CopyOption',               '',
    [ (0, 'sp1'),
      (0, 'sp2'),
      (0, 'sp3'),
      (2, 'Name', 'columns') ] ],
  [ 'ConstraintsSetStmt',       'DdlStatement',
    [ (0, 'set'),
      (0, 'constraints'),
      (1, 'ConstraintsSetList', 'constrList'),
      (0, 'set_mode') ] ],
  [ 'ConstraintsSetList',       '',                             [] ],
  [ 'AllConstraintsSetList',    'ConstraintsSetList',
    [ (0, 'all') ] ],
  [ 'CommonConstraintsSetList', 'ConstraintsSetList',
    [ (2, 'ConstraintIdentifier', 'idents') ] ],
  [ 'CommentStmt',              'Statement',                    [] ],
  [ 'LangCommentStmt',          'CommentStmt' ,
    [ (0, 'comment'),
      (0, 'on'),
      (0, 'procedural'),
      (0, 'language'),
      (1, 'AnyIdentifier', 'langIdent'),
      (1, 'CommentTextClause', 'commentText') ] ],
  [ 'CastCommentStmt',          'CommentStmt',
    [ (0, 'comment'),
      (0, 'on'),
      (0, 'cast'),
      (0, 'lparen'),
      (1, 'Type', 'fromType'),
      (0, 'as'),
      (1, 'Type', 'toType'),
      (0, 'rparen'),
      (1, 'CommentTextClause', 'commentText') ] ],
  [ 'LargeObjCommentStmt',      'CommentStmt',
    [ (0, 'comment'),
      (0, 'on'),
      (0, 'large'),
      (0, 'oject'),
      (0, 'any_digit'),
      (1, 'CommentTextClause', 'commentText') ] ],
  [ 'OpUsingCommentStmt',       'CommentStmt',
    [ (0, 'comment'),
      (0, 'on'),
      (0, 'operator'),
      (0, 'class_or_family'),
      (1, 'AnyIdentifier', 'opIdent'),
      (0, 'using'),
      (0, 'acc_method'),
      (1, 'CommentTextClause', 'commentText') ] ],
  [ 'ConstraintCommentStmt',    'CommentStmt',
    [ (0, 'comment'),
      (0, 'on'),
      (0, 'constraint'),
      (1, 'Name', 'constraintName'),
      (1, 'CommentOnName', 'onName'),
      (1, 'CommentTextClause', 'commentText') ] ],
  [ 'RuleCommentStmt',          'CommentStmt',
    [ (0, 'comment'),
      (0, 'on'),
      (0, 'rule'),
      (1, 'Name', 'ruleName'),
      (1, 'CommentOnName', 'onName'),
      (1, 'CommentTextClause', 'commentText') ] ],
  [ 'TriggerCommentStmt',       'CommentStmt',
    [ (0, 'comment'),
      (0, 'on'),
      (0, 'trigger'),
      (1, 'Name', 'triggerName'),
      (1, 'CommentOnName', 'onName'),
      (1, 'CommentTextClause', 'commentText') ] ],
  [ 'CommentOnName',            '',
    [ (0, 'on'),
      (1, 'TableIdentifier', 'tableIdent') ] ],
  [ 'OpCommentStmt',            'CommentStmt',
    [ (0, 'comment'),
      (0, 'on'),
      (0, 'operator'),
      (1, 'Operand', 'operand'),
      (1, 'OperArgTypes', 'argTypes'),
      (1, 'CommentTextClause', 'commentText') ] ],
  [ 'FunctionCommentStmt',      'CommentStmt',
    [ (0, 'comment'),
      (0, 'on'),
      (0, 'function'),
      (1, 'FunctionRef', 'funcRef'),
      (1, 'FunctionArgTypes', 'argTypes'),
      (1, 'CommentTextClause', 'commentText') ] ],
  [ 'AggrCommentStmt',          'CommentStmt',
    [ (0, 'comment'),
      (0, 'on'),
      (0, 'aggregate'),
      (1, 'FunctionRef', 'funcRef'),
      (1, 'AggrArguments', 'args'),
      (1, 'CommentTextClause', 'commentText') ] ],
  [ 'CommonCommentStmt',        'CommentStmt',
    [ (0, 'comment'),
      (0, 'on'),
      (1, 'CommentObject', 'obj'),
      (1, 'CommentTextClause', 'commentText') ] ],
  [ 'CommentObject',            '',                             [] ],
  [ 'SearchCommentObject',      'CommentObject',
    [ (0, 'text'),
      (0, 'search'),
      (0, 'sp_what'),
      (1, 'AnyIdentifier', 'ident') ] ],
  [ 'EvtTriggerCommentObject',  'CommentObject',
    [ (0, 'event'),
      (0, 'trigger'),
      (1, 'TriggerIdentifier', 'triggerIdent') ] ],
  [ 'FdwCommentObject',         'CommentObject',
    [ (0, 'foreign'),
      (0, 'data'),
      (0, 'wrapper'),
      (1, 'AnyIdentifier', 'fdwIdent') ] ],
  [ 'RoleCommentObject',        'CommentObject',
    [ (0, 'role'),
      (1, 'RoleId', 'roleId') ] ],
  [ 'TableCommentObject',       'CommentObject',
    [ (0, 'foreign_or_materialized'),
      (0, 'table_or_view'),
      (1, 'TableIdentifier', 'ident') ] ],
  [ 'SequenceCommentObject',    'CommentObject',
    [ (0, 'sequence'),
      (1, 'SequenceIdentifier', 'sequenceIdent') ] ],
  [ 'IndexCommentObject',       'CommentObject',
    [ (0, 'index'),
      (1, 'IndexIdentifier', 'indexIdent') ] ],
  [ 'SchemaCommentObject',      'CommentObject',
    [ (0, 'schema'),
      (1, 'Name', 'schemaName') ] ],
  [ 'ColumnCommentObject',      'CommentObject',
    [ (0, 'columnm'),
      (1, 'ColumnIdentifier', 'columnIdent') ] ],
  [ 'NamedCommentObject',       'CommentObject',
    [ (0, 'sp_object'),
      (1, 'Name', 'objName') ] ],
  [ 'AnyCommentObject',         'CommentObject',
    [ (0, 'sp_object'),
      (1, 'AnyIdentifier', 'ident') ] ],
  [ 'CommentTextClause',        '',
    [ (0, 'is'),
      (0, 'comment_text') ] ],
  [ 'ClusterStmt',              'DdlStatement',                 [] ],
  [ 'ClusterOnStmt',            'ClusterStmt',
    [ (0, 'cluster'),
      (0, 'verbose'),
      (1, 'Name', 'indexName'),
      (0, 'on'),
      (1, 'TableIdentifier', 'tableIdent') ] ],
  [ 'ClusterUsingStmt',         'ClusterStmt',
    [ (0, 'cluster'),
      (0, 'verbose'),
      (1, 'TableIdentifier', 'tableIdent'),
      (1, 'UsingIndexClause', 'usingClause') ] ],
  [ 'UsingIndexClause',         '',
    [ (0, 'using'),
      (1, 'Name', 'indexName') ] ],
  [ 'ClosePortalStmt',          '',                             [] ],
  [ 'CloseCursorStmt',          '',
    [ (0, 'close'),
      (1, 'Name', 'cursorName') ] ],
  [ 'CloseAllStmt',             'ClosePortalStmt',
    [ (0, 'close'),
      (0, 'all') ] ],
  [ 'CheckPointStmt',           'Statement',
    [ (0, 'checkpoint') ] ],
  [ 'AnalyzeStmt',              'Statement',
    [ (0, 'analize'),
      (0, 'verbose'),
      (1, 'TableIdentifier', 'tabeIdent'),
      (1, 'CompoundColumnNames', 'columns') ] ],
  [ 'AlterUserMappingStmt',     'DdlStatement',
    [ (0, 'alter'),
      (0, 'user'),
      (0, 'mapping'),
      (0, 'for'),
      (1, 'AuthIdentifier', 'authIdent'),
      (0, 'server'),
      (1, 'Name', 'serverName'),
      (1, 'AlterTableGenericCmd', 'cmds') ] ],
  [ 'AuthIdentifier',           '',                             [] ],
  [ 'UserAuthIdentifier',       'AuthIdentifier',
    [ (0, 'user_or_current_user') ] ],
  [ 'RoleAuthIdentifier',       'AuthIdentifier',
    [ (1, 'RoleId', 'roleId') ] ],
  [ 'AlterTSConfigurationStmt', 'DdlStatement',
    [ (0, 'alter'),
      (0, 'text'),
      (0, 'search'),
      (0, 'configuration'),
      (1, 'AnyIdentifier', 'confIdent'),
      (1, 'AlterTSConfCmd', 'cmd') ] ],
  [ 'AlterTSConfCmd',           '',                             [] ],
  [ 'AlterTSConfAddAlterCmd',   'AlterTSConfCmd',
    [ (0, 'add_or_alter'),
      (0, 'mapping'),
      (0, 'for'),
      (2, 'Name', 'forNames'),
      (0, 'replace'),
      (1, 'AnyIdentifier', 'replaceIdent'),
      (0, 'with'),
      (2, 'AnyIdentifier', 'withIdents') ] ],
  [ 'AlterTSConfDropCmd',       'AlterTSConfCmd',
    [ (0, 'drop'),
      (0, 'mapping'),
      (0, 'if'),
      (0, 'exists'),
      (0, 'for'),
      (2, 'Name', 'names') ] ],
  [ 'AlterTSDictionaryStmt',    'DdlStatement',
    [ (0, 'alter'),
      (0, 'text'),
      (0, 'search'),
      (0, 'dictionary'),
      (1, 'AnyIdentifier', 'dictIdent'),
      (1, 'Definition', 'definition') ] ],
  [ 'AlterCompositeTypeStmt',   'DdlStatement',
    [ (0, 'alter'),
      (0, 'type'),
      (1, 'AnyIdentifier', 'typeIdent'),
      (2, 'AlterTypeCommand', 'commands') ] ],
  [ 'AlterTypeCommand',         '',                             [] ],
  [ 'AlterTypeAddCommand',      'AlterTypeCommand',
    [ (0, 'add'),
      (0, 'atribute'),
      (1, 'TableFuncElement', 'elem'),
      (0, 'behavior') ] ],
  [ 'AlterTypeDropCommand',     'AlterTypeCommand',
    [ (0, 'drop'),
      (0, 'attribute'),
      (0, 'if'),
      (0, 'exists'),
      (1, 'Name', 'attrName'),
      (0, 'behavior') ] ],
  [ 'AlterTypeAlterCommand',    'AlterTypeCommand',
    [ (0, 'alter'),
      (0, 'attribute'),
      (1, 'Name', 'attrName'),
      (1, 'SetData', 'setData'),
      (0, 'type'),
      (1, 'Type', 'newType'),
      (1, 'CollateClause', 'collate'),
      (0, 'behavior') ] ],
  [ 'AlterSeqStmt',             'DdlStatement',
    [ (0, 'alter'),
      (0, 'sequence'),
      (0, 'if'),
      (0, 'exists'),
      (1, 'SequenceIdentifier', 'seqIdent'),
      (2, 'SequenceOption', 'options') ] ],
  [ 'CreateSeqStmt',            'CreateStatement',
    [ (0, 'create'),
      (1, 'TempClause', 'tempClause'),
      (0, 'sequence'),
      (1, 'SequenceIdentifier', 'seqIdent'),
      (2, 'SequenceOption', 'options') ] ],
  [ 'SequenceOption',           '',                             [] ],
  [ 'SimpleSequenceOption',     'SequenceOption',
    [ (0, 'sp1'),
      (0, 'sp2'),
      (0, 'sp3') ] ],
  [ 'OwnedSequenceOption',      'SequenceOption',
    [ (0, 'owned'),
      (0, 'by'),
      (1, 'RoleId', 'ownerRole') ] ],
  [ 'TempClause',               '',
    [ (0, 'sp1'),
      (0, 'sp2') ] ],
  [ 'AlterOwnerStmt',           'DdlStatement',                 [] ],
  [ 'AlterEvtTriggerOwnerStmt', 'AlterOwnerStmt',
    [ (0, 'alter'),
      (0, 'event'),
      (0, 'trigger'),
      (1, 'Name', 'triggerName'),
      (1, 'OwnerToClause', 'ownerToClause') ] ],
  [ 'AlterServerOwnerStmt',     'AlterOwnerStmt',
    [ (0, 'alter'),
      (0, 'server'),
      (1, 'Name', 'serverName'),
      (1, 'OwnerToClause', 'ownerToClause') ] ],
  [ 'AlterFdwOwnerStmt',        'AlterOwnerStmt',
    [ (0, 'alter'),
      (0, 'foreign'),
      (0, 'data'),
      (0, 'wrapper'),
      (1, 'Name', 'wrapperName'),
      (1, 'OwnerToClause', 'ownerToClause') ] ],
  [ 'AlterSearchOwnerStmt',     'AlterOwnerStmt',
    [ (0, 'alter'),
      (0, 'text'),
      (0, 'search'),
      (0, 'dict_or_conf'),
      (1, 'AnyIdentifier', 'ident'),
      (1, 'OwnerToClause', 'ownerToClause') ] ],
  [ 'AlterTablespaceOwnerStmt', 'AlterOwnerStmt',
    [ (0, 'alter'),
      (0, 'tablespace'),
      (1, 'Name', 'tablespaceName'),
      (1, 'OwnerToClause', 'ownerToClause') ] ],
  [ 'AlterTypeOwnerStmt',       'AlterOwnerStmt',
    [ (0, 'alter'),
      (0, 'type'),
      (1, 'AnyIdentifier','typeIdent'),
      (1, 'OwnerToClause', 'ownerToClause') ] ],
  [ 'AlterSchemaOwnerStmt',     'AlterOwnerStmt',
    [ (0, 'alter'),
      (0, 'schema'),
      (1, 'Name', 'schemaName'),
      (1, 'OwnerToClause', 'ownerToClause') ] ],
  [ 'AlterOpUsingOwnerStmt',    'AlterOwnerStmt',
    [ (0, 'alter'),
      (0, 'operator'),
      (0, 'class_or_family'),
      (1, 'AnyIdentifier', 'ident'),
      (0, 'using'),
      (0, 'acc_method'),
      (1, 'OwnerToClause', 'ownerToClause') ] ],
  [ 'AlterOpOwnerStmt',         'AlterOwnerStmt',
    [ (0, 'alter'),
      (0, 'operator'),
      (1, 'Operand', 'operand'),
      (1, 'OperArgTypes', 'argTypes'),
      (1, 'OwnerToClause', 'ownerToClause') ] ],
  [ 'AlterLargeObjOwnerStmt',   'AlterOwnerStmt',
    [ (0, 'alter'),
      (0, 'large'),
      (0, 'object'),
      (0, 'value'),
      (1, 'OwnerToClause', 'ownerToClause') ] ],
  [ 'AlterLangOwnerStmt',       'AlterOwnerStmt' ,
    [ (0, 'alter'),
      (0, 'procedural'),
      (0, 'language'),
      (1, 'Name', 'langName'),
      (1, 'OwnerToClause', 'ownerToClause') ] ],
  [ 'AlterFunctionOwnerStmt',   'AlterOwnerStmt',
    [ (0, 'alter'),
      (0, 'function'),
      (1, 'FunctionWithArgTypes', 'funcWithArgTypes'),
      (1, 'OwnerToClause', 'ownerToClause') ] ],
  [ 'AlterDbOwnerStmt',         'AlterOwnerStmt',
    [ (0, 'alter'),
      (0, 'database'),
      (1, 'DatabaseName', 'dbName'),
      (1, 'OwnerToClause', 'ownerToClause') ] ],
  [ 'AlterCollationOwnerStmt',  'AlterOwnerStmt',
    [ (0, 'alter'),
      (0, 'collation'),
      (1, 'AnyIdentifier', 'ident'),
      (1, 'OwnerToClause', 'ownerToClause') ] ],
  [ 'AlterConvOwnerStmt',   'AlterOwnerStmt',
    [ (0, 'alter'),
      (0, 'conversion'),
      (1, 'AnyIdentifier', 'ident'),
      (1, 'OwnerToClause', 'ownerToClause') ] ],
  [ 'AlterDomainOwnerStmt', 'AlterOwnerStmt',
    [ (0, 'alter'),
      (0, 'domain'),
      (1, 'AnyIdentifier', 'ident'),
      (1, 'OwnerToClause', 'ownerToClause') ] ],
  [ 'AlterAggrOwnerStmt',       'AlterOwnerStmt',
    [ (0, 'alter'),
      (0, 'aggregate'),
      (1, 'FunctionRef', 'funcRef'),
      (1, 'AggrArguments', 'args'),
      (1, 'OwnerToClause', 'ownerToClause') ] ],
  [ 'OwnerToClause',            '',
    [ (0, 'owner'),
      (0, 'to'),
      (1, 'RoleId', 'roleId') ] ],
  [ 'AlterObjectSchemaStmt',    'DdlStatement',                 [] ],
  [ 'AlterTypeSchemaStmt',      'AlterObjectSchemaStmt',
    [ (0, 'alter'),
      (0, 'type'),
      (1, 'AnyIdentifier', 'typeIdent'),
      (1, 'SetSchemaClause', 'setSchemaClause') ] ],
  [ 'AlterViewSchemaStmt',      'AlterObjectSchemaStmt',
    [ (0, 'alter'),
      (0, 'materialized'),
      (0, 'view'),
      (0, 'if'),
      (0, 'exists'),
      (1, 'TableIdentifier','viewIdent'),
      (1, 'SetSchemaClause', 'setSchemaClause') ] ],
  [ 'AlterSeqSchemaStmt',       'AlterObjectSchemaStmt',
    [ (0, 'alter'),
      (0, 'sequence'),
      (0, 'if'),
      (0, 'exists'),
      (1, 'SequenceIdentifier', 'sequenceIdent'),
      (1, 'SetSchemaClause', 'setSchemaClause') ] ],
  [ 'AlterSearchSchemaStmt',    'AlterObjectSchemaStmt',
    [ (0, 'alter'),
      (0, 'text'),
      (0, 'search'),
      (0, 'sp_what'),
      (1, 'AnyIdentifier', 'ident'),
      (1, 'SetSchemaClause', 'setSchemaClause') ] ],
  [ 'AlterTableSchemaStmt',     'AlterObjectSchemaStmt',
    [ (0, 'alter'),
      (0, 'foreign'),
      (0, 'table'),
      (0, 'if'),
      (0, 'exists'),
      (1, 'RelationExpr', 'rel'),
      (1, 'SetSchemaClause', 'setSchemaClause') ] ],
  [ 'AlterOpUsingSchemaStmt',   'AlterObjectSchemaStmt',
    [ (0, 'alter'),
      (0, 'operator'),
      (0, 'class_orFamily'),
      (1, 'AnyIdentifier', 'opIdent'),
      (0, 'using'),
      (0, 'acc_method'),
      (1, 'SetSchemaClause', 'setSchemaClause') ] ],
  [ 'AlterOpSchemaStmt',        'AlterObjectSchemaStmt',
    [ (0, 'alter'),
      (0, 'operator'),
      (1, 'Operand', 'operand'),
      (1, 'OperArgTypes', 'argTypes'),
      (1, 'SetSchemaClause', 'setSchemaClause') ] ],
  [ 'AlterFunctionSchemaStmt',  'AlterObjectSchemaStmt',
    [ (0, 'alter'),
      (0, 'function'),
      (1, 'FunctionWithArgTypes', 'functionWithArgTypes'),
      (1, 'SetSchemaClause', 'setSchemaClause') ] ],
  [ 'AlterCollationSchemaStmt', 'AlterObjectSchemaStmt',
    [ (0, 'alter'),
      (0, 'collation'),
      (1, 'AnyIdentifier', 'collationIdent'),
      (1, 'SetSchemaClause', 'setSchemaClause') ] ],
  [ 'AlterConvSchemaStmt',      'AlterObjectSchemaStmt',
    [ (0, 'alter'),
      (0, 'convertion'),
      (1, 'AnyIdentifier', 'convertionIdent'),
      (1, 'SetSchemaClause', 'setSchemaClause') ] ],
  [ 'AlterDomainSchemaStmt',    'AlterObjectSchemaStmt',
    [ (0, 'alter'),
      (0, 'domain'),
      (1, 'AnyIdentifier', 'domainIdent'),
      (1, 'SetSchemaClause', 'setSchemaClause') ] ],
  [ 'AlterExtSchemaStmt',       'AlterObjectSchemaStmt',
    [ (0, 'alter'),
      (0, 'extension'),
      (1, 'AnyIdentifier', 'extensionIdent'),
      (1, 'SetSchemaClause', 'setSchemaClause') ] ],
  [ 'AlterAggrFuncSchemaStmt',  'AlterObjectSchemaStmt',
    [ (0, 'alter'),
      (0, 'aggregate'),
      (1, 'FunctionRef', 'funcRef'),
      (1, 'AggrArguments', 'args'),
      (1, 'SetSchemaClause', 'setSchemaClause') ] ],
  [ 'SetSchemaClause',          '',
    [ (0, 'set'),
      (0, 'schema'),
      (1, 'Name', 'schemaName') ] ],
  [ 'AlterFunctionStmt',        'DdlStatement',
    [ (0, 'alter'),
      (0, 'function'),
      (1, 'FunctionWithArgTypes', 'functionWithArgTypes'),
      (2, 'AlterFunctionOption', 'alterOptions'),
      (0, 'restrict') ] ],
  [ 'AlterFunctionOption',      '',                             [] ],
  [ 'CommonAlterFunctionOpt',   'AlterFunctionOption',
    [ (0, 'sp1'),
      (0, 'sp2'),
      (0, 'sp3'),
      (0, 'sp4') ] ],
  [ 'RestAlterFunctionOpt',     'AlterFunctionOption',
    [ (1, 'SetResetClause', 'rest') ] ],
  [ 'AlterForeignServerStmt',   'DdlStatement',
    [ (0, 'alter'),
      (0, 'server'),
      (1, 'Name', 'serverName'),
      (1, 'ForeignServerVersion', 'version'),
      (1, 'AlterTableGenericCmd', 'genericCms') ] ],
  [ 'ForeignServerVersion',     '',
    [ (0, 'version'),
      (0, 'value') ] ],
  [ 'AlterFdwStmt',             'DdlStatement',
    [ (0, 'alter'),
      (0, 'foreign'),
      (0, 'data'),
      (0, 'wrapper'),
      (1, 'Name', 'wrapperName'),
      (2, 'FdwOption', 'fdwOptions'),
      (1, 'AlterTableGenericCmd', 'genericCms') ] ],
  [ 'FdwOption',                '',                             [] ],
  [ 'SetFdwOption',             'FdwOption',
    [ (0, 'handler_or_validator'),
      (1, 'HandlerIdentifier', 'handlerIdent') ] ],
  [ 'ResetFdwOption',           'FdwOption',
    [ (0, 'no'),
      (0, 'handler_or_validator') ] ],
  [ 'HandlerIdentifier',        '',
    [ (1, 'Name', 'firstName'),
      (2, 'Name', 'attrs') ] ],
  [ 'AlterExtensionCtxStmt',    'DdlStatement',
    [ (0, 'alter'),
      (0, 'extension'),
      (1, 'Name', 'extName'),
      (0, 'add_or_drop'),
      (1, 'ExtensionCtxCmd', 'cmd') ] ],
  [ 'ExtensionCtxCmd',          '',                             [] ],
  [ 'OpExtensionCtxCmd',        'ExtensionCtxCmd',
    [ (0, 'operator'),
      (1, 'Operand', 'operand'),
      (1, 'OperArgTypes', 'opArgTypes') ] ],
  [ 'OperArgTypes',             '',
    [ (0, 'lparen'),
      (1, 'Type', 'type1'),
      (0, 'comma'),
      (1, 'Type','type2'),
      (0, 'rparen') ] ],
  [ 'LangExtensionCtxCmd',      'ExtensionCtxCmd',
    [ (0, 'procedural'),
      (0, 'language'),
      (1, 'Name', 'langName') ] ],
  [ 'FunctionExtensionCtxCmd',  'ExtensionCtxCmd',
    [ (0, 'function'),
      (1, 'FunctionWithArgTypes', 'funcWithArgTypes') ] ],
  [ 'FunctionWithArgTypes',     '',
    [ (1, 'FunctionRef', 'functionRef'),
      (1, 'FunctionArgTypes', 'argTypes') ] ],
  [ 'FunctionArgTypes',         '',
    [ (0, 'lparen'),
      (2, 'FunctionArg', 'args'),
      (0, 'rparen') ] ],
  [ 'FunctionArg',              '',
    [ (0, 'pre_class'),
      (1, 'Name', 'paramName'),
      (0, 'ps_class'),
      (1, 'FunctionType', 'funcType') ] ],
  [ 'SimpleExtensionCtxCmd',    'ExtensionCtxCmd',
    [ (0, 'sp_what'),
      (1, 'AnyIdentifier', 'ident') ] ],
  [ 'CastExtensionCtxCmd',      'ExtensionCtxCmd',
    [ (0, 'cast'),
      (0, 'lparen'),
      (1, 'Type', 'fromType'),
      (0, 'as'),
      (1, 'Type', 'toType'),
      (0, 'rparen') ] ],
  [ 'AggrExtensionCtxCmd',      'ExtensionCtxCmd',
    [ (0, 'aggregate'),
      (1, 'FunctionRef', 'functionRef'),
      (1, 'AggrArguments', 'args') ] ],
  [ 'AggrArguments',            '',                             [] ],
  [ 'ListAggrArguments',        'AggrArguments',
    [ (0, 'lparen'),
      (2, 'Type', 'types'),
      (0, 'rpren') ] ],
  [ 'StarAggrArguments',        'AggrArguments',
    [ (0, 'lparen'),
      (0, 'star'),
      (0, 'rparen') ] ],
  [ 'OpUsingExtensionCtxCmd',   'ExtensionCtxCmd',
    [ (0, 'operator'),
      (0, 'class_or_family'),
      (1, 'AnyIdentifier', 'opIdent'),
      (0, 'using'),
      (0, 'acc_method') ] ],
  [ 'SchemaExtensionCtxCmd',    'ExtensionCtxCmd',
    [ (0, 'schema'),
      (1, 'Name', 'schemaName') ] ],
  [ 'TrgEventExtensionCtxCmd',  'ExtensionCtxCmd',
    [ (0, 'event'),
      (0, 'trigger'),
      (1, 'Name', 'triggerName') ] ],
  [ 'TxtSearchExtensionCtxCmd', 'ExtensionCtxCmd',
    [ (0, 'text'),
      (0, 'search'),
      (0, 'sp_what'),
      (1, 'AnyIdentifier', 'spIdent') ] ],
  [ 'SequenceExtensionCtxCmd',  'ExtensionCtxCmd',
    [ (0, 'sequence'),
      (1, 'Name', 'seqName') ] ],
  [ 'TableExtensionCtxCmd',     'ExtensionCtxCmd',
    [ (0, 'foreign'),
      (0, 'table'),
      (1, 'Name', 'tableName') ] ],
  [ 'ViewExtensionCtxCmd',      'ExtensionCtxCmd',
    [ (0, 'materialized'),
      (0, 'view'),
      (1, 'Name', 'viewName') ] ],
  [ 'FdwExtensionCtxCmd',       'ExtensionCtxCmd',
    [ (0, 'foreign'),
      (0, 'data'),
      (0, 'wrapper'),
      (1, 'Name', 'fdwName') ] ],
  [ 'TypeExtensionCtxCmd',      'ExtensionCtxCmd',
    [ (0, 'type'),
      (1, 'AnyIdentifier', 'typeIdent') ] ],
  [ 'ServerExtensionCtxCmd',    'ExtensionCtxCmd',
    [ (0, 'server'),
      (1, 'Name', 'serverName') ] ],
  [ 'AlterExtensionStmt',       'DdlStatement',
    [ (0, 'alter'),
      (0, 'extension'),
      (1, 'Name', 'extName'),
      (0, 'update'),
      (2, 'UpdateExtensionCmd', 'updates') ] ],
  [ 'UpdateExtensionCmd',       '',                             [] ],
  [ 'UpdateToExtensionCmd',     'UpdateExtensionCmd',
    [ (0, 'to'),
      (0, 'value') ] ],
  [ 'AlterEnumStmt',            'DdlStatement',
    [ (0, 'alter'),
      (0, 'type'),
      (1, 'AnyIdentifier', 'enumIdent'),
      (0, 'add'),
      (0, 'value'),
      (1, 'IfNotExists', 'ifNotExists'),
      (0, 'add_value'),
      (0, 'before_or_after'),
      (0, 'place_value') ] ],
  [ 'IfNotExists',              '',
    [ (0, 'if'),
      (0, 'not'),
      (0, 'exists') ] ],
  [ 'AlterDomainStmt',          'DdlStatement',                 [] ],
  [ 'AlterDomainAltDefStmt',    'AlterDomainStmt',
    [ (0, 'alter'),
      (0, 'domain'),
      (1, 'AnyIdentifier', 'domainIdent'),
      (1, 'AlterDefaultColumn', 'alterCmd') ] ],
  [ 'AlterDomainAddConstrStmt', 'AlterDomainStmt',
    [ (0, 'alter'),
      (0, 'domain'),
      (1, 'AnyIdentifier', 'domainIdent'),
      (0, 'add'),
      (1, 'TableConstraint', 'constraint') ] ],
  [ 'AlterDomainDropConstrStmt','AlterDomainStmt',
    [ (0, 'alter'),
      (0, 'domain'),
      (1, 'AnyIdentifier', 'domainIdent'),
      (0, 'drop'),
      (0, 'constraint'),
      (0, 'if'),
      (0, 'exists'),
      (1, 'Name', 'constraintName'),
      (0, 'behavior') ] ],
  [ 'AlterDomainValConstrStmt', 'AlterDomainStmt',
    [ (0, 'alter'),
      (0, 'domain'),
      (1, 'AnyIdentifier', 'domainIdent'),
      (0, 'validate'),
      (0, 'constraint'),
      (1, 'Name', 'constraintName') ] ],
  [ 'AlterDomainChgNotNullStmt','AlterDomainStmt',
    [ (0, 'alter'),
      (0, 'domain'),
      (1, 'AnyIdentifier', 'domainIdent'),
      (0, 'drop_or_set'),
      (0, 'not'),
      (0, 'null') ] ],
  [ 'CreateDomainStmt',         'CreateStatement',
    [ (0, 'create'),
      (0, 'domain'),
      (1, 'AnyIdentifier', 'domainIdent'),
      (0, 'as'),
      (1, 'Type', 'domainType'),
      (2, 'ColumnConstraint', 'constraints') ] ],
  [ 'AlterDefaultPrivilegesStmt','DdlStatement',
    [ (0, 'alter'),
      (0, 'default'),
      (0, 'privileges'),
      (2, 'DefACLOption', 'options'),
      (1, 'DefACLAction', 'action') ] ],
  [ 'DefACLOption',             '',                             [] ],
  [ 'InSchemaDefACLOption',     'DefACLOption',
    [ (0, 'in'),
      (0, 'schema'),
      (2, 'Name', 'schemas') ] ],
  [ 'ForRoleUserDefACLOption',  'DefACLOption',
    [ (0, 'for'),
      (0, 'role_or_user'),
      (2, 'RoleId', 'roles') ] ],
  [ 'DefACLAction',             '',                             [] ],
  [ 'RevokeDefACLAction',       'DefACLAction',
    [ (0, 'revoke'),
      (0, 'grant'),
      (0, 'option'),
      (0, 'for'),
      (1, 'Privileges', 'privs'),
      (0, 'on'),
      (0, 'target'),
      (0, 'from'),
      (2, 'Grantee', 'grantees'),
      (0, 'behavior') ] ],
  [ 'GrantDefACLAction',        'DefACLAction',
    [ (0, 'grant'),
      (1, 'Privileges', 'privs'),
      (0, 'on'),
      (0, 'target'),
      (0, 'to'),
      (2, 'Grantee', 'grantees'),
      (1, 'WithGrantOption', 'wgo') ] ],
  [ 'Privileges',               '',                             [] ],
  [ 'AllPrivileges',            'Privileges',
    [ (0, 'all'),
      (0, 'privileges'),
      (0, 'lparen'),
      (2, 'Name', 'columns'),
      (0, 'rparen') ] ],
  [ 'PrivilegesAsList',         'Privileges',
    [ (2, 'CommonPrivilege', 'privs') ] ],
  [ 'CommonPrivilege',          '',
    [ (0, 'priv_entity'),
      (1, 'RefColumns', 'refColumns') ] ],
  [ 'Grantee',                  '',
    [ (0, 'group'),
      (1, 'RoleId', 'role') ] ],
  [ 'WithGrantOption',          '',
    [ (0, 'with'),
      (0, 'grant'),
      (0, 'option') ] ],
  [ 'AlterDatabaseStmt',        'DdlStatement',                 [] ],
  [ 'AlterDatabaseSetStmt',     'DdlStatement',
    [ (0, 'alter'),
      (0, 'database'),
      (1, 'Name', 'databaseName'),
      (1, 'SetResetClause', 'setResetClause') ] ],
  [ 'AlterDatabaseChgOptStmt',  'AlterDatabaseStmt',
    [ (0, 'alter'),
      (0, 'database'),
      (1, 'Name', 'databaseName'),
      (0, 'with'),
      (2, 'AlterDbOption', 'options') ] ],
  [ 'AlterDbOption',            '',                             [] ],
  [ 'AlterDbConnLimitOption',   'AlterDbOption',
    [ (0, 'connection'),
      (0, 'limit'),
      (0, 'eqaul'),
      (0, 'value') ] ],
  [ 'AlterDatabaseSetTblspStmt','AlterDatabaseStmt',
    [ (0, 'alter'),
      (0, 'database'),
      (1, 'Name', 'databaseName'),
      (0, 'set'),
      (0, 'tablespace'),
      (1, 'Name', 'tablespaceName') ] ],
  [ 'CreateEventTrigStmt',      'CreateStatement',
    [ (0, 'create'),
      (0, 'event'),
      (0, 'trigger'),
      (1, 'Name', 'triggerName'),
      (0, 'on'),
      (1, 'Name', 'label'),
      (0, 'when'),
      (2, 'EventTriggerWhen', 'whens'),
      (0, 'execute'),
      (0, 'procedure'),
      (1, 'FunctionRef', 'funcRef'),
      (0, 'lparen'),
      (0, 'rparen') ] ],
  [ 'EventTriggerWhen',         '',
    [ (1, 'Name', 'colName'),
      (0, 'in'),
      (0, 'lparen'),
      (2, 'EventTriggerValue', 'values'),
      (0, 'rparen')] ],
  [ 'EventTriggerValue',        '',
    [ (0, 'value') ] ],
  [ 'AlterEventTrigStmt',       'DdlStatement',
    [ (0, 'alter'),
      (0, 'event'),
      (0, 'trigger'),
      (1, 'Name', 'triggerName'),
      (1, 'EventTriggerCmd', 'eventCmd') ] ],
  [ 'EventTriggerCmd',          '',
    [ (0, 'enable_or_disable'),
      (0, 'always_or_replica') ] ],
  [ 'CreateRoleStmt',           'CreateStatement',
    [ (0, 'create'),
      (0, 'role'),
      (1, 'RoleId', 'roleIdent'),
      (0, 'with'),
      (2, 'OptRole', 'options') ] ],
  [ 'AlterRoleStmt',            'DdlStatement',
    [ (0, 'alter'),
      (0, 'role'),
      (1, 'RoleId', 'roleIdent'),
      (0, 'with'),
      (2, 'OptRole', 'roleOptions') ] ],
  [ 'OptRole',                  '',                           [] ],
  [ 'OptRoleWithRoleList',      'OptRole',
    [ (0, 'spec1'),
      (0, 'spec2'),
      (2, 'RoleId', 'roles') ] ],
  [ 'OptRoleStatic',            'OptRole',
    [ (0, 'spec1'),
      (0, 'spec2'),
      (0, 'spec3') ] ],
  [ 'RoleId',       '',
    [ (1, 'Name', 'roleName') ] ],
  [ 'DatabaseName',             '',
    [ (1, 'Name', 'databaseName') ] ],
  [ 'InDatabaseClause',         '',
    [ (0, 'in'),
      (0, 'database'),
      (1, 'DatabaseName', 'databaseName') ] ],
  [ 'AlterRoleSetStmt',         'DdlStatement',               [] ],
  [ 'AlterAnyRoleSetStmt',      'AlterRoleSetStmt',
    [ (0, 'alter'),
      (0, 'role'),
      (1, 'RoleId', 'roleIdent'),
      (1, 'InDatabaseClause', 'inDbClause'),
      (1, 'SetResetClause', 'setClause') ] ],
  [ 'AlterAllRolesSetStmt',     'AlterRoleSetStmt',
    [ (0, 'alter'),
      (0, 'role'),
      (0, 'all'),
      (1, 'InDatabaseClause', 'inDbClause'),
      (1, 'SetResetClause', 'setClause') ] ],
  [ 'SetResetClause',           '',             [] ],
  [ 'SetResetClauseAsSet',      'SetResetClause',
    [ (0, 'set'),
      (1, 'SetRest', 'rest') ] ],
  [ 'SetResetClauseAsVarReset', 'SetResetClause',
    [ (1, 'VariableResetStmt', 'varReset') ] ],
  [ 'SetRest',                  '',             [] ],
  [ 'SetRestTransaction',       'SetRest',
    [ (0, 'session'),
      (0, 'characterictics'),
      (0, 'as'),
      (0, 'transaction'),
      (2, 'TransactionMode', 'modes') ] ],
  [ 'SetRestVarNameTo',         'SetRest',
    [ (2, 'Name', 'dotted_name'),
      (0, 'to_or_equal_or_from'),
      (0, 'default_or_equal') ] ],
  [ 'SetRestVarNameToValues',   'SetRest',
    [ (2, 'Name', 'dotted_name'),
      (0, 'to_or_equal_or_from'),
      (2, 'VarValue', 'values') ] ],
  [ 'SetRestZoneValue',         'SetRest',
    [ (0, 'time'),
      (0, 'zone'),
      (1, 'ZoneValue', 'zoneValue') ] ],
  [ 'SetRestCatalog',           'SetRest',
    [ (0, 'catalog'),
      (0, 'catalog_name') ] ],
  [ 'SetRestSchema',           'SetRest',
    [ (0, 'schema'),
      (0, 'schema_name') ] ],
  [ 'SetRestEncoding',          'SetRest',
    [ (0, 'names'),
      (0, 'encoding') ] ],
  [ 'SetRestRole',              'SetRest',
    [ (0, 'role'),
      (0, 'role_value') ] ],
  [ 'SetRestSessionAuth',       'SetRest',
    [ (0, 'session'),
      (0, 'authorixation'),
      (0, 'authValue') ] ],
  [ 'SetRestXmlOption',         'SetRest',
    [ (0, 'xml'),
      (0, 'option'),
      (0, 'value') ] ],
  [ 'SetRestTransactioSnapshot','SetRest',
    [ (0, 'transaction'),
      (0, 'snapshot'),
      (0, 'value') ] ],
  [ 'VariableShowStmt',         'Statement',                [] ],
  [ 'VarShowStmt',              'VariableShowStmt',
    [ (0, 'show'),
      (2, 'Name', 'varName')] ],
  [ 'TimeZoneShowStmt',         'VariableShowStmt',
    [ (0, 'show'),
      (0, 'time'),
      (0, 'zone') ] ],
  [ 'IsoLevelShowStmt',         'VariableShowStmt',
    [ (0, 'show'),
      (0, 'transaction'),
      (0, 'isolation'),
      (0, 'level') ] ],
  [ 'SessionAuthShowStmt',      'VariableShowStmt',
    [ (0, 'show'),
      (0, 'session'),
      (0, 'authorization') ] ],
  [ 'AllShowStmt',              'VariableShowStmt',
    [ (0, 'show'),
      (0, 'all') ] ],
  [ 'VariableSetStmt',          'Statement',
    [ (0, 'set'),
      (0, 'local_or_session'),
      (1, 'SetRest', 'sets') ] ],
  [ 'VariableResetStmt',        'Statement',                []  ],
  [ 'SetRestResetVarName',      'VariableResetStmt',
    [ (0, 'reset'),
      (2, 'Name', 'dotted_name') ] ],
  [ 'SetRestResetTimeZone',     'VariableResetStmt',
    [ (0, 'reset'),
      (0, 'time'),
      (0, 'zone') ] ],
  [ 'SetRestResetTransLevel',   'VariableResetStmt',
    [ (0, 'reset'),
      (0, 'transaction'),
      (0, 'isolation'),
      (0, 'level') ] ],
  [ 'SetRestResetAuthorization','VariableResetStmt',
    [ (0, 'reset'),
      (0, 'session'),
      (0, 'authorization') ] ],
  [ 'SetRestResetAll',          'VariableResetStmt',
    [ (0, 'all') ] ],
  [ 'IsoLevel',                 '',
    [ (0, 'spec1'),
      (0, 'spec2') ] ],
  [ 'TransactionMode',          '',             [] ],
  [ 'TransactionModeIsoLevel',  'TransactionMode',
    [ (0, 'isolation'),
      (0, 'level'),
      (1, 'IsoLevel', 'level') ] ],
  [ 'TransactionModeReadWrite', 'TransactionMode',
    [ (0, 'read'),
      (0, 'only_or_write') ] ],
  [ 'TransactionModeDefer',     'TransactionMode',
    [ (0, 'not'),
      (0, 'deferrable') ] ],
  [ 'IntervalSecond',           '',
    [ (0, 'second'),
      (0, 'lparen'),
      (0, 'value'),
      (0, 'rparen') ] ],
  [ 'Interval',                 '',             [] ],
  [ 'IntervalSimple',           'Interval',
    [ (0, 'period') ] ],
  [ 'IntervalSimpleTo',         'Interval',
    [ (0, 'period'),
      (0, 'to'),
      (0, 'period_to') ] ],
  [ 'IntervalSimpleToSecond',   'Interval',
    [ (0, 'period'),
      (0, 'to'),
      (1, 'IntervalSecond', 'second') ] ],
  [ 'VarValue',                 '',
    [ (0, 'value' ) ] ],
  [ 'ZoneValue',                '',             [] ],
  [ 'ZoneValueSimple',          'ZoneValue',
    [ (0, 'value') ] ],
  [ 'ZoneValueInterval',        'ZoneValue',
    [ (0, 'interval'),
      (0, 'lparen'),
      (0, 'val'),
      (0, 'rparen'),
      (0, 'sval'),
      (1, 'Interval', 'interval') ] ],
  [ 'DropRoleStmt',             'DdlStatement',
    [ (0, 'drop'),
      (0, 'role'),
      (0, 'if'),
      (0, 'exists'),
      (2, 'RoleId', 'roles') ] ],
  [ 'CreateGroupStmt',          'CreateStatement',
    [ (0, 'create'),
      (0, 'group'),
      (1, 'RoleId', 'groupIdent'),
      (0, 'with'),
      (2, 'OptRole', 'options') ] ],
  [ 'AlterGroupStmt',           'DdlStatement',
    [ (0, 'alter'),
      (0, 'group'),
      (1, 'RoleId', 'groupIdent'),
      (0, 'add_or_drop'),
      (0, 'user'),
      (2, 'RoleId', 'roles') ] ],
  [ 'DiscardStmt',              'DdlStatement',
    [ (0, 'discard'),
      (0, 'all_or_tem_or_plans') ] ],
  [ 'DropStatement',            'DdlStatement', [] ],
  [ 'TruncateStatement',        'DdlStatement', [] ],
  [ 'AlterStmt',                'DdlStatement', [] ],
  [ 'AlterIndexStmt',           'AlterStmt',
    [ (0, 'alter'),
      (0, 'index'),
      (0, 'if'),
      (0, 'exists'),
      (1, 'IndexIdentifier', 'indexIdent'),
      (2, 'AlterTableCmd', 'alterCommands') ] ],
  [ 'AlterSequenceStmt',        'AlterStmt',
    [ (0, 'alter'),
      (0, 'sequence'),
      (0, 'if'),
      (0, 'exists'),
      (1, 'SequenceIdentifier', 'indexIdent'),
      (2, 'AlterTableCmd', 'alterCommands') ] ],
  [ 'AlterTableStmt',           'AlterStmt',
    [ (0, 'alter'),
      (0, 'table'),
      (0, 'if'),
      (0, 'exists'),
      (1, 'RelationExpr', 'relation'),
      (2, 'AlterTableCmd', 'alterCommands') ] ],
  [ 'AlterForeignTableStmt',    'AlterStmt',
    [ (0, 'alter'),
      (0, 'foreign'),
      (0, 'table'),
      (0, 'if'),
      (0, 'exists'),
      (1, 'RelationExpr', 'relation'),
      (2, 'AlterTableCmd', 'alterCommands') ] ],
  [ 'AlterViewStmt',            'AlterStmt',
    [ (0, 'alter'),
      (0, 'materialized'),
      (0, 'view'),
      (0, 'if'),
      (0, 'exists'),
      (1, 'TableIdentifier', 'tableIdent'),
      (2, 'AlterTableCmd', 'alterCommands') ] ],
  [ 'UpdateStmt',               'DmlStatement',
    [ (1, 'WithClause', 'withClause'),
      (0, 'update'),
      (1, 'RelationAliasExpr', 'relalias'),
      (0, 'set'),
      (2, 'SetClause', 'sets'),
      (1, 'FromClause', 'fromClause'),
      (1, 'WhereOrCurrentClause', 'whereClause'),
      (1, 'ReturningClause', 'retClause') ] ],
  [ 'SetClause',                '',             [] ],
  [ 'SingleSetClause',          'SetClause',
    [ (1, 'ColumnRef', 'columnRef'),
      (0, 'equal'),
      (1, 'ColumnExpression', 'value') ] ],
  [ 'MultipleSetClause',        'SetClause',
    [ (0, 'lparen'),
      (2, 'ColumnRef', 'columns'),
      (0, 'rparen'),
      (0, 'equal'),
      (1, 'ColumnExprRow', 'values') ] ],
  [ 'InsertStmt',               'DmlStatement',
    [ (1, 'WithClause', 'withClause'),
      (0, 'insert'),
      (0, 'into'),
      (1, 'TableIdentifier', 'tableIdent'),
      (1, 'InsertRest', 'rest'),
      (1, 'ReturningClause', 'retClause') ] ],
  [ 'InsertRest',               '',             [] ],
  [ 'CommonInsertRest',         'InsertRest',
    [ (0, 'lparen'),
      (2, 'ColumnRef', 'columns'),
      (0, 'rparen'),
      (1, 'SelectStmt', 'content') ] ],
  [ 'DefaultValuesInsertRest',  'InsertRest',
    [ (0, 'default'),
      (0, 'values') ] ],
  [ 'DeleteStmt',               'DmlStatement',
    [ (1, 'WithClause', 'withClause'),
      (0, 'delete'),
      (0, 'from'),
      (1, 'RelationAliasExpr', 'relalias'),
      (1, 'DelUsingClause', 'usingClause'),
      (1, 'WhereOrCurrentClause', 'whereClause'),
      (1, 'ReturningClause', 'retClause') ] ],
  [ 'ReturningClause',          '',
    [ (0, 'returning'),
      (2, 'SelectTarget', 'results' ) ] ],
  [ 'WhereOrCurrentClause',     '',             [] ],
  [ 'WhereNoCurrentClause',     'WhereOrCurrentClause',
    [ (0, 'where'),
      (1, 'Expression', 'expr') ] ],
  [ 'CurrenWhereClause',        'WhereOrCurrentClause',
    [ (0, 'where'),
      (0, 'current'),
      (0, 'of'),
      (1, 'Name', 'cursorName') ] ],
  [ 'DelUsingClause',           '',
    [ (0, 'using'),
      (2, 'TableRef', 'refs') ] ],
  [ 'RelationAliasExpr',        '',
    [ (1, 'RelationExpr', 'rel'),
      (0, 'as'),
      (1, 'Name', 'alias') ] ],
  [ 'SelectStmt',               'DmlStatement', [] ],
  [ 'SelectWithParens',         'SelectStmt',
    [ (0, 'lparen'),
      (1, 'SelectStmt', 'statement'),
      (0, 'rparen') ] ],
  [ 'SelectNoParens',           'SelectStmt',
    [ (1, 'WithClause', 'withClause'),
      (1, 'SelectClause', 'query'),
      (1, 'SortClause', 'sortClause'),
      (1, 'LockingLimitClause', 'llClause') ] ],
  [ 'WithClause',               '',
    [ (0, 'with'),
      (0, 'recursive'),
      (2, 'CommonTableExpr', 'withQueries') ] ],
  [ 'CommonTableExpr',          '',
    [ (1, 'Name', 'relName'),
      (1, 'CompoundColumnNames', 'relColumns'),
      (0, 'as'),
      (0, 'lparen'),
      (1, 'DmlStatement', 'statement'),
      (0, 'rparen') ] ],
  [ 'CompoundColumnNames',      '',
    [ (0, 'lparen'),
      (2, 'Name', 'names'),
      (0, 'rparen') ] ],
  [ 'SortClause',               '',
    [ (0, 'sort'),
      (0, 'by'),
      (2, 'OrderExpr', 'sortList') ] ],
  [ 'OrderExpr',                '',             [] ],
  [ 'UsingOrderExpr',           'OrderExpr',
    [ (1, 'Expression', 'expr'),
      (0, 'using'),
      (1, 'QualifiedOperator', 'qualOp'),
      (0, 'nulls_order') ] ],
  [ 'CommonOrderExpr',          'OrderExpr',
    [ (1, 'Expression', 'expr'),
      (0, 'asc_or_desc'),
      (0, 'nulls_order') ] ],
  [ 'LockingLimitClause',       '',             [] ],
  [ 'LockingFirstLimitClause',  'LockingLimitClause',
    [ (1, 'ForLockingClause', 'locking'),
      (1, 'LimitClause', 'limit') ] ],
  [ 'LockingLastLimitClause',   'LockingLimitClause',
    [ (1, 'LimitClause', 'limit'),
      (1, 'ForLockingClause', 'locking') ] ],
  [ 'LimitClause',              '',             [] ],
  [ 'LimitOffsetClause',        'LimitClause',
    [ (1, 'Limit', 'limit'),
      (1, 'Offset', 'offset') ] ],
  [ 'OffsetLimitClause',        'LimitClause',
    [ (1, 'Offset', 'offset'),
      (1, 'Limit', 'limit') ] ],
  [ 'Offset',                   '',
    [ (0, 'offset'),
      (1, 'Expression', 'expr'),
      (0, 'row_or_rows') ] ],
  [ 'Limit',                    '',             [] ],
  [ 'CommonLimit',              'Limit',
    [ (0, 'limit'),
      (1, 'LimitValue', 'value'),
      (0, 'comma'),
      (1, 'Expression', 'offset') ] ],
  [ 'FetchLimit',               'Limit',
    [ (0, 'fetch'),
      (0, 'first_or_next'),
      (1, 'FetchFirstValue', 'first'),
      (0, 'row_or_rows'),
      (0, 'only') ] ],
  [ 'FetchFirstValue',          '',             [] ],
  [ 'ConstFetchFirstValue',     'FetchFirstValue',
    [ (0, 'value') ] ],
  [ 'CompoundFetchFirstValue',  'FetchFirstValue',
    [ (0, 'lparen'),
      (1, 'Expression', 'expr'),
      (0, 'rparen') ] ],
  [ 'LimitValue',               '',             [] ],
  [ 'AllLimitValue',            'LimitValue',
    [ (0, 'all') ] ],
  [ 'ExprLimitValue',           'LimitValue',
    [ (1, 'Expression', 'expr') ] ],
  [ 'ForLockingClause',         '',             [] ],
  [ 'ReadOnlyForLockingClause', 'ForLockingClause',
    [ (0, 'for'),
      (0, 'read'),
      (0, 'only') ] ],
  [ 'CommonForLockingClause',   'ForLockingClause',
    [ (2, 'LockingExpr', 'lockings') ] ],
  [ 'LockingExpr',              '',
    [ (1, 'LockingStrength',    'strentgh'),
      (1, 'LockingRels', 'relations'),
      (0, 'nowait') ] ],
  [ 'LockingStrength',          '',
    [ (0, 'for'),
      (0, 'spec1'),
      (0, 'spec2'),
      (0, 'spec3') ] ],
  [ 'LockingRels',              '',
    [ (0, 'of'),
      (2, 'TableIdentifier', 'lockRels') ] ],
  [ 'SelectClause',             '',             [] ],
  [ 'CompoundSelectClause',     'SelectClause',
    [ (1, 'SelectWithParens', 'queryWithParens') ] ],
  [ 'CoreSimpleSelect',         'SelectClause',
    [ (1, 'SimpleSelect', 'queryCore') ] ],
  [ 'SimpleSelect',             '',             [] ],
  [ 'ValuesSimpleSelect',       'SimpleSelect',
    [ (1, 'ValuesClause',       'values') ] ],
  [ 'TableSimpleSelect',        'SimpleSelect',
    [ (0, 'table'),
      (1, 'RelationExpr', 'relation') ] ],
  [ 'CompositeSimpleSelect',    'SimpleSelect',
    [ (1, 'SelectClause', 'lQuery'),
      (0, 'compose_op'),
      (0, 'compose_spec'),
      (1, 'SelectClause', 'rQuery') ] ],
  [ 'SelectCore',               'SimpleSelect',
    [ (0, 'select'),
      (1, 'DistinctClause', 'distinctSpec'),
      (2, 'SelectTarget', 'targets'),
      (1, 'IntoClause', 'intoClause' ),
      (1, 'FromClause', 'fromClause'),
      (1, 'WhereClause', 'whereClause'),
      (1, 'GroupByClause', 'groupByClause'),
      (1, 'HavingClause', 'havingClause'),
      (1, 'WindowClause', 'windowClause') ] ],
  [ 'WindowClause',             '',
    [ (0, 'window'),
      (2, 'WindowDefinition', 'definitions') ] ],
  [ 'WindowDefinition',         '',
    [ (1, 'Name', 'windowName'),
      (0, 'as'),
      (1, 'WindowSpecification', 'specification') ] ],
  [ 'HavingClause',             '',
    [ (0, 'having'),
      (1, 'Expression', 'expr') ] ],
  [ 'GroupByClause',            '',
    [ (0, 'group'),
      (0, 'by'),
      (2, 'Expression', 'groupings') ] ],
  [ 'WhereClause',              '',
    [ (0, 'where'),
      (1, 'Expression', 'expr') ] ],
  [ 'FromClause',               '',
    [ (0, 'from'),
      (2, 'TableRef', 'refs') ] ],
  [ 'TableRef',                 '',             [] ],
  [ 'JoinedTableRef',           'TableRef',
    [ (0, 'lparen'),
      (1, 'JoinedTable', 'joined'),
      (0, 'rparen')] ],
  [ 'JoinedTable',              '',             [] ],
  [ 'CommonJoinedTable',        'JoinedTable',
    [ (1, 'TableRef', 'lTableRef'),
      (0, 'natural'),
      (1, 'JoinType', 'joinType'),
      (0, 'join'),
      (1, 'TableRef', 'rTableRef'),
      (1, 'JoinCondition', 'joinCondition') ] ],
  [ 'JoinType',                 '',
    [ (0, 'full_or_left_or_right'),
      (0, 'inner_or_outer') ] ],
  [ 'JoinCondition',            '',             [] ],
  [ 'OnJoinCondition',          'JoinCondition',
    [ (0, 'on'),
      (1, 'Expression', 'expr') ] ],
  [ 'UsingJoinCondition',       'JoinCondition',
    [ (0, 'using'),
      (0, 'lparen'),
      (2, 'Name', 'columns'),
      (0, 'rparen') ] ],
  [ 'CrossJoinedTable',         'JoinedTable',
    [ (1, 'TableRef', 'lTableRef'),
      (0, 'cross'),
      (0, 'join'),
      (1, 'TableRef', 'rTableRef') ] ],
  [ 'CompoundJoinedTable',      'JoinedTable',
    [ (0, 'lparen'),
      (1, 'JoinedTable', 'joinedTable'),
      (0, 'rparen') ] ],
  [ 'CompoundTableRef',         'TableRef',
    [ (0, 'lateral'),
      (1, 'SelectWithParens', 'query'),
      (1, 'TableAliasClause', 'tableAlias') ] ],
  [ 'FuncionTableRef',          'TableRef',
    [ (0, 'lateral'),
      (1, 'FunctionExpression', 'func'),
      (1, 'FuncAliasClause', 'alias') ] ],
  [ 'FuncAliasClause',              '',         [] ],
  [ 'FuncFuncAliasClause',          'FuncAliasClause',
    [ (0, 'as'),
      (1, 'Name', 'aliasName'),
      (0, 'lparen'),
      (2, 'TableFuncElement', 'elements'),
      (0, 'rparen') ] ],
  [ 'TableFuncAliasClause', 'FuncAliasClause',
    [ (1, 'TableAliasClause', 'tableAlias') ] ],
  [ 'TableFuncElement',         '',
    [ (1, 'Name', 'columnName'),
      (1, 'Type', 'columnType'),
      (1, 'CollateClause', 'collate') ] ],
  [ 'CollateClause',            '',
    [ (0, 'collate'),
      (1, 'Name', 'collateName') ] ],
  [ 'FunctionExpression',       '',             [] ],
  [ 'XmlserializeFunctionExpr', 'FunctionExpression',
    [ (0, 'xmlserialize'),
      (0, 'lparen'),
      (0, 'document_or_content'),
      (1, 'Expression', 'expr'),
      (0, 'as'),
      (1, 'SimpleTypename', 'type'),
      (0, 'rparen') ] ],
  [ 'XmlrootFunctionExpr',      'FunctionExpression',
    [ (0, 'xmlroot'),
      (0, 'lparen'),
      (1, 'Expression', 'expr'),
      (0, 'comma'),
      (1, 'XmlRootVersion', 'version'),
      (1, 'XmlRootStandalone', 'standalone'),
      (0, 'rparen') ] ],
  [ 'XmlRootVersion',           '',             [] ],
  [ 'ExprXmlRootVersion',       'XmlRootVersion',
    [ (0, 'version'),
      (1, 'Expression', 'expr') ] ],
  [ 'NoValueXmlRootVersion',    'XmlRootVersion',
    [ (0, 'version'),
      (0, 'no'),
      (0, 'value') ] ],
  [ 'XmlRootStandalone',        '',
    [ (0, 'comma'),
      (0, 'standalone'),
      (0, 'yes_or_no'),
      (0, 'value') ] ],
  [ 'XmlpiFunctionExpr',        'FunctionExpression',
    [ (0, 'xmlpi'),
      (0, 'lparen'),
      (0, 'name'),
      (1, 'Name', 'label'),
      (0, 'comma'),
      (1, 'Expression', 'expr'),
      (0, 'rparen') ] ],
  [ 'XmlparseFunctionExpr',     'FunctionExpression' ,
    [ (0, 'xmlparse'),
      (0, 'lparen'),
      (0, 'document_or_content'),
      (1, 'Expression', 'expr'),
      (1, 'XmlWhitespaceOption', 'wsOpt'),
      (0, 'rparen') ] ],
  [ 'XmlWhitespaceOption',      '',
    [ (0, 'preserve_or_strip'),
      (0, 'whitespace') ] ],
  [ 'XmlforestFunctionExpr',    'FunctionExpression',
    [ (0, 'xmlforest'),
      (0, 'lparen'),
      (2, 'XmlAttribute', 'attrs'),
      (0, 'rparen') ] ],
  [ 'XmlexistsFunctionExpr',    'FunctionExpression',
    [ (0, 'xmlexists'),
      (0, 'lparen'),
      (1, 'Expression', 'expr'),
      (1, 'XmlExistsArgument', 'arg'),
      (0, 'rparen') ] ],
  [ 'XmlExistsArgument',        '',
    [ (0, 'passing'),
      (0, 'by1'),
      (0, 'ref1'),
      (1, 'Expression', 'expr'),
      (0, 'by2'),
      (0, 'ref2') ] ],
  [ 'XmlelementFunctionExpr',   'FunctionExpression',
    [ (0, 'xmlelement'),
      (0, 'lparen'),
      (0, 'name'),
      (1, 'Name', 'elementName'),
      (0, 'comma_attr'),
      (1, 'XmlAttributes', 'attributes'),
      (0, 'comma'),
      (2, 'Expression', 'values'),
      (0, 'rparen') ] ],
  [ 'XmlAttributes',             '',
    [ (0, 'xmlattributes'),
      (0, 'lparen'),
      (2, 'XmlAttribute', 'attrs'),
      (0, 'rparen') ] ],
  [ 'XmlAttribute',             '',
    [ (1, 'Expression', 'expr'),
      (0, 'as'),
      (1, 'Name', 'alias') ] ],
  [ 'CoalesceFunctionExpr',     'FunctionExpression',
    [ (0, 'coalesce'),
      (0, 'lparen'),
      (2, 'Expression', 'args'),
      (0, 'rparen') ] ],
  [ 'GreatestFunctionExpr',     'FunctionExpression',
    [ (0, 'coalesce'),
      (0, 'lparen'),
      (2, 'Expression', 'args'),
      (0, 'rparen') ] ],
  [ 'LeastFunctionExpr',        'FunctionExpression',
    [ (0, 'coalesce'),
      (0, 'lparen'),
      (2, 'Expression', 'args'),
      (0, 'rparen') ] ],
  [ 'XmlconcatFunctionExpr',    'FunctionExpression',
    [ (0, 'coalesce'),
      (0, 'lparen'),
      (2, 'Expression', 'args'),
      (0, 'rparen') ] ],
  [ 'NullifFunctionExpr',       'FunctionExpression',
    [ (0, 'nullif'),
      (0, 'lparen'),
      (1, 'Expression', 'expr1'),
      (0, 'comma'),
      (1, 'Expression', 'expr2'),
      (0, 'rparen') ] ],
  [ 'TrimFunctionExpr',         'FunctionExpression',
    [ (0, 'trim'),
      (0, 'lparen'),
      (0, 'trim_spec'),
      (1, 'TrimExpr', 'trimExpr'),
      (0, 'rparen') ] ],
  [ 'TrimExpr',                 '',
    [ (1, 'Expression', 'expr'),
      (0, 'from'),
      (2, 'Expression', 'fromExpressions') ] ],
  [ 'TraetFunctionExpr',        'FunctionExpression',
    [ (0, 'traet'),
      (0, 'lparen'),
      (1, 'Expression', 'expr'),
      (0, 'as'),
      (1, 'Type', 'traetType'),
      (0, 'rparen') ] ],
  [ 'SubstringFunctionExpr',    'FunctionExpression',
    [ (0, 'substring'),
      (0, 'lparen'),
      (1, 'SubstringExpr', 'substringExpr'),
      (0, 'rparen') ] ],
  [ 'SubstringExpr',            '',             [] ],
  [ 'StandardSubstringExpr',    'SubstringExpr',
    [ (1, 'Expression', 'expr'),
      (1, 'SubstringFrom', 'substrFrom'),
      (1, 'SubstringFor', 'substrFor') ] ],
  [ 'ListSubstringExpr',        'SubstringExpr',
    [ (2, 'Expression', 'args') ] ],
  [ 'PositionFunctionExpr',     'FunctionExpression',
    [ (0, 'position'),
      (0, 'lparen'),
      (1, 'PositionExpr', 'positionExpr'),
      (0, 'rparen') ] ],
  [ 'OverlayFunctionExpr',      'FunctionExpression',
    [ (0, 'overlay'),
      (0, 'lparen'),
      (1, 'OverlayExpr', 'overlayExpr'),
      (0, 'rparen') ] ],
  [ 'PositionExpr',             '',
    [ (1, 'Expression', 'expr'),
      (0, 'in'),
      (1, 'Expression', 'inExpr') ] ],
  [ 'OverlayExpr',              '',
    [ (1, 'Expression', 'expr'),
      (1, 'OverlayPlacing', 'placing'),
      (1, 'SubstringFrom', 'substrFrom'),
      (1, 'SubstringFor', 'substrFor') ] ],
  [ 'OverlayPlacing',           '',
    [ (0, 'placing'),
      (1, 'Expression', 'expr') ] ],
  [ 'ExtractFunctionExpr',      'FunctionExpression',
    [ (0, 'extract'),
      (0, 'lparen'),
      (1, 'ExtractExpr', 'extractExpr'),
      (0, 'rparen') ] ],
  [ 'SubstringFrom',            '',
    [ (0, 'from'),
      (1, 'Expression', 'expr') ] ],
  [ 'SubstringFor',             '',
    [ (0, 'for'),
      (1, 'Expression', 'expr') ] ],
  [ 'ExtractExpr',              '',
    [ (0, 'value'),
      (0, 'from'),
      (1, 'Expression', 'expr') ] ],
  [ 'CastFunctionExpr',         'FunctionExpression',
    [ (0, 'cast'),
      (0, 'lparen'),
      (1, 'Expression', 'castExpr'),
      (0, 'as'),
      (1, 'Type', 'castType'),
      (0, 'rparen') ] ],
  [ 'CollationFunctionExpr',    'FunctionExpression',
    [ (0, 'collation'),
      (0, 'for'),
      (0, 'lparen'),
      (1, 'Expression', 'collationExpr'),
      (0, 'rparen') ] ],
  [ 'SimpleFunctionExpr',       'FunctionExpression',
    [ (0, 'builtin_funcname'),
      (0, 'lparen'),
      (0, 'value'),
      (0, 'rparen') ] ],
  [ 'CommonFunctionExpr',       'FunctionExpression',
    [ (1, 'FunctionRef', 'funcName'),
      (0, 'lparen'),
      (0, 'all_or_distinct_or_star'),
      (2, 'FunctionArgExpr', 'arguments'),
      (1, 'SortClause', 'sortClause'),
      (0, 'comma'),
      (0, 'variadic'),
      (1, 'FunctionArgExpr', 'variadicArg'),
      (0, 'rparen'),
      (1, 'OverClause', 'overClause') ] ],
  [ 'FunctionArgExpr',          '',
    [ (1, 'Name', 'paramName'),
      (0, 'assign'),
      (1, 'Expression', 'argExpr') ] ],
  [ 'OverClause',               '',             [] ],
  [ 'SimpleOverClause',         'OverClause',
    [ (0, 'over'),
      (1, 'Name', 'column') ] ],
  [ 'WindowOverClause',         'OverClause',
    [ (0, 'over'),
      (1, 'WindowSpecification', 'windowSpec') ] ],
  [ 'WindowSpecification',      '',
    [ (0, 'lparen'),
      (1, 'Name', 'windowName'),
      (1, 'PartitionClause', 'partitionClause'),
      (1, 'SortClause', 'sortClause'),
      (1, 'FrameClause', 'frameClause'),
      (0, 'rparen') ] ],
  [ 'PartitionClause',          '',
    [ (0, 'partition'),
      (0, 'by'),
      (2, 'Expression', 'params') ] ],
  [ 'FrameClause',              '',
    [ (0, 'range_or_rows'),
      (1, 'FrameExtent', 'extent') ] ],
  [ 'FrameExtent',              '',             [] ],
  [ 'BoundFrameExtent',         'FrameExtent',
    [ (1, 'FrameBound', 'bound') ] ],
  [ 'BetweenFrameExtent',       '',
    [ (0, 'between'),
      (1, 'FrameBound', 'lBound'),
      (0, 'and'),
      (1, 'FrameBound', 'rBound') ] ],
  [ 'FrameBound',               '',             [] ],
  [ 'SimpleFrameBound',         '',
    [ (0, 'unbounded_or_current'),
      (0, 'prec_or_foll_or_row') ] ],
  [ 'ExprFrameBound',           'FrameBound',
    [ (1, 'Expression', 'boundExpr'),
      (0, 'prec_or_foll') ] ],
  [ 'DirectTableRef',           'TableRef',
    [ (1, 'RelationExpr', 'relation'),
      (1, 'TableAliasClause', 'alias') ] ],
  [ 'TableAliasClause',         '',
    [ (0, 'as'),
      (1, 'Name', 'aliasName'),
      (0, 'lparen'),
      (2, 'Name', 'columns'),
      (0, 'rparen') ] ],
  [ 'DistinctClause',           '',             [] ],
  [ 'SimpleDistinctClause',     '',
    [ (0, 'all_or_distinct') ] ],
  [ 'ExprListDistinctClause',   'DistinctClause',
    [ (0, 'distinct'),
      (0, 'on'),
      (0, 'lparen'),
      (2, 'Expression', 'distinctExpressions'),
      (0, 'rparen') ] ],
  [ 'SelectTarget',             '',             [] ],
  [ 'StarSelectTarget',         'SelectTarget',
    [ (0, 'star') ] ],
  [ 'ExprSelectTarget',         'SelectTarget',
    [ (1, 'Expression', 'selTargetExpr'),
      (0, 'as'),
      (1, 'Name', 'columnAlias') ] ],
  [ 'IntoClause',               '',
    [ (0, 'into'),
      (1, 'OptTempTableName', 'tempTable') ] ],
  [ 'OptTempTableName',         '',
    [ (0, 'local_or_global_or_unlogged'),
      (0, 'temp'),
      (0, 'table'),
      (1, 'TableIdentifier', 'intoTableIdent') ] ],
  [ 'ValuesClause',             '',
    [ (0, 'values'),
      (1, 'ColumnExprRow', 'row') ] ],
  [ 'ColumnExprRow',            '',
    [ (0, 'lparen'),
      (2, 'ColumnExpression', 'columns'),
      (0, 'rparen') ] ],
  [ 'ColumnExpression',         '',             [] ],
  [ 'DefaultColumnExpression',  'ColumnExpression',
    [ (0, 'default') ] ],
  [ 'ExprColumnExpression',     'ColumnExpression',
    [ (1, 'Expression', 'expr') ] ],
  [ 'AlterTableCmd',            '',             [] ],
  [ 'AlterTableGenericCmd',     'AlterTableCmd',
    [ (0, 'options'),
      (0, 'lparen'),
      (2, 'AlterGenericOption', 'options'),
      (0, 'rparen') ] ],
  [ 'AlterGenericOption',       '',             [] ],
  [ 'SetAddAlterGenericOption', 'AlterGenericOption',
    [ (0, 'add_or_set'),
      (1, 'GenericOption', 'option') ] ],
  [ 'DropAlterGenericOption',   'AlterGenericOption',
    [ (0, 'drop'),
      (0, 'opt_name') ] ],
  [ 'AlterTableSetReloptCmd',   'AlterTableCmd',
    [ (0, 'set_or_reset'),
      (1, 'RelOptions', 'relOptions') ] ],
  [ 'AlterTableTablespaceCmd',  'AlterTableCmd',
    [ (0, 'set'),
      (0, 'tablespace'),
      (1, 'Name', 'tablespaceName') ] ],
  [ 'AlterTableOwnerCmd',       'AlterTableCmd',
    [ (0, 'owner'),
      (0, 'to'),
      (1, 'RoleId', 'roleId') ] ],
  [ 'AlterTableNotOfCmd',       'AlterTableCmd',
    [ (0, 'not'),
      (0, 'of') ] ],
  [ 'AlterTableOfCmd',          'AlterTableCmd',
    [ (0, 'of'),
      (1, 'AnyIdentifier', 'ident') ] ],
  [ 'AlterTableInheritCmd',     'AlterTableCmd',
    [ (0, 'no'),
      (0, 'inherit'),
      (1, 'TableIdentifier', 'tableIdent') ] ],
  [ 'AlterTableTriggerCmd',     'AlterTableCmd',
    [ (0, 'enable_or_disable'),
      (0, 'always_or_replica'),
      (0, 'trigger'),
      (1, 'Wildcard', 'wildcard') ] ],
  [ 'AlterTableRuleCmd',        'AlterTableCmd',
    [ (0, 'enable_or_disable'),
      (0, 'always_or_replica'),
      (0, 'rule'),
      (1, 'Name', 'ruleName') ] ],
  [ 'Wildcard',                 '',             [] ],
  [ 'NameWildcard',             'Wildcard',
    [ (1, 'Name', 'name') ] ],
  [ 'AllOrUserWildcard',        'Wildcard',
    [ (0, 'all_or_user') ] ],
  [ 'AlterTableClusterOffCmd',  'AlterTableCmd',
    [ (0, 'set'),
      (0, 'without'),
      (0, 'cluster') ] ],
  [ 'AlterTableClusterOnCmd',   'AlterTableCmd',
    [ (0, 'cluster'),
      (0, 'on'),
      (1, 'Name', 'clusterName') ] ],
  [ 'AlterTableSetOidsCmd',     'AlterTableCmd',
    [ (0, 'set'),
      (0, 'with_or_without'),
      (0, 'oids') ] ],
  [ 'AlterTableDropConstrCmd',  'AlterTableCmd',
    [ (0, 'drop'),
      (0, 'constrint'),
      (0, 'if'),
      (0, 'exists'),
      (1, 'Name', 'constrintName'),
      (0, 'behavior') ] ],
  [ 'AlterTableValConstrCmd',   'AlterTableCmd',
    [ (0, 'validate'),
      (0, 'constraint'),
      (1, 'Name', 'constraintName') ] ],
  [ 'AlterTableAddConstrCmd',   'AlterTableCmd',
    [ (0, 'add'),
      (1, 'TableConstraint', 'constraint') ] ],
  [ 'AlterTableSetTypeCmd',     'AlterTableCmd',
    [ (0, 'alter'),
      (0, 'column'),
      (1, 'Name', 'columnName'),
      (1, 'SetData', 'setData'),
      (0, 'type'),
      (1, 'Type', 'columnType'),
      (1, 'CollateClause', 'collate'),
      (1, 'UsingClause', 'usingClause') ] ],
  [ 'SetData',                  '',
    [ (0, 'set'),
      (0, 'data') ] ],
  [ 'UsingClause',              '',
    [ (0, 'using'),
      (1, 'Expression', 'expr') ] ],
  [ 'AlterTableSetStorageCmd',  'AlterTableCmd',
    [ (0, 'alter'),
      (0, 'column'),
      (1, 'Name', 'columnName'),
      (0, 'set'),
      (0, 'storage'),
      (1, 'Name', 'storageName') ] ],
  [ 'AlterTableChgReloptCmd',   'AlterTableCmd',
    [ (0, 'alter'),
      (0, 'column'),
      (1, 'Name', 'columnName'),
      (0, 'set_or_reset'),
      (1, 'RelOptions', 'relOptions') ] ],
  [ 'RelOptions',               '',
    [ (0, 'lparen'),
      (2, 'RelOption', 'options'),
      (0, 'rparen') ] ],
  [ 'RelOption',                '',
    [ (1, 'Name', 'rel1'),
      (0, 'dot'),
      (1, 'Name', 'rel2'),
      (0, 'equal'),
      (1, 'DefinitionArgument', 'arg') ] ],
  [ 'AlterTableSetStatCmd',     'AlterTableCmd',
    [ (0, 'alter'),
      (0, 'column'),
      (1, 'Name', 'columnName'),
      (0, 'set'),
      (0, 'statistics'),
      (0, 'value') ] ],
  [ 'AlterTableChgNotNullCmd',  'AlterTableCmd',
    [ (0, 'alter'),
      (0, 'column'),
      (1, 'Name', 'columnName'),
      (0, 'set_or_drop'),
      (0, 'not'),
      (0, 'null') ] ],
  [ 'AlterTableChgDefColCmd',   'AlterTableCmd',
    [ (0, 'alter'),
      (0, 'column'),
      (1, 'Name', 'columnName'),
      (1, 'AlterDefaultColumn', 'cmd') ] ],
  [ 'AlterDefaultColumn',       '',             [] ],
  [ 'SetAlterDefaultColumn',    'AlterDefaultColumn',
    [ (0, 'set'),
      (0, 'default'),
      (1, 'Expression', 'expr') ] ],
  [ 'DropAlterDefaultColumn',   'AlterDefaultColumn',
    [ (0, 'drop'),
      (0, 'default') ] ],
  [ 'AlterTableDropColCmd',     'AlterTableCmd',
    [ (0, 'drop'),
      (0, 'column'),
      (0, 'if'),
      (0, 'exists'),
      (1, 'Name', 'columnName'),
      (0, 'drop_behavior') ] ],
  [ 'AlterTableAddColCmd',      'AlterTableCmd',
    [ (0, 'add'),
      (0, 'column'),
      (1, 'ColumnDef', 'colDef') ] ],
  [ 'ColumnDef',                '',
    [ (1, 'Name', 'columnName'),
      (1, 'Type', 'columnType'),
      (1, 'CreateGeneticOptions', 'options'),
      (2, 'ColumnConstraint', 'constraints') ] ],
  [ 'Constraint',               '',             [] ],
  [ 'TableConstraint',          'Constraint',
    [ (0, 'constraint'),
      (1, 'Name', 'constraintName'),
      (1, 'TableConstraintBody', 'body') ] ],
  [ 'TableConstraintBody',      '',             [] ],
  [ 'FkTableConstraint',        'TableConstraintBody',
    [ (0, 'foreign'),
      (0, 'key'),
      (0, 'lparen'),
      (2, 'Name', 'columns'),
      (0, 'rparen'),
      (0, 'references'),
      (1, 'TableIdentifier', 'tableIdent'),
      (1, 'RefColumns', 'refColumns'),
      (1, 'KeyMatch', 'match'),
      (1, 'KeyActions', 'actions'),
      (2, 'ConstraintAttribute', 'attrs') ] ],
  [ 'ExcludeTableConstraint',   'TableConstraintBody',
    [ (0, 'exclude'),
      (1, 'AccessMethodClause', 'accessClause'),
      (0, 'lparen'),
      (2, 'ExclusionConstraint', 'items'),
      (0, 'rparen'),
      (1, 'ConstraintDefinitions', 'definitions'),
      (1, 'ConstraintTablespace', 'constrTablespace'),
      (1, 'ExclusionWhereClause', 'whereClause'),
      (2, 'ConstraintAttribute', 'attrs') ] ],
  [ 'AccessMethodClause',       '',
    [ (0, 'using'),
      (1, 'Name', 'methodName') ] ],
  [ 'ExclusionWhereClause',     '',
    [ (0, 'where'),
      (0, 'lparen'),
      (1, 'Expression', 'expr'),
      (0, 'rparen') ] ],
  [ 'ExclusionConstraint',      '',
    [ (1, 'IndexElement', 'indexElement'),
      (0, 'with'),
      (0, 'operator'),
      (0, 'lparen'),
      (1, 'Operand', 'operand'),
      (0, 'rparen') ] ],
  [ 'IndexElement',             '',             [] ],
  [ 'ColIndexElement',          'IndexElement',
    [ (1, 'Name', 'columnName'),
      (1, 'CollateClause', 'collate'),
      (1, 'ClassClause', 'classClause'),
      (0, 'asc_or_desc'),
      (0, 'nulls_order') ] ],
  [ 'FuncExprIndexElement',     'IndexElement',
    [ (1, 'FunctionExpression', 'funcExpr'),
      (1, 'CollateClause', 'collate'),
      (1, 'ClassClause', 'classClause'),
      (0, 'asc_or_desc'),
      (0, 'nulls_order') ] ],
  [ 'ExprIndexElement',         'IndexElement',
    [ (0, 'lparen'),
      (1, 'Expression', 'expr'),
      (0, 'rparen'),
      (1, 'CollateClause', 'collate'),
      (1, 'ClassClause', 'classClause'),
      (0, 'asc_or_desc'),
      (0, 'nulls_order') ] ],
  [ 'ClassClause',              '',
    [ (0, 'using'),
      (1, 'Name', 'name') ] ],
  [ 'IndPrimKeyTableConstraint','TableConstraintBody',
    [ (0, 'primary'),
      (0, 'key'),
      (1, 'ExistingIndex', 'existingIndex'),
      (2, 'ConstraintAttribute', 'attrs') ] ],
  [ 'PrimKeyTableConstraint',   'TableConstraintBody',
    [ (0, 'primary'),
      (0, 'key'),
      (0, 'lparen'),
      (2, 'Name', 'columns'),
      (0, 'rparen'),
      (1, 'ConstraintDefinitions', 'definitions'),
      (1, 'ConstraintTablespace', 'constrTablespace'),
      (2, 'ConstraintAttribute', 'attrs') ] ],
  [ 'IndUniqueTableConstraint', 'TableConstraintBody',
    [ (0, 'unique'),
      (1, 'ExistingIndex', 'existingIndex'),
      (2, 'ConstraintAttribute', 'attrs') ] ],
  [ 'ExistingIndex',            '',
    [ (0, 'using'),
      (0, 'index'),
      (1, 'Name', 'indexName') ] ],
  [ 'UniqueTableConstraint',    'TableConstraintBody',
    [ (0, 'unique'),
      (0, 'lparen'),
      (2, 'Name', 'columns'),
      (0, 'rparen'),
      (1, 'ConstraintDefinitions', 'definitions'),
      (1, 'ConstraintTablespace', 'constrTablespace'),
      (2, 'ConstraintAttribute', 'attrs') ] ],
  [ 'CheckTableConstraint',     'TableConstraintBody',
    [ (0, 'check'),
      (0, 'lparen'),
      (1, 'Expression', 'expr'),
      (0, 'rparen'),
      (2, 'ConstraintAttribute', 'attrs') ] ],
  [ 'ConstraintAttribute',      '',             [] ],
  [ 'DeferConstraintAttr',      'ConstraintAttribute',
    [ (0, 'not'),
      (0, 'deferrable') ] ],
  [ 'InitiallyConstraintAttr',  'ConstraintAttribute',
    [ (0, 'initally'),
      (0, 'deferred_or_immediate') ] ],
  [ 'NotValidConstraintAttr',   'ConstraintAttribute',
    [ (0, 'not'),
      (0, 'valid') ] ],
  [ 'NoInheritConstraintAttr',  'ConstraintAttribute',
    [ (0, 'no'),
      (0, 'inherit') ] ],
  [ 'ColumnConstraint',         'Constraint',   [] ],
  [ 'CommonColConstraint',      'ColumnConstraint',
    [ (0, 'constraint'),
      (1, 'Name', 'constraintName'),
      (1, 'ConstraintBody', 'body') ] ],
  [ 'ConstraintBody',           '',             [] ],
  [ 'RefConstraintBody',        'ConstraintBody',
    [ (0, 'references'),
      (1, 'TableIdentifier', 'tableIdent'),
      (1, 'RefColumns', 'refColumns'),
      (1, 'KeyMatch', 'match'),
      (1, 'KeyActions', 'actions') ] ],
  [ 'RefColumns',               '',
    [ (0, 'lparen'),
      (2, 'Name', 'columns'),
      (0, 'rparen') ] ],
  [ 'KeyMatch',                 '',
    [ (0, 'match'),
      (0, 'full_or_partial_or_simple') ] ],
  [ 'KeyActions',               '',             [] ],
  [ 'UpdDelKeyActions',         'KeyActions',
    [ (1, 'KeyUpdate', 'upd'),
      (1, 'KeyDelete', 'del') ] ],
  [ 'DelUpdKeyActions',         'KeyActions',
    [ (1, 'KeyDelete', 'del'),
      (1, 'KeyUpdate', 'upd') ] ],
  [ 'KeyUpdate',                '',
    [ (0, 'on'),
      (0, 'update'),
      (1, 'KeyAction', 'action') ] ],
  [ 'KeyDelete',                '',
    [ (0, 'on'),
      (0, 'delete'),
      (1, 'KeyAction', 'action') ] ],
  [ 'KeyAction',                '',
    [ (0, 'spec1'),
      (0, 'spec2') ] ],
  [ 'DefaultConstraintBody',    'ConstraintBody',
    [ (0, 'default'),
      (1, 'Expression', 'expr') ] ],
  [ 'CheckConstraintBody',      'ConstraintBody',
    [ (0, 'check'),
      (0, 'lparen'),
      (1, 'Expression', 'expr'),
      (0, 'rparen'),
      (1, 'NoInherit', 'noInherit') ] ],
  [ 'NoInherit',                '',
    [ (0, 'no'),
      (0, 'inherit') ] ],
  [ 'UniqueConstraintBody',     'ConstraintBody',
    [ (0, 'unique'),
      (1, 'ConstraintDefinitions', 'definitions'),
      (1, 'ConstraintTablespace', 'tablespace') ] ],
  [ 'PrimaryKeyConstraintBody', 'ConstraintBody',
    [ (0, 'primary'),
      (0, 'key'),
      (1, 'ConstraintDefinitions', 'definitions'),
      (1, 'ConstraintTablespace', 'tablespace') ] ],
  [ 'ConstraintTablespace',     '',
    [ (0, 'using'),
      (0, 'index'),
      (0, 'tablespace'),
      (1, 'Name', 'tablespaceName') ] ],
  [ 'ConstraintDefinitions',    '',
    [ (0, 'with'),
      (1, 'Definition', 'def') ] ],
  [ 'Definition',               '',
    [ (0, 'lparen'),
      (2, 'DefinitionElem', 'items'),
      (0, 'rparen') ] ],
  [ 'DefinitionElem',           '',
    [ (0, 'label'),
      (0, 'equal'),
      (1, 'DefinitionArgument', 'arg') ] ],
  [ 'DefinitionArgument',       '',             [] ],
  [ 'FuncTyDefinitionArgument', 'DefinitionArgument',
    [ (1, 'FunctionType', 'funcTy') ] ],
  [ 'FunctionType',             '',             [] ],
  [ 'PercentFunctionType',      'FunctionType',
    [ (0, 'setof'),
      (1, 'Name', 'funcName'),
      (2, 'Name', 'attrs'),
      (0, 'percent'),
      (0, 'type') ] ],
  [ 'SimpleFunctionType',       'FunctionType',
    [ (1, 'Type', 'type') ] ],
  [ 'QualOpDefinitionArgument', 'DefinitionArgument',
    [ (1, 'QualifiedOperator', 'qualOp') ] ],
  [ 'SimpleDefinitionArgument', 'DefinitionArgument',
    [ (0, 'value') ] ],
  [ 'NotNullConstraintBody',    'ConstraintBody',
    [ (0, 'not'),
      (0, 'null') ] ],
  [ 'AttrColConstraint',        'ColumnConstraint', [] ],
  [ 'DeferColConstraint',       'AttrColConstraint',
    [ (0, 'not'),
      (0, 'deferrable') ] ],
  [ 'InitiallyColConstraint',   'AttrColConstraint',
    [ (0, 'initially'),
      (0, 'deferred_or_immediate') ] ],
  [ 'CollateColConstraint',     'ColumnConstraint',
    [ (0, 'collate'),
      (1, 'AnyIdentifier', 'collateValue') ] ],
  [ 'CreateGeneticOptions',     '',
    [ (0, 'options'),
      (0, 'lparen'),
      (2, 'GenericOption', 'options'),
      (0, 'rparen') ] ],
  [ 'GenericOption',            '',
    [ (0, 'option'),
      (0, 'value') ] ],
  [ 'Type',                     '',
    [ (0, 'setof'),
      (1, 'SimpleTypename', 'simpleName'),
      (0, 'array'),
      (2, 'ArrBound', 'arrBounds') ] ],
  [ 'SimpleTypename',           '',             [] ],
  [ 'GenericTypename',          'SimpleTypename',
    [ (1, 'Name', 'typeName'),
      (2, 'Name', 'attributes'),
      (1, 'TypeModifiers', 'modifiers') ] ],
  [ 'IntervalTypename',         'SimpleTypename',
    [ (0, 'interval'),
      (0, 'lparen'),
      (0, 'arrLength'),
      (0, 'rparen'),
      (1, 'Interval', 'interval') ] ],
  [ 'NumericTypename',          'SimpleTypename',
    [ (0, 'type_spec') ] ],
  [ 'FloatTypename',            'SimpleTypename',
    [ (0, 'type_spec'),
      (1, 'FloatPrecision', 'precision') ] ],
  [ 'DoubleTypename',           'SimpleTypename',
    [ (0, 'double'),
      (0, 'precision') ] ],
  [ 'DecimalTypename',          'SimpleTypename',
    [ (0, 'type_spec'),
      (1, 'TypeModifiers', 'modifiers') ] ],
  [ 'FloatPrecision',           '',
    [ (0, 'lparen'),
      (0, 'precision'),
      (0, 'rparen') ] ],
  [ 'BitTypename',              'SimpleTypename',
    [ (0, 'type_spec'),
      (0, 'varying'),
      (0, 'lparen'),
      (2, 'Expression', 'modifiers'),
      (0, 'rparen') ] ],
  [ 'CharacterTypename',        'SimpleTypename',
    [ (1, 'CharacterTypeSpec', 'typeSpec'),
      (0, 'lparen'),
      (0, 'length'),
      (0, 'rparen'),
      (1, 'CharSet', 'set') ] ],
  [ 'DatetimeTypename',         'SimpleTypename',
    [ (0, 'time_or_timestamp'),
      (0, 'lparen'),
      (0, 'value'),
      (0, 'rparen'),
      (1, 'TimeZoneSpec', 'timeZoneSpec') ] ],
  [ 'TimeZoneSpec',             '',
    [ (0, 'with_or_without'),
      (0, 'time'),
      (0, 'zone') ] ],
  [ 'CharacterTypeSpec',        '',
    [ (0, 'national'),
      (0, 'type_spec'),
      (0, 'varying') ] ],
  [ 'CharSet',                  '',
    [ (0, 'character'),
      (0, 'set'),
      (0, 'value') ] ],
  [ 'TypeModifiers',            '',
    [ (0, 'lparen'),
      (2, 'Expression', 'modifiers'),
      (0, 'rparen') ] ],
  [ 'ArrBound',                 '',
    [ (0, 'lbracket'),
      (0, 'arr_length'),
      (0, 'rbracket') ] ],
  [ 'Expression',               '',             [] ],
  [ 'PrimaryExpression',        'Expression',   [] ],
  [ 'RowPrimaryExpression',     'PrimaryExpression',
    [ (1, 'Row', 'row') ] ],
  [ 'ArrayPrimaryExpression',   'PrimaryExpression',
    [ (0, 'array'),
      (1, 'ArrayExpr', 'arrExpr') ] ],
  [ 'ArrayExpr',                '',             [] ],
  [ 'ExprListArrayExpr',        'ArrayExpr',
    [ (0, 'lbracket'),
      (2, 'Expression', 'values'),
      (0, 'rbracket') ] ],
  [ 'ArrListArrayExpr',         'ArrayExpr',
    [ (0, 'lbracket'),
      (2, 'ArrayExpr', 'arrList'),
      (0, 'rbracket') ] ],
  [ 'EmptyArrayExpr',           'ArrayExpr',
    [ (0, 'lbracket'),
      (0, 'rbracket') ] ],
  [ 'SubqueryPrimaryExpression','PrimaryExpression',
    [ (0, 'exists_or_array'),
      (1, 'SelectWithParens', 'subquery'),
      (2, 'Indirection', 'qualifiers') ] ],
  [ 'FunctionPrimaryExpression','PrimaryExpression',
    [ (1, 'FunctionExpression', 'func') ] ],
  [ 'ColRefPrimaryExpression',  'PrimaryExpression',
    [ (1, 'ColumnRef', 'columnRef') ] ],
  [ 'ConstPrimaryExpression',   'PrimaryExpression',
    [ (1, 'Constant', 'value') ] ],
  [ 'ParamPrimaryExpression',   'PrimaryExpression',
    [ (1, 'Name', 'param'),
      (2, 'Indirection', 'qualifiers') ] ],
  [ 'CompoundPrimaryExpression','PrimaryExpression',
    [ (0, 'lparen'),
      (1, 'Expression', 'expr'),
      (0, 'rparen'),
      (2, 'Indirection', 'qualifiers') ] ],
  [ 'CasePrimaryExpression',    'PrimaryExpression',
    [ (1, 'CaseExpr', 'caseExpr') ] ],
  [ 'CaseExpr',                 '',
    [ (0, 'case'),
      (1, 'CaseArg', 'arg'),
      (2, 'CaseWhenClause', 'whens'),
      (1, 'CaseDefaultClause', 'deaultClause'),
      (0, 'end') ] ],
  [ 'CaseArg',                  '',
    [ (1, 'Expression', 'expr') ] ],
  [ 'CaseWhenClause',           '',
    [ (0, 'when'),
      (1, 'Expression', 'whernExpr'),
      (0, 'then'),
      (1, 'Expression', 'thenExpr') ] ],
  [ 'CaseDefaultClause',        '',
    [ (0, 'else'),
      (1, 'Expression', 'expr') ] ],
  [ 'Constant',                 '',             [] ],
  [ 'SimpleConstant',           'Constant',
    [ (0, 'value') ] ],
  [ 'FuncNameConstant',         'Constant',
    [ (1, 'FunctionRef', 'funcRef'),
      (0, 'lparen'),
      (2, 'FunctionArgExpr', 'args'),
      (0, 'rparen'),
      (0, 'value') ] ],
  [ 'IntervalConstant',         'Constant',
    [ (0, 'interval'),
      (0, 'lparen'),
      (0, 'val'),
      (0, 'rparen'),
      (0, 'sval'),
      (1, 'Interval', 'interval') ] ],
  [ 'TypenameConstant',         '',
    [ (1, 'SimpleTypename', 'typeName'),
      (0, 'value') ] ],
  [ 'TypecastExpression',       'Expression',
    [ (1, 'Expression', 'expr'),
      (0, 'dotdot'),
      (1, 'Type', 'type') ] ],
  [ 'CollateExpression',        'Expression',
    [ (1, 'Expression', 'expr'),
      (0, 'collate'),
      (1, 'AnyIdentifier', 'value') ] ],
  [ 'AtTimeZoneExpression',     'Expression',
    [ (1, 'Expression', 'lExpr'),
      (0, 'at'),
      (0, 'time'),
      (0, 'zone'),
      (1, 'Expression', 'rExpr') ] ],
  [ 'UnaryExpression',          'Expression',
    [ (0, 'op'),
      (1, 'Expression', 'expr') ] ],
  [ 'BinaryExpression',         'Expression',
    [ (1, 'Expression', 'lExpr'),
      (0, 'op'),
      (1, 'Expression', 'rExpr') ] ],
  [ 'CommonBinaryExpression',   'Expression',
    [ (1, 'Expression', 'lExpr'),
      (1, 'QualifiedOperator', 'commonOp'),
      (1, 'Expression', 'rExpr') ] ],
  [ 'CommonUnaryExpresion',     'Expression',
    [ (1, 'QualifiedOperator', 'commonOp'),
      (1, 'Expression', 'expr') ] ],
  [ 'CommonPostfixExpression',  'Expression',
    [ (1, 'Expression', 'expr'),
      (1, 'QualifiedOperator', 'commonOp') ] ],
  [ 'LikeExpression',           'Expression',
    [ (1, 'Expression', 'lExpr'),
      (0, 'not'),
      (0, 'like'),
      (1, 'Expression', 'rExpr'),
      (0, 'escape'),
      (1, 'Expression', 'escExpr') ] ],
  [ 'SimilarToExpression',      'Expression',
    [ (1, 'Expression', 'lExpr'),
      (0, 'not'),
      (0, 'similar'),
      (0, 'to'),
      (1, 'Expression', 'rExpr'),
      (0, 'excape'),
      (1, 'Expression', 'escExpr') ] ],
  [ 'IsExpression',             'Expression',
    [ (1, 'Expression', 'expr'),
      (0, 'is'),
      (0, 'not'),
      (0, 'something') ] ],
  [ 'IsDdistinctExpression',    'Expression',
    [ (1, 'Expression', 'lExpr'),
      (0, 'is'),
      (0, 'not'),
      (0, 'distinct'),
      (0, 'from'),
      (1, 'Expression', 'rExpr') ] ],
  [ 'IsTypeofExpression',       'Expression',
    [ (1, 'Expression', 'expr'),
      (0, 'is'),
      (0, 'not'),
      (0, 'of'),
      (0, 'lparen'),
      (2, 'Type', 'types'),
      (0, 'rparen') ] ],
  [ 'BetweenExpression',        'Expression',
    [ (1, 'Expression', 'expr'),
      (0, 'not'),
      (0, 'between'),
      (0, 'symmetric_spec'),
      (1, 'Expression', 'lExpr'),
      (0, 'and'),
      (1, 'Expression', 'rExpr') ] ],
  [ 'InExpression',             'Expression',
    [ (1, 'Expression', 'expr'),
      (0, 'not'),
      (0, 'in'),
      (1, 'InValues', 'values') ] ],
  [ 'InValues',                 '',             [] ],
  [ 'InValuesAsQuery',          'InValues',
    [ (1, 'SelectWithParens', 'query') ] ],
  [ 'InValuesAsExprList',       'InValues',
    [ (0, 'lparen'),
      (2, 'Expression', 'values'),
      (0, 'rparen') ] ],
#  [ 'RelationExpr',             'Expression',   [] ],
  [ 'RelationExprSimple',       'RelationExpr',
    [ (1, 'TableIdentifier', 'tableIdent'),
      (0, 'star') ] ],
  [ 'SubqueryExpression',       'Expression',
    [ (1, 'Expression', 'expr'),
      (1, 'SubqueryOperator', 'subqueryOp'),
      (0, 'sub_type'),
      (1, 'SelectWithParens', 'query') ] ],
  [ 'SubExpressionExpression',  'Expression',
    [ (1, 'Expression', 'expr'),
      (1, 'SubqueryOperator', 'subqueryOp'),
      (0, 'sub_type'),
      (0, 'lparen'),
      (1, 'Expression', 'subExpr'),
      (0, 'rparen') ] ],
  [ 'RowOverlapsExpression',    'Expression',
    [ (1, 'Row', 'lRow'),
      (0, 'overlaps'),
      (1, 'Row', 'rRow') ] ],
  [ 'UniqueExpression',         'Expression',
    [ (0, 'unique'),
      (1, 'SelectWithParens', 'query') ] ],
  [ 'Row',                      '',
    [ (0, 'row'),
      (0, 'lparen'),
      (2, 'Expression', 'values'),
      (0, 'rparen') ] ],
  [ 'RelationExprOnly',         'RelationExpr',
    [ (0, 'only'),
      (0, 'lparen'),
      (1, 'TableIdentifier', 'tableIdent'),
      (0, 'rparen') ] ],
  [ 'SubqueryOperator',         '',             [] ],
  [ 'QualSubqueryOperator',     'SubqueryOperator',
    [ (1, 'QualifiedOperator', 'qualOp') ] ],
  [ 'LikeSubqueryOperator',     'SubqueryOperator',
    [ (0, 'not'),
      (0, 'like_or_ilike') ] ],
  [ 'QualifiedOperator',        '',             [] ],
  [ 'SimpleQualifiedOperator',  'QualifiedOperator',
    [ (0, 'op') ] ],
  [ 'CompoundQualifiedOperator','QualifiedOperator',
    [ (0, 'operator'),
      (0, 'lparen'),
      (1, 'Operand', 'oper'),
      (0, 'rparen') ] ],
  [ 'Operand',                  '',
    [ (1, 'ColumnIdentifier', 'columnIdent'),
      (0, 'dot'),
      (0, 'op') ] ],
  [ 'AnyIdentifier',            '',
    [ (1, 'Name', 'name'),
      (2, 'Name', 'attributes') ] ],
  [ 'TableIdentifier',          '',
    [ (1, 'Name', 'schemaName'),
      (0, 'dot'),
      (1, 'Name', 'tableName') ] ],
  [ 'TriggerIdentifier',          '',
    [ (1, 'Name', 'schemaName'),
      (0, 'dot'),
      (1, 'Name', 'triggerName') ] ],
  [ 'IndexIdentifier',          '',
    [ (1, 'Name', 'schemaName'),
      (0, 'dot'),
      (1, 'Name', 'indexName') ] ],
  [ 'ConstraintIdentifier',         '',
    [ (1, 'Name', 'schemaName'),
      (0, 'dot'),
      (1, 'Name', 'constraintName') ] ],
  [ 'SequenceIdentifier',          '',
    [ (1, 'Name', 'schemaName'),
      (0, 'dot'),
      (1, 'Name', 'sequenceName') ] ],
  [ 'ColumnIdentifier',         '',
    [ (1, 'Name', 'schemaName'),
      (0, 'dot1'),
      (1, 'Name', 'tableName'),
      (0, 'dot2'),
      (1, 'Name', 'columnName') ] ],
  [ 'ColumnRef',                '',
    [ (1, 'Name', 'firstName'),
      (2, 'Indirection', 'qualifiers') ] ],
  [ 'FunctionRef',                '',
    [ (1, 'Name', 'firstName'),
      (2, 'Indirection', 'qualifiers') ] ],
  [ 'Indirection',              '',             [] ],
  [ 'AttirbuteIndirection',     'Indirection',
    [ (0, 'dot'),
      (1, 'Name', 'attrName') ] ],
  [ 'StarIndirection',          'Indirection',
    [ (0, 'dot'),
      (0, 'star') ] ],
  [ 'IndexingIndirection',      'Indirection',
    [ (0, 'lbracket'),
      (1, 'Expression', 'expr1'),
      (0, 'comma'),
      (1, 'Expression', 'expr2'),
      (0, 'rpbracket') ] ],
]

srcFileName  =  work_dir + '/' + namespace + 'AST.cpp'
hdrFileName  =  work_dir + '/' + namespace + 'AST.h'
fhdrFileName =  work_dir + '/' + namespace + 'ASTfwd.h'
vhdrFileName =  work_dir + '/' + namespace + 'ASTVisitor.h'
vsrcFileName =  work_dir + '/' + namespace + 'ASTVisitor.cpp'
vnhdrFileName = work_dir + '/' + namespace + 'ASTNoVisitor.h'
drvMakeNodesFileName = work_dir + '/tmpDriver.cpp'

ast_header_start_content = """#ifndef {1}AST_H
#define {1}AST_H

#include "TranslationUnit.h"
#include "BaseWalker.h"
#include "{0}ASTfwd.h"
#include "MemoryPool.h"

namespace {0} {{

template <typename _Tp>
class List: public Sql::SManaged
{{
    List(const List &other);
    void operator =(const List &other);

public:
    List()
        : value(_Tp()), next(0)
    {{ }}

    List(const _Tp &value)
        : value(value), next(this)
    {{ }}

    List(List *previous, const _Tp &value)
        : value(value), next(this)
    {{
        if ( previous ) {{
            next = previous->next;
            previous->next = this;
        }}
    }}

    List *finish()
    {{
        List *head = next;
        next = 0;
        return head;
    }}

    int firstToken() const
    {{
        if (value)
            return value->firstToken();

        // ### assert(0);
        return 0;
    }}

    int lastToken() const
    {{
        _Tp lv = lastValue();

        if (lv)
            return lv->lastToken();

        // ### assert(0);
        return 0;
    }}

    _Tp lastValue() const
    {{
        _Tp lastValue = 0;

        for (const List *it = this; it; it = it->next) {{
            if (it->value)
                lastValue = it->value;
        }}

        return lastValue;
    }}

    _Tp value;
    List *next;
}};

class AST: public Sql::SManaged
{{
    AST(const AST &other);
    void operator =(const AST &other);

protected:
    template <typename T>
    static List<T> *finish(List<T> *list)
    {{
        if (! list)
            return 0;
        return list->finish(); // convert the circular list with a linked list.
    }}

public:
    AST();
    virtual ~AST();

    void accept(ASTVisitor *visitor);

    static void accept(AST *ast, ASTVisitor *visitor)
    {{ if (ast) ast->accept(visitor); }}

    template <typename _Tp>
    static void accept(List<_Tp> *it, ASTVisitor *visitor)
    {{
        for (; it; it = it->next)
            accept(it->value, visitor);
    }}

    virtual int firstToken() const = 0;
    virtual int lastToken() const = 0;
    virtual bool isNull() const = 0;

    virtual StatementAST *asStatement() {{ return 0; }}
    virtual RelationExprAST *asRelationExpr() {{ return 0; }}
    virtual NameAST *asName() {{ return 0; }}

""".format(namespace, namespace.upper())

ast_header_class_end = """
    // Additional for SelectStatement and InvalidSelectStatement
    virtual bool isSelectStatement() const { return false; }

protected:
    virtual void accept0( ASTVisitor *visitor ) = 0;
};

class EmptyAST: public AST
{
public:
    EmptyAST() {}

    virtual int firstToken() const { return 0; }
    virtual int lastToken() const { return 1; }
    virtual bool isNull() const { return true; }

protected:
    virtual void accept0( ASTVisitor *visitor );
};

class StatementAST: public AST
{
public:
    unsigned start_line;
    unsigned start_pos;
    unsigned end_line;
    unsigned end_pos;

    QList<RelationExprAST *> *relations;

    class Info {
    public:
        enum Type {
            UnknownType = 0,
            Select,
            Insert,
            Update,
            Delete,
            Truncate,
            Comment,
            Alter,
            Create,
            Drop
        };

        enum Target {
            UnknownTarget = 0,
            Table,
            Column,
            View,
            Index,
            Trigger,
            Constraint,
            Sequence,
            Role,
            User,
            Schema,
            TypeTarget,
            Aggregate,
            Function,
            Operator
        };

        Info( Type type_ = UnknownType, Target target_ = UnknownTarget )
            : type(type_)
            , target(target_)
            , schemaName(0)
            , objectName(0)
        { }

        Type type;
        Target target;
        NameAST *schemaName;
        NameAST *objectName;
    };

    Info *info;

    struct CompletionHelper
    {
        CompletionHelper()
            : start_token(0)
            , end_token(0)
            , schemaName(0)
            , objectName(0)
            , type(UnknownHelper)
        { }

        int start_token;
        int end_token;
        NameAST *schemaName;
        NameAST *objectName;
        QString keywords;
        enum HelperType {
            UnknownHelper = 0,
            SchemaName,
            TableIdentifier,
            ViewIdentifier,
            IndexIdentifier,
            TriggerIdentifier,
            SequenceIdentifier,
            TableColumnIdentifier,
            TableConstraintIdentifier,
            TriggerTableIdentifier,
            ColumnName,
            IndexName,
            TriggerName,
            ConstraintName,
            Keywords
        };
        HelperType type;
    };

    QList<CompletionHelper *> *helpers;

public:
    StatementAST( bool topLevel_ = true, bool blockMode_ = false )
        : start_line(0)
        , start_pos(0)
        , end_line(0)
        , end_pos(0)
        , topLevel(topLevel_)
        , blockMode(blockMode_)
        , relations(0)
        , info(0)
    { }

    virtual ~StatementAST() {
        if ( relations )
            delete relations;
        if ( info )
            delete info;
        if ( helpers ) {
            qDeleteAll(*helpers);
            delete helpers;
        }
    }

    virtual StatementAST *asStatement() { return this; }

    inline bool isTopLevelStatement() const { return topLevel; }
    inline void setTopLevelStatement( bool topLevel_ ) { topLevel = topLevel_; }
    inline bool isBlockMode() const { return blockMode; }
    inline void setBlockMode( bool blockMode_ = true ) { blockMode = blockMode_; }

private:
    bool topLevel;
    bool blockMode;
};

class RelationExprAST: public AST
{
public:
    TableAliasClauseAST *alias;

public:
    RelationExprAST()
        : alias(0)
    { }

    virtual RelationExprAST *asRelationExpr() { return this; }
};

class NameAST: public AST
{
public:
    enum Kind {
        Unknown = 0,
        Schema,
        Table,
        TableAlias,
        Column,
        ColumnAlias,
        Index,
        Trigger,
        Constraint,
        Sequence,
        Binding,
        Label,
        Package,
        Routine,
        Type,
        Role,
        Database,
        Window,
        Variable
    };

    Kind kind;
    int name_token;
    const Sql::Identifier *name;

public:
    NameAST( Kind kind_ = Unknown,
             int offset = 0,
             const Sql::Identifier *name_ = 0 )
        : kind(kind_)
        , name_token(offset)
        , name(name_)
    {}

    virtual NameAST *asName() { return this; }

    virtual int firstToken() const { return name_token; }
    virtual int lastToken() const { return name_token + 1; }
    virtual bool isNull() const { return name == 0; }

protected:
    virtual void accept0( ASTVisitor *visitor );
};

"""

ast_header_end_content = """///////////////////////////////////////////////////////////////////////////////////////////////////////
class SqlCheckNamesWalker: public Sql::BaseWalker
{{
public:
    SqlCheckNamesWalker( AST *ast, Sql::TranslationUnit *translationUnit )
        : BaseWalker()
        , m_ast(ast)
        , m_translationUnit(translationUnit)
    {{}}

    virtual void walk( Sql::BaseWalkReflector *reflector );

private:
    AST *m_ast;
    Sql::TranslationUnit *m_translationUnit;
}};

}}   // namespace {0}

#endif // {1}AST_H
""".format(namespace, namespace.upper())

ast_source_start_content = """#include <assert.h>

#include "{0}AST.h"
#include "{0}ASTVisitor.h"
#include "{0}SqlCheckNamesVisitor.h"

namespace Postgres {{

AST::AST()
{{ }}

AST::~AST()
{{ assert(0); }}

void AST::accept( ASTVisitor *visitor )
{{
    if ( visitor->preVisit(this) )
        accept0(visitor);
    visitor->postVisit(this);
}}

void EmptyAST::accept0( ASTVisitor *visitor )
{{
    if ( visitor->visit(this) ) {{
    }}
    visitor->endVisit(this);
}}

void NameAST::accept0( ASTVisitor *visitor )
{{
    if ( visitor->visit(this) ) {{
    }}
    visitor->endVisit(this);
}}

""".format(namespace)

ast_source_end_content = """///////////////////////////////////////////////////////////////////////////////////////////////////////
void SqlCheckNamesWalker::walk( Sql::BaseWalkReflector *reflector) {{
    if ( m_ast ) {{
        SqlCheckNamesVisitor visitor(m_translationUnit, reflector);
        m_ast->accept(&visitor);
    }}
}}

}}   // namespace {0}
""".format(namespace)

ast_visitor_start_content = """#ifndef {1}ASTVISITOR_H
#define {1}ASTVISITOR_H

#include "{0}ASTfwd.h"
#include "TranslationUnit.h"

namespace {0} {{

class ASTVisitor
{{
    ASTVisitor(const ASTVisitor &other);
    void operator =(const ASTVisitor &other);

public:
    ASTVisitor( Sql::TranslationUnit *translationUnit );

    Sql::TranslationUnit *translationUnit() {{ return m_translationUnit; }}

    const Sql::Token &tokenAt( unsigned index ) const;

    void accept( AST *ast );

    void getPosition( unsigned offset,
                      unsigned *line,
                      unsigned *column = 0,
                      const Sql::StringLiteral **fileName = 0 ) const;

    void getTokenPosition( unsigned index,
                           unsigned *line,
                           unsigned *column = 0,
                           const Sql::StringLiteral **fileName = 0 ) const;

    void getTokenStartPosition( unsigned index, unsigned *line, unsigned *column ) const;
    void getTokenEndPosition( unsigned index, unsigned *line, unsigned *column ) const;

    virtual bool preVisit(AST *) {{ return true; }}
    virtual void postVisit(AST *) {{}}

    virtual bool visit(EmptyAST *) {{ return true; }}
    virtual void endVisit(EmptyAST *) {{}}
    virtual bool visit(NameAST *) {{ return true; }}
    virtual void endVisit(NameAST *) {{}}
""".format(namespace, namespace.upper())

ast_novisitor_start_content = """#ifndef {1}ASTNOVISITOR_H
#define {1}ASTNOVISITOR_H

#include "{0}ASTfwd.h"
#include "TranslationUnit.h"

namespace {0} {{

class ASTNoVisitor: public ASTVisitor
{{
    ASTNoVisitor(const ASTNoVisitor &other);
    void operator =(const ASTNoVisitor &other);

public:
    ASTNoVisitor( Sql::TranslationUnit *translationUnit ) : ASTVisitor(translationUnit) {{}}

    virtual bool visit(EmptyAST *) {{ return false; }}
    virtual void endVisit(EmptyAST *) {{}}
    virtual bool visit(NameAST *) {{ return false; }}
    virtual void endVisit(NameAST *) {{}}
""".format(namespace, namespace.upper())

ast_visitor_end_content = """
private:
    Sql::TranslationUnit *m_translationUnit;
}};

}}   // namespace {0}

#endif // {1}ASTVISITOR_H
""".format(namespace, namespace.upper())

ast_novisitor_end_content = """}};

}}   // namespace {0}

#endif // {1}ASTNOVISITOR_H
""".format(namespace, namespace.upper())

ast_fwd_start_content = """#ifndef {1}ASTFWD_H
#define {1}ASTFWD_H

namespace {0} {{

template <typename _Tp> class List;

class AST;
class ASTVisitor;

class EmptyAST;
class StatementAST;
class RelationExprAST;
class NameAST;
""".format(namespace, namespace.upper())

ast_fwd_end_content = """
}}   // namespace {0}

#endif // {1}ASTFWD_H
""".format(namespace, namespace.upper())

vsrc_content = """#include "{0}ASTVisitor.h"
#include "{0}AST.h"

namespace {0} {{

ASTVisitor::ASTVisitor( Sql::TranslationUnit *translationUnit )
    : m_translationUnit(translationUnit)
{{ }}

const Sql::Token &ASTVisitor::tokenAt( unsigned index ) const
{{ return m_translationUnit->tokenAt(index); }}

void ASTVisitor::accept( AST *ast )
{{ AST::accept(ast, this); }}

void ASTVisitor::getPosition( unsigned offset,
                              unsigned *line,
                              unsigned *column,
                              const Sql::StringLiteral **fileName ) const
{{ m_translationUnit->getPosition(offset, line, column, fileName); }}

void ASTVisitor::getTokenPosition( unsigned index,
                                   unsigned *line,
                                   unsigned *column,
                                   const Sql::StringLiteral **fileName ) const
{{ m_translationUnit->getTokenPosition(index, line, column, fileName); }}

void ASTVisitor::getTokenStartPosition( unsigned index, unsigned *line, unsigned *column ) const
{{ getPosition(tokenAt(index).begin(), line, column); }}

void ASTVisitor::getTokenEndPosition( unsigned index, unsigned *line, unsigned *column ) const
{{ getPosition(tokenAt(index).end(), line, column); }}

}}   // namespace {0}
"""

with open(srcFileName,  'w') as src, \
     open(hdrFileName,  'w') as hdr, \
     open(fhdrFileName, 'w') as fhdr, \
     open(vhdrFileName, 'w') as vhdr, \
     open(vnhdrFileName, 'w') as vnhdr, \
     open(drvMakeNodesFileName, 'w') as drv:
  hdr.write(ast_header_start_content)
  src.write(ast_source_start_content)
  fhdr.write(ast_fwd_start_content)
  vhdr.write(ast_visitor_start_content)
  vnhdr.write(ast_novisitor_start_content)

  for cl in classes:
    className = cl[0]
    hdr.write('    virtual {0}AST *as{0}() {{ return 0; }}\n'.format(className))
    vhdr.write('    virtual bool visit({0}AST *) {{ return true; }}\n'.format(className))
    vhdr.write('    virtual void endVisit({0}AST *) {{}}\n'.format(className))
    vnhdr.write('    virtual bool visit({0}AST *) {{ return false; }}\n'.format(className))
    vnhdr.write('    virtual void endVisit({0}AST *) {{}}\n'.format(className))
  hdr.write(ast_header_class_end)
  vhdr.write(ast_visitor_end_content)
  vnhdr.write(ast_novisitor_end_content)

  listed_classes = set()
  for cl in classes:
    className = cl[0]
    baseClassName = cl[1]
    mc = len(cl[2])
    isAbstract = mc == 0
    hdr.write('class {0}AST: public {1}AST\n{{\npublic:\n'.format(className, baseClassName))
    fhdr.write('class {0}AST;\n'.format(className))
    if isAbstract:
      hdr.write('    {0}AST() : {1}AST() {{}}\n'.format(className, baseClassName))
      hdr.write('    virtual {0}AST *as{0}() {{ return this; }}\n'.format(className))
    else:
      mdl = []
      md = ''
      for m in cl[2]:
        if m[0] == 0:
          md = 'int t_{0}'.format(m[1])
        elif m[0] == 1:
          md = '{0}AST *{1}'.format(m[1], m[2])
        elif m[0] == 2:
          md = '{0}ListAST *{1}'.format(m[1], m[2])
          listed_classes.add(m[1])
        else:
          md = '/*!! WTF !!*/'
        hdr.write('    ' + md + ';\n')
        mdl.append(md)
      hdr.write('\npublic:\n')
      hdr.write('    {0}AST( '.format(className))
      mdc = 0
      while mdc < mc - 1:
        hdr.write(mdl[mdc] + '_, ')
        mdc += 1
      hdr.write(mdl[mdc] + '_ )\n')
      hdr.write('        : {0}AST()\n'.format(baseClassName))
      for m in cl[2]:
        if m[0] == 0:
          hdr.write('        , t_{0}(t_{0}_)\n'.format(m[1]))
        elif m[0] == 1:
          hdr.write('        , {0}({0}_)\n'.format(m[2]))
        else:
          hdr.write('        , {0}(finish({0}_))\n'.format(m[2]))
      hdr.write('    {}\n\n')
      hdr.write('    virtual {0}AST *as{0}() {{ return this; }}\n\n'.format(className))
      hdr.write('    virtual int firstToken() const;\n')
      hdr.write('    virtual int lastToken() const;\n')
      hdr.write('    virtual bool isNull() const;\n\n')
      hdr.write('protected:\n    virtual void accept0( ASTVisitor *visitor );\n')
      src.write('int {0}AST::firstToken() const\n{{\n'.format(className))
      for m in cl[2]:
        if m[0] == 0:
          src.write('    if ( t_{0} )\n        return t_{0};\n'.format(m[1]))
        elif m[0] == 1:
          src.write('    if ( {0} && !{0}->isNull() )\n        return {0}->firstToken();\n'.format(m[2]))
        else:
          src.write('    if ( {0} )\n        return {0}->firstToken();\n'.format(m[2]))
      src.write('    return 0;\n')
      src.write('}\n\n')
      src.write('int {0}AST::lastToken() const\n{{\n'.format(className))
      for m in reversed(cl[2]):
        if m[0] == 0:
          src.write('    if ( t_{0} )\n        return t_{0} + 1;\n'.format(m[1]))
        elif m[0] == 1:
          src.write('    if ( {0} && !{0}->isNull() )\n        return {0}->lastToken();\n'.format(m[2]))
        else:
          src.write('    if ( {0} )\n        return {0}->lastToken();\n'.format(m[2]))
      src.write('    return 1;\n')
      src.write('}\n\n')
      src.write('bool {0}AST::isNull() const\n{{\n'.format(className))
      for m in cl[2]:
        if m[0] == 0:
          src.write('    if ( t_{0} )\n        return false;\n'.format(m[1]))
        else:
          src.write('    if ( {0} )\n        return false;\n'.format(m[2]))
      src.write('    return true;\n')
      src.write('}\n\n')
      src.write('void {0}AST::accept0( ASTVisitor *visitor )\n{{\n    if ( visitor->visit(this) ) {{\n'.format(className))
      for m in cl[2]:
        if m[0] != 0:
          src.write('        accept({0}, visitor);\n'.format(m[2]))
      src.write('    }\n    visitor->endVisit(this);\n}\n\n')
    hdr.write('};\n\n')

  hdr.write(ast_header_end_content)
  src.write(ast_source_end_content)
  fhdr.write('\n')
  for l in listed_classes:
    fhdr.write('typedef List<{0}AST *> {0}ListAST;\n'.format(l))
  fhdr.write(ast_fwd_end_content)

  drv.write('void fakeFunction() {\n')
  for l in listed_classes:
    drv.write('    {0}ListAST *make{0}ListAST({0}AST *ast) {{ return new (_pool) {0}ListAST(ast); }}\n'.format(l))
    drv.write('    {0}ListAST *make{0}ListAST({0}ListAST *head, {0}AST *ast) {{ return new (_pool) {0}ListAST(head, ast); }}\n'.format(l))
  drv.write('\n    {0}AST *make{0}AST() {{ return new (_pool) {0}AST(); }}\n'.format('Empty'))
  for cl in classes:
    if not cl[2]:
      continue
    drv.write('    {0}AST *make{0}AST('.format(cl[0]))
    is_first = True
    args = ''
    for m in cl[2]:
      arg_type = ''
      arg_name = ''
      if m[0] == 0:
        arg_type = 'int '
        arg_name = m[1] + '_'
      elif m[0] == 1:
        arg_type = m[1] + 'AST *'
        arg_name = m[2] + 'Ast'
      else:
        arg_type = m[1] + 'ListAST *'
        arg_name = m[2] + 'ListAst'
      if not is_first:
        drv.write(', ')
        args += ', ' + arg_name
      else:
        is_first = False
        args += arg_name
      drv.write(arg_type + arg_name)
    drv.write(') {{ return new (_pool) {0}AST({1}); }}\n'.format(cl[0], args))
  drv.write('}  // fakeFunction\n')

#DocumentManager.openDocument(srcFileName)
#DocumentManager.openDocument(hdrFileName)
#DocumentManager.openDocument(fhdrFileName)
#DocumentManager.openDocument(vhdrFileName)
