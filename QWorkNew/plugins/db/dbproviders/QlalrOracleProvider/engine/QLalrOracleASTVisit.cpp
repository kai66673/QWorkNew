/**************************************************************************
**
** This file is part of Qt Creator
**
** Copyright (c) 2011 Nokia Corporation and/or its subsidiary(-ies).
**
** Contact: Nokia Corporation (info@qt.nokia.com)
**
**
** GNU Lesser General Public License Usage
**
** This file may be used under the terms of the GNU Lesser General Public
** License version 2.1 as published by the Free Software Foundation and
** appearing in the file LICENSE.LGPL included in the packaging of this file.
** Please review the following information to ensure the GNU Lesser General
** Public License version 2.1 requirements will be met:
** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html.
**
** In addition, as a special exception, Nokia gives you certain additional
** rights. These rights are described in the Nokia Qt LGPL Exception
** version 1.1, included in the file LGPL_EXCEPTION.txt in this package.
**
** Other Usage
**
** Alternatively, this file may be used in accordance with the terms and
** conditions contained in a signed written agreement between you and Nokia.
**
** If you have questions regarding the use of this file, please contact
** Nokia at qt-info@nokia.com.
**
**************************************************************************/

//
//  W A R N I N G
//  -------------
//
// This file is automatically generated.
// Changes will be lost.
//


#include "QLalrOracleAST.h"
#include "QLalrOracleASTVisitor.h"

using namespace QLalrOracle;

void EmptyAST::accept0( ASTVisitor *visitor )
{
    if ( visitor->visit(this) ) {
    }
    visitor->endVisit(this);
}

void TranslationUnitAST::accept0( ASTVisitor *visitor )
{
    if ( visitor->visit(this) ) {
        accept(statement_list, visitor);
    }
    visitor->endVisit(this);
}

void SelectStatementAST::accept0( ASTVisitor *visitor )
{
    if ( visitor->visit(this) ) {
        accept(select_core, visitor);
        accept(order_by_block, visitor);
        accept(forupdate_clause, visitor);
    }
    visitor->endVisit(this);
}

void SelectCoreAST::accept0( ASTVisitor *visitor )
{
    if ( visitor->visit(this) ) {
        accept(selColumns, visitor);
        accept(joinSource, visitor);
        accept(whereClause, visitor);
        accept(groupBy, visitor);
        accept(setClause, visitor);
    }
    visitor->endVisit(this);
}

void InvalidStatementAST::accept0( ASTVisitor *visitor )
{
    if ( visitor->visit(this) ) {
    }
    visitor->endVisit(this);
}

void UnknownStatementAST::accept0( ASTVisitor *visitor )
{
    if ( visitor->visit(this) ) {
    }
    visitor->endVisit(this);
}

void OrderByBlockAST::accept0( ASTVisitor *visitor )
{
    if ( visitor->visit(this) ) {
        accept(term_list, visitor);
    }
    visitor->endVisit(this);
}

void ForUpdateClauseAST::accept0( ASTVisitor *visitor )
{
    if ( visitor->visit(this) ) {
        accept(col_list, visitor);
    }
    visitor->endVisit(this);
}

void LimitToBlockAST::accept0( ASTVisitor *visitor )
{
    if ( visitor->visit(this) ) {
        accept(expr, visitor);
    }
    visitor->endVisit(this);
}

void OrderingTermAST::accept0( ASTVisitor *visitor )
{
    if ( visitor->visit(this) ) {
        accept(expr, visitor);
    }
    visitor->endVisit(this);
}

void LabelAST::accept0( ASTVisitor *visitor )
{
    if ( visitor->visit(this) ) {
        accept(labelName, visitor);
    }
    visitor->endVisit(this);
}

void NameAST::accept0( ASTVisitor *visitor )
{
    if ( visitor->visit(this) ) {
    }
    visitor->endVisit(this);
}

void PlSqlNameAST::accept0( ASTVisitor *visitor )
{
    if ( visitor->visit(this) ) {
    }
    visitor->endVisit(this);
}

void PlSqlTypeNameAST::accept0( ASTVisitor *visitor )
{
    if ( visitor->visit(this) ) {
    }
    visitor->endVisit(this);
}

void StarSelectColumnAST::accept0( ASTVisitor *visitor )
{
    if ( visitor->visit(this) ) {
    }
    visitor->endVisit(this);
}

void ListSelectColumnAST::accept0( ASTVisitor *visitor )
{
    if ( visitor->visit(this) ) {
        accept(columns, visitor);
    }
    visitor->endVisit(this);
}

void TableSelectColumnsItemAST::accept0( ASTVisitor *visitor )
{
    if ( visitor->visit(this) ) {
        accept(tableIdent, visitor);
    }
    visitor->endVisit(this);
}

void ValueSelectColumnItemAST::accept0( ASTVisitor *visitor )
{
    if ( visitor->visit(this) ) {
        accept(columnExpr, visitor);
        accept(columnAlias, visitor);
    }
    visitor->endVisit(this);
}

void StarResultColumnAST::accept0( ASTVisitor *visitor )
{
    if ( visitor->visit(this) ) {
        accept(tableIdent, visitor);
    }
    visitor->endVisit(this);
}

void ExprResultColumnAST::accept0( ASTVisitor *visitor )
{
    if ( visitor->visit(this) ) {
        accept(expr, visitor);
        accept(columnAlias, visitor);
    }
    visitor->endVisit(this);
}

void SubQueryAST::accept0( ASTVisitor *visitor )
{
    if ( visitor->visit(this) ) {
        accept(selectStatement, visitor);
    }
    visitor->endVisit(this);
}

void DirectSingleSourceAST::accept0( ASTVisitor *visitor )
{
    if ( visitor->visit(this) ) {
        accept(schemaTableName, visitor);
        accept(tableAlias, visitor);
    }
    visitor->endVisit(this);
}

void SubQuerySingleSourceAST::accept0( ASTVisitor *visitor )
{
    if ( visitor->visit(this) ) {
        accept(selectStatement, visitor);
        accept(tableAlias, visitor);
    }
    visitor->endVisit(this);
}

void JoinOpAST::accept0( ASTVisitor *visitor )
{
    if ( visitor->visit(this) ) {
    }
    visitor->endVisit(this);
}

void JoinConstraintAST::accept0( ASTVisitor *visitor )
{
    if ( visitor->visit(this) ) {
        accept(expr, visitor);
    }
    visitor->endVisit(this);
}

void JoinItemAST::accept0( ASTVisitor *visitor )
{
    if ( visitor->visit(this) ) {
        accept(joinOp, visitor);
        accept(singleSource, visitor);
        accept(joinConstraint, visitor);
    }
    visitor->endVisit(this);
}

void CompoundJoinListAST::accept0( ASTVisitor *visitor )
{
    if ( visitor->visit(this) ) {
        accept(join_list, visitor);
    }
    visitor->endVisit(this);
}

void CommaJoinListAST::accept0( ASTVisitor *visitor )
{
    if ( visitor->visit(this) ) {
        accept(source, visitor);
        accept(join_list, visitor);
    }
    visitor->endVisit(this);
}

void JoinJoinListAST::accept0( ASTVisitor *visitor )
{
    if ( visitor->visit(this) ) {
        accept(source, visitor);
        accept(condition, visitor);
        accept(join_list, visitor);
    }
    visitor->endVisit(this);
}

void JoinConditionAST::accept0( ASTVisitor *visitor )
{
    if ( visitor->visit(this) ) {
        accept(conditionExpr, visitor);
    }
    visitor->endVisit(this);
}

void JoinSourceAST::accept0( ASTVisitor *visitor )
{
    if ( visitor->visit(this) ) {
        accept(firstSource, visitor);
        accept(join_list, visitor);
    }
    visitor->endVisit(this);
}

void GroupByBlockAST::accept0( ASTVisitor *visitor )
{
    if ( visitor->visit(this) ) {
        accept(group_items_list, visitor);
        accept(havingExpr, visitor);
    }
    visitor->endVisit(this);
}

void WhereClauseAST::accept0( ASTVisitor *visitor )
{
    if ( visitor->visit(this) ) {
        accept(whereExpr, visitor);
    }
    visitor->endVisit(this);
}

void StartConnectPriorAST::accept0( ASTVisitor *visitor )
{
    if ( visitor->visit(this) ) {
        accept(lvExpr, visitor);
        accept(rvExpr, visitor);
    }
    visitor->endVisit(this);
}

void EndConnectPriorAST::accept0( ASTVisitor *visitor )
{
    if ( visitor->visit(this) ) {
        accept(lvExpr, visitor);
        accept(rvExpr, visitor);
    }
    visitor->endVisit(this);
}

void StartWithClauseAST::accept0( ASTVisitor *visitor )
{
    if ( visitor->visit(this) ) {
        accept(conditionExpr, visitor);
    }
    visitor->endVisit(this);
}

void ConnectByClauseAST::accept0( ASTVisitor *visitor )
{
    if ( visitor->visit(this) ) {
        accept(connectPriorClause, visitor);
        accept(startWithClause, visitor);
    }
    visitor->endVisit(this);
}

void SetClauseAST::accept0( ASTVisitor *visitor )
{
    if ( visitor->visit(this) ) {
        accept(spec, visitor);
        accept(selectCore, visitor);
    }
    visitor->endVisit(this);
}

void MinusSetSpecAST::accept0( ASTVisitor *visitor )
{
    if ( visitor->visit(this) ) {
    }
    visitor->endVisit(this);
}

void IntersectSetSpecAST::accept0( ASTVisitor *visitor )
{
    if ( visitor->visit(this) ) {
    }
    visitor->endVisit(this);
}

void UnionSetSpecAST::accept0( ASTVisitor *visitor )
{
    if ( visitor->visit(this) ) {
    }
    visitor->endVisit(this);
}

void DeleteStatementAST::accept0( ASTVisitor *visitor )
{
    if ( visitor->visit(this) ) {
        accept(source, visitor);
        accept(whereClause, visitor);
    }
    visitor->endVisit(this);
}

void InsertStatementAST::accept0( ASTVisitor *visitor )
{
    if ( visitor->visit(this) ) {
        accept(source, visitor);
        accept(insertColumns, visitor);
        accept(insClause, visitor);
    }
    visitor->endVisit(this);
}

void InsertColumnsClauseAST::accept0( ASTVisitor *visitor )
{
    if ( visitor->visit(this) ) {
        accept(col_list, visitor);
    }
    visitor->endVisit(this);
}

void UpdateStatementAST::accept0( ASTVisitor *visitor )
{
    if ( visitor->visit(this) ) {
        accept(source, visitor);
        accept(setClause, visitor);
        accept(whereClause, visitor);
    }
    visitor->endVisit(this);
}

void UpdateSetClauseAST::accept0( ASTVisitor *visitor )
{
    if ( visitor->visit(this) ) {
        accept(upd_list, visitor);
    }
    visitor->endVisit(this);
}

void CreateTableDirectClauseAST::accept0( ASTVisitor *visitor )
{
    if ( visitor->visit(this) ) {
        accept(column_def_list, visitor);
        accept(constraintList, visitor);
    }
    visitor->endVisit(this);
}

void CreateTableAsSelectClauseAST::accept0( ASTVisitor *visitor )
{
    if ( visitor->visit(this) ) {
        accept(selectStatement, visitor);
    }
    visitor->endVisit(this);
}

void CreateTriggerRefClauseAST::accept0( ASTVisitor *visitor )
{
    if ( visitor->visit(this) ) {
        accept(newAlias, visitor);
        accept(oldAlias, visitor);
    }
    visitor->endVisit(this);
}

void CreateRdbTriggerBodyAST::accept0( ASTVisitor *visitor )
{
    if ( visitor->visit(this) ) {
        accept(item_list, visitor);
    }
    visitor->endVisit(this);
}

void CreateRdbTriggerBodyItemAST::accept0( ASTVisitor *visitor )
{
    if ( visitor->visit(this) ) {
        accept(whenExpr, visitor);
        accept(stat_list, visitor);
    }
    visitor->endVisit(this);
}

void ColumnDefinitionAST::accept0( ASTVisitor *visitor )
{
    if ( visitor->visit(this) ) {
        accept(columnName, visitor);
        accept(columnType, visitor);
        accept(defaultExpr, visitor);
        accept(constraintList, visitor);
    }
    visitor->endVisit(this);
}

void ConstraintDeferStateAST::accept0( ASTVisitor *visitor )
{
    if ( visitor->visit(this) ) {
    }
    visitor->endVisit(this);
}

void UsingIndexClauseAST::accept0( ASTVisitor *visitor )
{
    if ( visitor->visit(this) ) {
        accept(indexIdent, visitor);
        accept(createIndexStatement, visitor);
    }
    visitor->endVisit(this);
}

void ExceptionsClauseAST::accept0( ASTVisitor *visitor )
{
    if ( visitor->visit(this) ) {
        accept(tableIdent, visitor);
    }
    visitor->endVisit(this);
}

void ConstraintStateAST::accept0( ASTVisitor *visitor )
{
    if ( visitor->visit(this) ) {
        accept(defer, visitor);
        accept(usingIndex, visitor);
        accept(exceptionClause, visitor);
    }
    visitor->endVisit(this);
}

void UniqueOrPkTableConstraintAST::accept0( ASTVisitor *visitor )
{
    if ( visitor->visit(this) ) {
        accept(constraintName, visitor);
        accept(column_list, visitor);
    }
    visitor->endVisit(this);
}

void CheckTableConstraintAST::accept0( ASTVisitor *visitor )
{
    if ( visitor->visit(this) ) {
        accept(constraintName, visitor);
        accept(checkExpr, visitor);
    }
    visitor->endVisit(this);
}

void FkTableConstraintAST::accept0( ASTVisitor *visitor )
{
    if ( visitor->visit(this) ) {
        accept(constraintName, visitor);
        accept(col_list, visitor);
        accept(refClause, visitor);
    }
    visitor->endVisit(this);
}

void FkReferencesClauseAST::accept0( ASTVisitor *visitor )
{
    if ( visitor->visit(this) ) {
        accept(tableIdent, visitor);
        accept(ref_col_list, visitor);
    }
    visitor->endVisit(this);
}

void PkColumnConstraintAST::accept0( ASTVisitor *visitor )
{
    if ( visitor->visit(this) ) {
        accept(constraintName, visitor);
        accept(state, visitor);
    }
    visitor->endVisit(this);
}

void NotNullColumnConstraintAST::accept0( ASTVisitor *visitor )
{
    if ( visitor->visit(this) ) {
        accept(constraintName, visitor);
        accept(state, visitor);
    }
    visitor->endVisit(this);
}

void UniqueColumnConstraintAST::accept0( ASTVisitor *visitor )
{
    if ( visitor->visit(this) ) {
        accept(constraintName, visitor);
        accept(state, visitor);
    }
    visitor->endVisit(this);
}

void CheckColumnConstraintAST::accept0( ASTVisitor *visitor )
{
    if ( visitor->visit(this) ) {
        accept(constraintName, visitor);
        accept(checkExpr, visitor);
        accept(state, visitor);
    }
    visitor->endVisit(this);
}

void ReferencesColumnConstraintAST::accept0( ASTVisitor *visitor )
{
    if ( visitor->visit(this) ) {
        accept(constraintName, visitor);
        accept(refClause, visitor);
        accept(state, visitor);
    }
    visitor->endVisit(this);
}

void SortedColumnNameAST::accept0( ASTVisitor *visitor )
{
    if ( visitor->visit(this) ) {
        accept(columnName, visitor);
    }
    visitor->endVisit(this);
}

void InsertClauseAsValuesAST::accept0( ASTVisitor *visitor )
{
    if ( visitor->visit(this) ) {
        accept(val_list, visitor);
    }
    visitor->endVisit(this);
}

void InsertClauseAsSelectAST::accept0( ASTVisitor *visitor )
{
    if ( visitor->visit(this) ) {
        accept(selectStatement, visitor);
    }
    visitor->endVisit(this);
}

void CreateTableStatementAST::accept0( ASTVisitor *visitor )
{
    if ( visitor->visit(this) ) {
        accept(tableIdent, visitor);
        accept(tableClause, visitor);
    }
    visitor->endVisit(this);
}

void CreateViewStatementAST::accept0( ASTVisitor *visitor )
{
    if ( visitor->visit(this) ) {
        accept(viewIdent, visitor);
        accept(selectStatement, visitor);
    }
    visitor->endVisit(this);
}

void CreateIndexStatementAST::accept0( ASTVisitor *visitor )
{
    if ( visitor->visit(this) ) {
        accept(indexIdent, visitor);
        accept(indexClause, visitor);
    }
    visitor->endVisit(this);
}

void TableCreateIndexClauseAST::accept0( ASTVisitor *visitor )
{
    if ( visitor->visit(this) ) {
        accept(tableIdent, visitor);
        accept(columns_list, visitor);
    }
    visitor->endVisit(this);
}

void CreateTriggerStatementAST::accept0( ASTVisitor *visitor )
{
    if ( visitor->visit(this) ) {
        accept(triggeeIdent, visitor);
        accept(tableIdent, visitor);
        accept(col_list, visitor);
        accept(triggerRefClause, visitor);
        accept(triggerBody, visitor);
    }
    visitor->endVisit(this);
}

void DropTableStatementAST::accept0( ASTVisitor *visitor )
{
    if ( visitor->visit(this) ) {
        accept(tableIdent, visitor);
    }
    visitor->endVisit(this);
}

void DropViewStatementAST::accept0( ASTVisitor *visitor )
{
    if ( visitor->visit(this) ) {
        accept(viewIdent, visitor);
    }
    visitor->endVisit(this);
}

void DropIndexStatementAST::accept0( ASTVisitor *visitor )
{
    if ( visitor->visit(this) ) {
        accept(indexIdent, visitor);
    }
    visitor->endVisit(this);
}

void DropTriggerStatementAST::accept0( ASTVisitor *visitor )
{
    if ( visitor->visit(this) ) {
        accept(triggerIdent, visitor);
    }
    visitor->endVisit(this);
}

void TruncateStatementAST::accept0( ASTVisitor *visitor )
{
    if ( visitor->visit(this) ) {
        accept(tableIdent, visitor);
    }
    visitor->endVisit(this);
}

void AlterTableStatementAST::accept0( ASTVisitor *visitor )
{
    if ( visitor->visit(this) ) {
        accept(tableIdent, visitor);
        accept(alterTableClause, visitor);
    }
    visitor->endVisit(this);
}

void AlterTableDropClauseAST::accept0( ASTVisitor *visitor )
{
    if ( visitor->visit(this) ) {
        accept(dropObjectName, visitor);
    }
    visitor->endVisit(this);
}

void AlterTableAddConstraintClauseAST::accept0( ASTVisitor *visitor )
{
    if ( visitor->visit(this) ) {
        accept(constraint, visitor);
    }
    visitor->endVisit(this);
}

void AlterTableAddColumnClauseAST::accept0( ASTVisitor *visitor )
{
    if ( visitor->visit(this) ) {
        accept(column, visitor);
    }
    visitor->endVisit(this);
}

void CommentOnTableStatementAST::accept0( ASTVisitor *visitor )
{
    if ( visitor->visit(this) ) {
        accept(tableIdent, visitor);
    }
    visitor->endVisit(this);
}

void CommentOnColumnStatementAST::accept0( ASTVisitor *visitor )
{
    if ( visitor->visit(this) ) {
        accept(columnIdent, visitor);
    }
    visitor->endVisit(this);
}

void CommitStatementAST::accept0( ASTVisitor *visitor )
{
    if ( visitor->visit(this) ) {
    }
    visitor->endVisit(this);
}

void RollbackStatementAST::accept0( ASTVisitor *visitor )
{
    if ( visitor->visit(this) ) {
    }
    visitor->endVisit(this);
}

void CallStatementAST::accept0( ASTVisitor *visitor )
{
    if ( visitor->visit(this) ) {
        accept(funcName, visitor);
        accept(arg_list, visitor);
    }
    visitor->endVisit(this);
}

void CharacterTypeAST::accept0( ASTVisitor *visitor )
{
    if ( visitor->visit(this) ) {
    }
    visitor->endVisit(this);
}

void NumberTypeAST::accept0( ASTVisitor *visitor )
{
    if ( visitor->visit(this) ) {
    }
    visitor->endVisit(this);
}

void SimpleTypeAST::accept0( ASTVisitor *visitor )
{
    if ( visitor->visit(this) ) {
    }
    visitor->endVisit(this);
}

void CompoundValueExpressionAST::accept0( ASTVisitor *visitor )
{
    if ( visitor->visit(this) ) {
        accept(valExpr, visitor);
    }
    visitor->endVisit(this);
}

void FunctionCallAST::accept0( ASTVisitor *visitor )
{
    if ( visitor->visit(this) ) {
        accept(functionIdent, visitor);
        accept(arg_list, visitor);
    }
    visitor->endVisit(this);
}

void CountStarCallAST::accept0( ASTVisitor *visitor )
{
    if ( visitor->visit(this) ) {
    }
    visitor->endVisit(this);
}

void CountExprCallAST::accept0( ASTVisitor *visitor )
{
    if ( visitor->visit(this) ) {
        accept(countExpr, visitor);
    }
    visitor->endVisit(this);
}

void BuiltinFunctionCallAST::accept0( ASTVisitor *visitor )
{
    if ( visitor->visit(this) ) {
        accept(arg_list, visitor);
    }
    visitor->endVisit(this);
}

void UnaryValueExpressionAST::accept0( ASTVisitor *visitor )
{
    if ( visitor->visit(this) ) {
        accept(valExpr, visitor);
    }
    visitor->endVisit(this);
}

void BinaryValueExpressionAST::accept0( ASTVisitor *visitor )
{
    if ( visitor->visit(this) ) {
        accept(lvExpr, visitor);
        accept(rvExpr, visitor);
    }
    visitor->endVisit(this);
}

void LiteralExpressionAST::accept0( ASTVisitor *visitor )
{
    if ( visitor->visit(this) ) {
    }
    visitor->endVisit(this);
}

void NumericExpressionAST::accept0( ASTVisitor *visitor )
{
    if ( visitor->visit(this) ) {
    }
    visitor->endVisit(this);
}

void FunctionExpressionAST::accept0( ASTVisitor *visitor )
{
    if ( visitor->visit(this) ) {
        accept(functionName, visitor);
        accept(arg_list, visitor);
    }
    visitor->endVisit(this);
}

void CastFunctionAST::accept0( ASTVisitor *visitor )
{
    if ( visitor->visit(this) ) {
        accept(castExpr, visitor);
        accept(typeSpec, visitor);
    }
    visitor->endVisit(this);
}

void SubstringFunctionAST::accept0( ASTVisitor *visitor )
{
    if ( visitor->visit(this) ) {
        accept(strExpr, visitor);
        accept(startExpr, visitor);
        accept(lengthExpr, visitor);
    }
    visitor->endVisit(this);
}

void ParameterExpressionAST::accept0( ASTVisitor *visitor )
{
    if ( visitor->visit(this) ) {
        accept(bindName, visitor);
    }
    visitor->endVisit(this);
}

void NullValueExpressionAST::accept0( ASTVisitor *visitor )
{
    if ( visitor->visit(this) ) {
    }
    visitor->endVisit(this);
}

void SelectCompoundValueExpressionAST::accept0( ASTVisitor *visitor )
{
    if ( visitor->visit(this) ) {
        accept(query, visitor);
    }
    visitor->endVisit(this);
}

void ValueListExpressionAST::accept0( ASTVisitor *visitor )
{
    if ( visitor->visit(this) ) {
        accept(val_list, visitor);
    }
    visitor->endVisit(this);
}

void SubQueryExpressionAST::accept0( ASTVisitor *visitor )
{
    if ( visitor->visit(this) ) {
        accept(query, visitor);
    }
    visitor->endVisit(this);
}

void NotConditionExpressionAST::accept0( ASTVisitor *visitor )
{
    if ( visitor->visit(this) ) {
        accept(condition, visitor);
    }
    visitor->endVisit(this);
}

void TrueConditionExpressionAST::accept0( ASTVisitor *visitor )
{
    if ( visitor->visit(this) ) {
    }
    visitor->endVisit(this);
}

void FalseConditionExpressionAST::accept0( ASTVisitor *visitor )
{
    if ( visitor->visit(this) ) {
    }
    visitor->endVisit(this);
}

void CompoundConditionExpressionAST::accept0( ASTVisitor *visitor )
{
    if ( visitor->visit(this) ) {
        accept(condExpr, visitor);
    }
    visitor->endVisit(this);
}

void CompareConditionExpressionAST::accept0( ASTVisitor *visitor )
{
    if ( visitor->visit(this) ) {
        accept(lvExpr, visitor);
        accept(rvExpr, visitor);
    }
    visitor->endVisit(this);
}

void InConditionExpressionAST::accept0( ASTVisitor *visitor )
{
    if ( visitor->visit(this) ) {
        accept(lvExpr, visitor);
        accept(rvExpr, visitor);
    }
    visitor->endVisit(this);
}

void LikeConditionExpressionAST::accept0( ASTVisitor *visitor )
{
    if ( visitor->visit(this) ) {
        accept(lvExpr, visitor);
        accept(rvExpr, visitor);
    }
    visitor->endVisit(this);
}

void ExistsConditionExpressionAST::accept0( ASTVisitor *visitor )
{
    if ( visitor->visit(this) ) {
        accept(rvExpr, visitor);
    }
    visitor->endVisit(this);
}

void BetweenConditionExpressionAST::accept0( ASTVisitor *visitor )
{
    if ( visitor->visit(this) ) {
        accept(lvExpr, visitor);
        accept(rv1Expr, visitor);
        accept(rv2Expr, visitor);
    }
    visitor->endVisit(this);
}

void IsNullConditionExpressionAST::accept0( ASTVisitor *visitor )
{
    if ( visitor->visit(this) ) {
        accept(lvExpr, visitor);
    }
    visitor->endVisit(this);
}
void BinaryConditionExpressionAST::accept0( ASTVisitor *visitor )
{
    if ( visitor->visit(this) ) {
        accept(lvCondExpr, visitor);
        accept(rvCondExpr, visitor);
    }
    visitor->endVisit(this);
}

void ConditionAsValueExpressionAST::accept0( ASTVisitor *visitor )
{
    if ( visitor->visit(this) ) {
        accept(expr, visitor);
    }
    visitor->endVisit(this);
}

void AssignmentExpressionAST::accept0( ASTVisitor *visitor )
{
    if ( visitor->visit(this) ) {
        accept(columnIdent, visitor);
        accept(rvExpr, visitor);
    }
    visitor->endVisit(this);
}

void CaseExpressionAST::accept0( ASTVisitor *visitor )
{
    if ( visitor->visit(this) ) {
        accept(caseExpr, visitor);
        accept(var_list, visitor);
        accept(elseExpr, visitor);
    }
    visitor->endVisit(this);
}

void CaseExpressionClauseAST::accept0( ASTVisitor *visitor )
{
    if ( visitor->visit(this) ) {
        accept(whenExpr, visitor);
        accept(thenExpr, visitor);
    }
    visitor->endVisit(this);
}

void CaseConditionAST::accept0( ASTVisitor *visitor )
{
    if ( visitor->visit(this) ) {
        accept(var_list, visitor);
        accept(elseExpr, visitor);
    }
    visitor->endVisit(this);
}

void CaseConditionClauseAST::accept0( ASTVisitor *visitor )
{
    if ( visitor->visit(this) ) {
        accept(whenExpr, visitor);
        accept(thenExpr, visitor);
    }
    visitor->endVisit(this);
}

///////////////////////////////////////////////////////////////////////////////////////////////////////
// PL-SQL >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
void PlSqlBlockAST::accept0( ASTVisitor *visitor )
{
    if ( visitor->visit(this) ) {
        accept(label, visitor);
        accept(declareSection, visitor);
        accept(body, visitor);
    }
    visitor->endVisit(this);
}

void PlSqlBlockBodyAST::accept0( ASTVisitor *visitor )
{
    if ( visitor->visit(this) ) {
        accept(statements, visitor);
        accept(namedExceptions, visitor);
        accept(othersException, visitor);
        accept(endBlockName, visitor);
    }
    visitor->endVisit(this);
}

void PlSqlStatementAST::accept0( ASTVisitor *visitor )
{
    if ( visitor->visit(this) ) {
        accept(label, visitor);
        accept(statement, visitor);
    }
    visitor->endVisit(this);
}

void BlockCommitStatementAST::accept0( ASTVisitor *visitor )
{
    if ( visitor->visit(this) ) {
    }
    visitor->endVisit(this);
}

void BlockDeleteStatementAST::accept0( ASTVisitor *visitor )
{
    if ( visitor->visit(this) ) {
        accept(deleteStatement, visitor);
    }
    visitor->endVisit(this);
}

void BlockInsertStatementAST::accept0( ASTVisitor *visitor )
{
    if ( visitor->visit(this) ) {
        accept(insertStatement, visitor);
    }
    visitor->endVisit(this);
}

void BlockLockTableStatementAST::accept0( ASTVisitor *visitor )
{
    if ( visitor->visit(this) ) {
        accept(tableIdent, visitor);
    }
    visitor->endVisit(this);
}

void BlockRollbackStatementAST::accept0( ASTVisitor *visitor )
{
    if ( visitor->visit(this) ) {
        accept(rollbacClause, visitor);
    }
    visitor->endVisit(this);
}

void RollbackToSavepointClauseAST::accept0( ASTVisitor *visitor )
{
    if ( visitor->visit(this) ) {
        accept(savepointName, visitor);
    }
    visitor->endVisit(this);
}

void RollbackForceClauseAST::accept0( ASTVisitor *visitor )
{
    if ( visitor->visit(this) ) {
        accept(stringExpr, visitor);
    }
    visitor->endVisit(this);
}

void BlockSavepointStatementAST::accept0( ASTVisitor *visitor )
{
    if ( visitor->visit(this) ) {
        accept(savepointName, visitor);
    }
    visitor->endVisit(this);
}

void BlockSelectIntoStatementAST::accept0( ASTVisitor *visitor )
{
    if ( visitor->visit(this) ) {
        accept(columnList, visitor);
        accept(intoVars, visitor);
        accept(joinSource, visitor);
        accept(whereExpr, visitor);
        accept(groupBy, visitor);
    }
    visitor->endVisit(this);
}

void BlockSetTransactionStatementAST::accept0( ASTVisitor *visitor )
{
    if ( visitor->visit(this) ) {
    }
    visitor->endVisit(this);
}

void BlockUpdateStatementAST::accept0( ASTVisitor *visitor )
{
    if ( visitor->visit(this) ) {
        accept(updateStatement, visitor);
    }
    visitor->endVisit(this);
}

void AssignmentStatementAST::accept0( ASTVisitor *visitor )
{
    if ( visitor->visit(this) ) {
        accept(lvalueExpr, visitor);
        accept(rvalueExpr, visitor);
    }
    visitor->endVisit(this);
}

void LValueExpressionAST::accept0( ASTVisitor *visitor )
{
    if ( visitor->visit(this) ) {
        accept(dotted_list, visitor);
    }
    visitor->endVisit(this);
}

void LValueExpressionItemAST::accept0( ASTVisitor *visitor )
{
    if ( visitor->visit(this) ) {
        accept(identName, visitor);
        accept(arr_ind_list, visitor);
    }
    visitor->endVisit(this);
}

void NullStatementAST::accept0( ASTVisitor *visitor )
{
    if ( visitor->visit(this) ) {
    }
    visitor->endVisit(this);
}

void OpenCursorStatementAST::accept0( ASTVisitor *visitor )
{
    if ( visitor->visit(this) ) {
        accept(cursorName, visitor);
        accept(par_list, visitor);
    }
    visitor->endVisit(this);
}

void OpenForStatementAST::accept0( ASTVisitor *visitor )
{
    if ( visitor->visit(this) ) {
        accept(cursorVariableName, visitor);
        accept(selStatement, visitor);
        accept(usingClause, visitor);
    }
    visitor->endVisit(this);
}

void OpenForStatementClauseBySelectAST::accept0( ASTVisitor *visitor )
{
    if ( visitor->visit(this) ) {
        accept(selectStatement, visitor);
    }
    visitor->endVisit(this);
}

void OpenForStatementClauseByStringAST::accept0( ASTVisitor *visitor )
{
    if ( visitor->visit(this) ) {
        accept(stmtExpr, visitor);
    }
    visitor->endVisit(this);
}

void PlSqlBlocStatementAST::accept0( ASTVisitor *visitor )
{
    if ( visitor->visit(this) ) {
        accept(innerBlock, visitor);
    }
    visitor->endVisit(this);
}

void RaiseStatementAST::accept0( ASTVisitor *visitor )
{
    if ( visitor->visit(this) ) {
        accept(exceptionName, visitor);
    }
    visitor->endVisit(this);
}

void ReturnStatementAST::accept0( ASTVisitor *visitor )
{
    if ( visitor->visit(this) ) {
        accept(returnExpr, visitor);
    }
    visitor->endVisit(this);
}

void CloseStatementAST::accept0( ASTVisitor *visitor )
{
    if ( visitor->visit(this) ) {
        accept(cursorName, visitor);
    }
    visitor->endVisit(this);
}

void ContinueOrExitStatementAST::accept0( ASTVisitor *visitor )
{
    if ( visitor->visit(this) ) {
        accept(labelName, visitor);
        accept(condExpr, visitor);
    }
    visitor->endVisit(this);
}

void ExecImmediateStatementAST::accept0( ASTVisitor *visitor )
{
    if ( visitor->visit(this) ) {
        accept(stringSqlExpr, visitor);
        accept(intoClause, visitor);
        accept(usingClause, visitor);
        accept(returningClause, visitor);
    }
    visitor->endVisit(this);
}

void FetchStatementAST::accept0( ASTVisitor *visitor )
{
    if ( visitor->visit(this) ) {
        accept(cursorName, visitor);
        accept(intoClause, visitor);
        accept(limit, visitor);
    }
    visitor->endVisit(this);
}

void ForLoopStatementAST::accept0( ASTVisitor *visitor )
{
    if ( visitor->visit(this) ) {
        accept(indexName, visitor);
        accept(inClause, visitor);
        accept(loop, visitor);
    }
    visitor->endVisit(this);
}

void ForInBoundsClauseAST::accept0( ASTVisitor *visitor )
{
    if ( visitor->visit(this) ) {
        accept(lboundExpr, visitor);
        accept(rboundExpr, visitor);
    }
    visitor->endVisit(this);
}

void ForInCursorClauseAST::accept0( ASTVisitor *visitor )
{
    if ( visitor->visit(this) ) {
        accept(cursorName, visitor);
        accept(par_list, visitor);
    }
    visitor->endVisit(this);
}

void WhileLoopStatementAST::accept0( ASTVisitor *visitor )
{
    if ( visitor->visit(this) ) {
        accept(condExpr, visitor);
        accept(loop, visitor);
    }
    visitor->endVisit(this);
}

void ForInSelectClauseAST::accept0( ASTVisitor *visitor )
{
    if ( visitor->visit(this) ) {
        accept(selectStatement, visitor);
    }
    visitor->endVisit(this);
}

void ForallStatementAST::accept0( ASTVisitor *visitor )
{
    if ( visitor->visit(this) ) {
        accept(indexName, visitor);
        accept(inClause, visitor);
        accept(statement, visitor);
    }
    visitor->endVisit(this);
}

void ForallInBoundsClauseAST::accept0( ASTVisitor *visitor )
{
    if ( visitor->visit(this) ) {
        accept(lboundExpr, visitor);
        accept(rboundExpr, visitor);
    }
    visitor->endVisit(this);
}

void ForallInIndicesClauseAST::accept0( ASTVisitor *visitor )
{
    if ( visitor->visit(this) ) {
        accept(collectionName, visitor);
        accept(lboundExpr, visitor);
        accept(rboundExpr, visitor);
    }
    visitor->endVisit(this);
}

void ForallInValuesClauseAST::accept0( ASTVisitor *visitor )
{
    if ( visitor->visit(this) ) {
        accept(collectionName, visitor);
    }
    visitor->endVisit(this);
}

void GotoStatementAST::accept0( ASTVisitor *visitor )
{
    if ( visitor->visit(this) ) {
        accept(labelName, visitor);
    }
    visitor->endVisit(this);
}

void IfStatementAST::accept0( ASTVisitor *visitor )
{
    if ( visitor->visit(this) ) {
        accept(condExpr, visitor);
        accept(trueStatements, visitor);
        accept(elsif_list, visitor);
        accept(falseStatements, visitor);
    }
    visitor->endVisit(this);
}

void ElsifClauseAST::accept0( ASTVisitor *visitor )
{
    if ( visitor->visit(this) ) {
        accept(condExpr, visitor);
        accept(statements, visitor);
    }
    visitor->endVisit(this);
}

void LoopStatementAST::accept0( ASTVisitor *visitor )
{
    if ( visitor->visit(this) ) {
        accept(statements, visitor);
        accept(labelName, visitor);
    }
    visitor->endVisit(this);
}

void DeclareSectionAST::accept0( ASTVisitor *visitor )
{
    if ( visitor->visit(this) ) {
        accept(decl_list, visitor);
    }
    visitor->endVisit(this);
}

void CursorDeclarationAST::accept0( ASTVisitor *visitor )
{
    if ( visitor->visit(this) ) {
        accept(spec, visitor);
        accept(selectStatement, visitor);
    }
    visitor->endVisit(this);
}

void VariableDeclarationAST::accept0( ASTVisitor *visitor )
{
    if ( visitor->visit(this) ) {
        accept(variableName, visitor);
        accept(type, visitor);
        accept(defaultExpr, visitor);
    }
    visitor->endVisit(this);
}

void ExceptionDeclarationAST::accept0( ASTVisitor *visitor )
{
    if ( visitor->visit(this) ) {
        accept(exceptionName, visitor);
    }
    visitor->endVisit(this);
}

void FunctionDeclarationAST::accept0( ASTVisitor *visitor )
{
    if ( visitor->visit(this) ) {
        accept(heading, visitor);
        accept(spec, visitor);
    }
    visitor->endVisit(this);
}

void FunctionDefintionAST::accept0( ASTVisitor *visitor )
{
    if ( visitor->visit(this) ) {
        accept(heading, visitor);
        accept(spec, visitor);
        accept(declareSection, visitor);
        accept(body, visitor);
    }
    visitor->endVisit(this);
}

void ProcedureDefinitionAST::accept0( ASTVisitor *visitor )
{
    if ( visitor->visit(this) ) {
        accept(heading, visitor);
        accept(declareSection, visitor);
        accept(body, visitor);
    }
    visitor->endVisit(this);
}

void ProcedureDeclarationAST::accept0( ASTVisitor *visitor )
{
    if ( visitor->visit(this) ) {
        accept(heading, visitor);
    }
    visitor->endVisit(this);
}

void SimpleDeclarationAST::accept0( ASTVisitor *visitor )
{
    if ( visitor->visit(this) ) {
        accept(name, visitor);
        accept(type, visitor);
    }
    visitor->endVisit(this);
}

void TypeDefinitionDeclarationAST::accept0( ASTVisitor *visitor )
{
    if ( visitor->visit(this) ) {
        accept(def, visitor);
    }
    visitor->endVisit(this);
}

void RecordTypeDefinitionAST::accept0( ASTVisitor *visitor )
{
    if ( visitor->visit(this) ) {
        accept(typeName, visitor);
        accept(field_list, visitor);
    }
    visitor->endVisit(this);
}

void RefCursorTypeDefinitionAST::accept0( ASTVisitor *visitor )
{
    if ( visitor->visit(this) ) {
        accept(typeName, visitor);
        accept(returnType, visitor);
    }
    visitor->endVisit(this);
}

void SubtypeDefinitionAST::accept0( ASTVisitor *visitor )
{
    if ( visitor->visit(this) ) {
        accept(subtypeName, visitor);
        accept(typeName, visitor);
        accept(constraintList, visitor);
    }
    visitor->endVisit(this);
}

void CollectionTypeDefinitionAST::accept0( ASTVisitor *visitor )
{
    if ( visitor->visit(this) ) {
        accept(typeName, visitor);
        accept(collectionType, visitor);
    }
    visitor->endVisit(this);
}

void TableCollectionTypeAST::accept0( ASTVisitor *visitor )
{
    if ( visitor->visit(this) ) {
        accept(elementType, visitor);
    }
    visitor->endVisit(this);
}

void ArrayCollectionTypeAST::accept0( ASTVisitor *visitor )
{
    if ( visitor->visit(this) ) {
        accept(size, visitor);
        accept(elementType, visitor);
    }
    visitor->endVisit(this);
}

void CursorSpecAST::accept0( ASTVisitor *visitor )
{
    if ( visitor->visit(this) ) {
        accept(cursorName, visitor);
        accept(params_list, visitor);
        accept(rowType, visitor);
    }
    visitor->endVisit(this);
}

void RowTypeAST::accept0( ASTVisitor *visitor )
{
    if ( visitor->visit(this) ) {
        accept(typeName, visitor);
    }
    visitor->endVisit(this);
}

void DataTypeByTypeNameAST::accept0( ASTVisitor *visitor )
{
    if ( visitor->visit(this) ) {
        accept(typeName, visitor);
    }
    visitor->endVisit(this);
}

void DataTypeByNameAST::accept0( ASTVisitor *visitor )
{
    if ( visitor->visit(this) ) {
        accept(variableName, visitor);
    }
    visitor->endVisit(this);
}

void DataTypeByTableRowAST::accept0( ASTVisitor *visitor )
{
    if ( visitor->visit(this) ) {
        accept(tableName, visitor);
    }
    visitor->endVisit(this);
}

void DataTypeByTableColumnAST::accept0( ASTVisitor *visitor )
{
    if ( visitor->visit(this) ) {
        accept(tableName, visitor);
        accept(columnName, visitor);
    }
    visitor->endVisit(this);
}

void ScalarDataTypeAST::accept0( ASTVisitor *visitor )
{
    if ( visitor->visit(this) ) {
        accept(type, visitor);
    }
    visitor->endVisit(this);
}

void CursorParameterDeclarationAST::accept0( ASTVisitor *visitor )
{
    if ( visitor->visit(this) ) {
        accept(paramName, visitor);
        accept(type, visitor);
        accept(defaultExpr, visitor);
    }
    visitor->endVisit(this);
}

void RecordFieldDeclarationAST::accept0( ASTVisitor *visitor )
{
    if ( visitor->visit(this) ) {
        accept(fieldName, visitor);
        accept(type, visitor);
        accept(defaultExpr, visitor);
    }
    visitor->endVisit(this);
}

void RoutineArgumentDeclarationAST::accept0( ASTVisitor *visitor )
{
    if ( visitor->visit(this) ) {
        accept(argName, visitor);
        accept(type, visitor);
        accept(defaultExpr, visitor);
    }
    visitor->endVisit(this);
}

void FunctionHeadingAST::accept0( ASTVisitor *visitor )
{
    if ( visitor->visit(this) ) {
        accept(functionName, visitor);
        accept(arg_list, visitor);
        accept(type, visitor);
    }
    visitor->endVisit(this);
}

void FunctionDeterministicOrPipelinedSpecAST::accept0( ASTVisitor *visitor )
{
    if ( visitor->visit(this) ) {
    }
    visitor->endVisit(this);
}

void FunctionCasheSpecAST::accept0( ASTVisitor *visitor )
{
    if ( visitor->visit(this) ) {
        accept(source_list, visitor);
    }
    visitor->endVisit(this);
}

void ProcedureHeadingAST::accept0( ASTVisitor *visitor )
{
    if ( visitor->visit(this) ) {
        accept(procedureName, visitor);
        accept(arg_list, visitor);
    }
    visitor->endVisit(this);
}

void NamedExceptionHandlerAST::accept0( ASTVisitor *visitor )
{
    if ( visitor->visit(this) ) {
        accept(name_list, visitor);
        accept(statements, visitor);
    }
    visitor->endVisit(this);
}

void OthersExceptionHandlerAST::accept0( ASTVisitor *visitor )
{
    if ( visitor->visit(this) ) {
        accept(statements, visitor);
    }
    visitor->endVisit(this);
}

void IntoClauseAST::accept0( ASTVisitor *visitor )
{
    if ( visitor->visit(this) ) {
        accept(names, visitor);
    }
    visitor->endVisit(this);
}

void BulkIntoClauseAST::accept0( ASTVisitor *visitor )
{
    if ( visitor->visit(this) ) {
        accept(names, visitor);
    }
    visitor->endVisit(this);
}

void UsingClauseAST::accept0( ASTVisitor *visitor )
{
    if ( visitor->visit(this) ) {
        accept(bind_list, visitor);
    }
    visitor->endVisit(this);
}

void UsingBindAST::accept0( ASTVisitor *visitor )
{
    if ( visitor->visit(this) ) {
        accept(bindExpr, visitor);
    }
    visitor->endVisit(this);
}

void DynamicReturningClauseAST::accept0( ASTVisitor *visitor )
{
    if ( visitor->visit(this) ) {
        accept(intoClause, visitor);
    }
    visitor->endVisit(this);
}

void ArrayIndexExpressionAST::accept0( ASTVisitor *visitor )
{
    if ( visitor->visit(this) ) {
        accept(indexExpr, visitor);
    }
    visitor->endVisit(this);
}

void ColumnIdentifierAST::accept0( ASTVisitor *visitor )
{
    if ( visitor->visit(this) ) {
        accept(schemaName, visitor);
        accept(tableName, visitor);
        accept(columnName, visitor);
    }
    visitor->endVisit(this);
}

void TableIdentifierAST::accept0( ASTVisitor *visitor )
{
    if ( visitor->visit(this) ) {
        accept(schemaName, visitor);
        accept(tableName, visitor);
    }
    visitor->endVisit(this);
}

void IndexIdentifierAST::accept0( ASTVisitor *visitor )
{
    if ( visitor->visit(this) ) {
        accept(schemaName, visitor);
        accept(indexName, visitor);
    }
    visitor->endVisit(this);
}

void TriggerIdentifierAST::accept0( ASTVisitor *visitor )
{
    if ( visitor->visit(this) ) {
        accept(schemaName, visitor);
        accept(triggerName, visitor);
    }
    visitor->endVisit(this);
}

void FunctionIdentifierAST::accept0( ASTVisitor *visitor )
{
    if ( visitor->visit(this) ) {
        accept(schemaName, visitor);
        accept(packageName, visitor);
        accept(functionName, visitor);
    }
    visitor->endVisit(this);
}

