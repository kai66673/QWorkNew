/**************************************************************************
**
** This file is part of Qt Creator
**
** Copyright (c) 2011 Nokia Corporation and/or its subsidiary(-ies).
**
** Contact: Nokia Corporation (info@qt.nokia.com)
**
**
** GNU Lesser General Public License Usage
**
** This file may be used under the terms of the GNU Lesser General Public
** License version 2.1 as published by the Free Software Foundation and
** appearing in the file LICENSE.LGPL included in the packaging of this file.
** Please review the following information to ensure the GNU Lesser General
** Public License version 2.1 requirements will be met:
** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html.
**
** In addition, as a special exception, Nokia gives you certain additional
** rights. These rights are described in the Nokia Qt LGPL Exception
** version 1.1, included in the file LGPL_EXCEPTION.txt in this package.
**
** Other Usage
**
** Alternatively, this file may be used in accordance with the terms and
** conditions contained in a signed written agreement between you and Nokia.
**
** If you have questions regarding the use of this file, please contact
** Nokia at qt-info@nokia.com.
**
**************************************************************************/


//
//  W A R N I N G
//  -------------
//
// This file is automatically generated.
// Changes will be lost.
//

#include "AST.h"
#include "ASTMatcher.h"

using namespace Sql;

ASTMatcher::ASTMatcher()
{ }

ASTMatcher::~ASTMatcher()
{ }

bool ASTMatcher::match( TranslationUnitAST *node, TranslationUnitAST *pattern )
{
    if ( !pattern->statement_list )
        pattern->statement_list = node->statement_list;
    else if ( !AST::match(node->statement_list, pattern->statement_list, this) )
        return false;

    return true;
}

bool ASTMatcher::match( InvalidStatementAST *node, InvalidStatementAST *pattern )
{
    pattern->first_token = node->first_token;

    return true;
}

bool ASTMatcher::match( UnknownStatementAST *node, UnknownStatementAST *pattern )
{
    pattern->first_token = node->first_token;
    pattern->last_token = node->last_token;

    return true;
}

bool ASTMatcher::match( SelectStatementAST *node, SelectStatementAST *pattern )
{
    if ( !pattern->select_core_list )
        pattern->select_core_list = node->select_core_list;
    else if ( !AST::match(node->select_core_list, pattern->select_core_list, this) )
        return false;

    if ( !pattern->select_compound_list )
        pattern->select_compound_list = node->select_compound_list;
    else if ( !AST::match(node->select_compound_list, pattern->select_compound_list, this) )
        return false;

    if ( !pattern->order_by_block )
        pattern->order_by_block = node->order_by_block;
    else if ( !AST::match(node->order_by_block, pattern->order_by_block, this) )
        return false;

    if ( !pattern->limit_to_block )
        pattern->limit_to_block = node->limit_to_block;
    else if ( !AST::match(node->limit_to_block, pattern->limit_to_block, this) )
        return false;

    pattern->last_token = node->last_token;

    return true;
}

bool ASTMatcher::match( SelectCoreAST *node, SelectCoreAST *pattern )
{
    pattern->select_token = node->select_token;
    pattern->select_spec_token = node->select_spec_token;

    if ( !pattern->columnList )
        pattern->columnList = node->columnList;
    else if ( !AST::match(node->columnList, pattern->columnList, this) )
        return false;

    pattern->from_token = node->from_token;

    if ( !pattern->joinSource )
        pattern->joinSource = node->joinSource;
    else if ( !AST::match(node->joinSource, pattern->joinSource, this) )
        return false;

    pattern->where_token = node->where_token;

    if ( !pattern->whereExpr )
        pattern->whereExpr = node->whereExpr;
    else if ( !AST::match(node->whereExpr, pattern->whereExpr, this) )
        return false;

    if ( !pattern->groupBy )
        pattern->groupBy = node->groupBy;
    else if ( !AST::match(node->groupBy, pattern->groupBy, this) )
        return false;

    return true;
}

bool ASTMatcher::match( SelectCompoundUnionAST *node, SelectCompoundUnionAST *pattern )
{
    pattern->union_token = node->union_token;
    pattern->union_spec_token = node->union_spec_token;

    return true;
}

bool ASTMatcher::match( SelectCompoundIntersectAST *node, SelectCompoundIntersectAST *pattern )
{
    pattern->intersect_token = node->intersect_token;

    return true;
}

bool ASTMatcher::match( SelectCompoundExceptAST *node, SelectCompoundExceptAST *pattern )
{
    pattern->except_token = node->except_token;

    return true;
}

bool ASTMatcher::match( SelectCompoundMinusAST *node, SelectCompoundMinusAST *pattern )
{
    pattern->minus_token = node->minus_token;

    return true;
}

bool ASTMatcher::match( OrderByBlockAST *node, OrderByBlockAST *pattern )
{
    pattern->order_token = node->order_token;
    pattern->by_token = node->by_token;

    if ( !pattern->term_list )
        pattern->term_list = node->term_list;
    else if ( !AST::match(node->term_list, pattern->term_list, this) )
        return false;

    return true;
}

bool ASTMatcher::match( LimitToBlockAST *node, LimitToBlockAST *pattern )
{
    pattern->limit_token = node->limit_token;
    pattern->to_token = node->to_token;

    if ( !pattern->expr )
        pattern->expr = node->expr;
    else if ( !AST::match(node->expr, pattern->expr, this) )
        return false;

    pattern->row_token = node->row_token;

    return true;
}

bool ASTMatcher::match( OrderingTermAST *node, OrderingTermAST *pattern )
{
    if ( !pattern->expr )
        pattern->expr = node->expr;
    else if ( !AST::match(node->expr, pattern->expr, this) )
        return false;

    pattern->asc_or_desc_token = node->asc_or_desc_token;

    return true;
}

bool ASTMatcher::match( SchemaNameAST *node, SchemaNameAST *pattern )
{
    pattern->name_token = node->name_token;
    return true;
}

bool ASTMatcher::match( TableNameAST *node, TableNameAST *pattern )
{
    pattern->name_token = node->name_token;
    return true;
}

bool ASTMatcher::match( TableAliasAST *node, TableAliasAST *pattern )
{
    pattern->name_token = node->name_token;
    return true;
}

bool ASTMatcher::match( ColumnNameAST *node, ColumnNameAST *pattern )
{
    if ( !pattern->schemaName )
        pattern->schemaName = node->schemaName;
    else if ( !AST::match(node->schemaName, pattern->schemaName, this) )
        return false;

    if ( !pattern->tableOfColumn )
        pattern->tableOfColumn = node->tableOfColumn;
    else if ( !AST::match(node->tableOfColumn, pattern->tableOfColumn, this) )
        return false;

    pattern->name_token = node->name_token;

    return true;
}

bool ASTMatcher::match( ParamNameAST *node, ParamNameAST *pattern )
{
    pattern->param_prefix_token = node->param_prefix_token;
    pattern->name_token = node->name_token;

    return true;
}

bool ASTMatcher::match( LabelNameAST *node, LabelNameAST *pattern )
{
    pattern->name_token = node->name_token;

    return true;
}

bool ASTMatcher::match( ColumnAliasAST *node, ColumnAliasAST *pattern )
{
    pattern->name_token = node->name_token;
    return true;
}

bool ASTMatcher::match( FunctionNameAST *node, FunctionNameAST *pattern )
{
    pattern->name_token = node->name_token;
    return true;
}

bool ASTMatcher::match(ViewNameAST *node, ViewNameAST *pattern)
{
    pattern->name_token = node->name_token;
    return true;
}

bool ASTMatcher::match( IndexNameAST *node, IndexNameAST *pattern )
{
    pattern->name_token = node->name_token;
    return true;
}

bool ASTMatcher::match( TriggerNameAST *node, TriggerNameAST *pattern )
{
    pattern->name_token = node->name_token;
    return true;
}

bool ASTMatcher::match( ConstraintNameAST *node, ConstraintNameAST *pattern )
{
    pattern->name_token = node->name_token;
    return true;
}

bool ASTMatcher::match( SchemaTableNameAST *node, SchemaTableNameAST *pattern )
{
    if ( !pattern->schemaName )
        pattern->schemaName = node->schemaName;
    else if ( !AST::match(node->schemaName, pattern->schemaName, this) )
        return false;

    pattern->dot_token = node->dot_token;

    if ( !pattern->tableName )
        pattern->tableName = node->tableName;
    else if ( !AST::match(node->tableName, pattern->tableName, this) )
        return false;

    return true;
}

bool ASTMatcher::match( SchemaIndexNameAST *node, SchemaIndexNameAST *pattern )
{
    if ( !pattern->schemaName )
        pattern->schemaName = node->schemaName;
    else if ( !AST::match(node->schemaName, pattern->schemaName, this) )
        return false;

    pattern->dot_token = node->dot_token;

    if ( !pattern->indexName )
        pattern->indexName = node->indexName;
    else if ( !AST::match(node->indexName, pattern->indexName, this) )
        return false;

    return true;
}

bool ASTMatcher::match( SchemaTriggerNameAST *node, SchemaTriggerNameAST *pattern )
{
    if ( !pattern->schemaName )
        pattern->schemaName = node->schemaName;
    else if ( !AST::match(node->schemaName, pattern->schemaName, this) )
        return false;

    pattern->dot_token = node->dot_token;

    if ( !pattern->triggerName )
        pattern->triggerName = node->triggerName;
    else if ( !AST::match(node->triggerName, pattern->triggerName, this) )
        return false;

    return true;
}

bool ASTMatcher::match( StarResultColumnAST *node, StarResultColumnAST *pattern )
{
    if ( !pattern->schemaTableName )
        pattern->schemaTableName = node->schemaTableName;
    else if ( !AST::match(node->schemaTableName, pattern->schemaTableName, this) )
        return false;

    pattern->dot_token = node->dot_token;
    pattern->star_token = node->star_token;

    return true;
}

bool ASTMatcher::match( ExprResultColumnAST *node, ExprResultColumnAST *pattern )
{
    if ( !pattern->expr )
        pattern->expr = node->expr;
    else if ( !AST::match(node->expr, pattern->expr, this) )
        return false;

    pattern->as_token = node->as_token;

    if ( !pattern->columnAlias )
        pattern->columnAlias = node->columnAlias;
    else if ( !AST::match(node->columnAlias, pattern->columnAlias, this) )
        return false;

    return true;
}

bool ASTMatcher::match( SubQueryAST *node, SubQueryAST *pattern )
{
    pattern->lparen_token = node->lparen_token;

    if ( !pattern->selectStatement )
        pattern->selectStatement = node->selectStatement;
    else if ( !AST::match(node->selectStatement, pattern->selectStatement, this) )
        return false;

    pattern->rparen_token = node->rparen_token;

    return true;
}

bool ASTMatcher::match( DirectSingleSourceAST *node, DirectSingleSourceAST *pattern )
{
    if ( !pattern->schemaTableName )
        pattern->schemaTableName = node->schemaTableName;
    else if ( !AST::match(node->schemaTableName, pattern->schemaTableName, this) )
        return false;

    pattern->as_token = node->as_token;

    if ( !pattern->tableAlias )
        pattern->tableAlias = node->tableAlias;
    else if ( !AST::match(node->tableAlias, pattern->tableAlias, this) )
        return false;

    return true;
}

bool ASTMatcher::match( SubQuerySingleSourceAST *node, SubQuerySingleSourceAST *pattern )
{
    if ( !pattern->subQuery )
        pattern->subQuery = node->subQuery;
    else if ( !AST::match(node->subQuery, pattern->subQuery, this) )
        return false;

    pattern->as_token = node->as_token;

    if ( !pattern->tableAlias )
        pattern->tableAlias = node->tableAlias;
    else if ( !AST::match(node->tableAlias, pattern->tableAlias, this) )
        return false;

    return true;
}

bool ASTMatcher::match( JoinOpAST *node, JoinOpAST *pattern )
{
    pattern->first_token = node->first_token;
    pattern->last_token = node->last_token;

    return true;
}

bool ASTMatcher::match( JoinConstraintAST *node, JoinConstraintAST *pattern )
{
    pattern->on_token = node->on_token;

    if ( !pattern->expr )
        pattern->expr = node->expr;
    else if ( !AST::match(node->expr, pattern->expr, this) )
        return false;

    return true;
}

bool ASTMatcher::match( JoinItemAST *node, JoinItemAST *pattern )
{
    if ( !pattern->joinOp )
        pattern->joinOp = node->joinOp;
    else if ( !AST::match(node->joinOp, pattern->joinOp, this) )
        return false;

    if ( !pattern->singleSource )
        pattern->singleSource = node->singleSource;
    else if ( !AST::match(node->singleSource, pattern->singleSource, this) )
        return false;

    if ( !pattern->joinConstraint )
        pattern->joinConstraint = node->joinConstraint;
    else if ( !AST::match(node->joinConstraint, pattern->joinConstraint, this) )
        return false;

    return true;
}

bool ASTMatcher::match( JoinSourceAST *node, JoinSourceAST *pattern )
{
    if ( !pattern->firstSource )
        pattern->firstSource = node->firstSource;
    else if ( !AST::match(node->firstSource, pattern->firstSource, this) )
        return false;

    if ( !pattern->source_list )
        pattern->source_list = node->source_list;
    else if ( !AST::match(node->source_list, pattern->source_list, this) )
        return false;

    return true;
}

bool ASTMatcher::match( GroupByBlockAST *node, GroupByBlockAST *pattern )
{
    pattern->group_token = node->group_token;
    pattern->by_token = node->by_token;

    if ( !pattern->group_items_list )
        pattern->group_items_list = node->group_items_list;
    else if ( !AST::match(node->group_items_list, pattern->group_items_list, this) )
        return false;

    pattern->having_token = node->having_token;

    if ( !pattern->havingExpr )
        pattern->havingExpr = node->havingExpr;
    else if ( !AST::match(node->havingExpr, pattern->havingExpr, this) )
        return false;

    return true;
}

bool ASTMatcher::match( DeleteStatementAST *node, DeleteStatementAST *pattern )
{
    pattern->delete_token = node->delete_token;
    pattern->from_token = node->from_token;

    if ( !pattern->source )
        pattern->source = node->source;
    else if ( !AST::match(node->source, pattern->source, this) )
        return false;

    pattern->where_token = node->where_token;

    if ( !pattern->whereExpr )
        pattern->whereExpr = node->whereExpr;
    else if ( !AST::match(node->whereExpr, pattern->whereExpr, this))
        return false;

    return true;
}

bool ASTMatcher::match( InsertStatementAST *node, InsertStatementAST *pattern )
{
    pattern->insert_token = node->insert_token;
    pattern->into_token = node->into_token;

    if ( !pattern->source )
        pattern->source = node->source;
    else if ( !AST::match(node->source, pattern->source, this) )
        return false;

    pattern->lparen_columns_token = node->lparen_columns_token;

    if ( !pattern->columns_list )
        pattern->columns_list = node->columns_list;
    else if ( !AST::match(node->columns_list, pattern->columns_list, this) )
        return false;

    pattern->rparen_columns_token = node->rparen_columns_token;

    if ( !pattern->insClause )
        pattern->insClause = node->insClause;
    else if ( !AST::match(node->insClause, pattern->insClause, this) )
        return false;

    return true;
}

bool ASTMatcher::match( InsertClauseAsValuesAST *node, InsertClauseAsValuesAST *pattern )
{
    pattern->values_token = node->values_token;
    pattern->lparen_token = node->lparen_token;

    if ( !pattern->val_list )
        pattern->val_list = node->val_list;
    else if ( !AST::match(node->val_list, pattern->val_list, this) )
        return false;

    pattern->rparen_token = node->rparen_token;

    return true;
}

bool ASTMatcher::match( InsertClauseAsSelectAST *node, InsertClauseAsSelectAST *pattern )
{
    if ( !pattern->selectStatement )
        pattern->selectStatement = node->selectStatement;
    else if ( !AST::match(node->selectStatement, pattern->selectStatement, this) )
        return false;

    return true;
}

bool ASTMatcher::match( UpdateStatementAST *node, UpdateStatementAST *pattern )
{
    pattern->update_token = node->update_token;

    if ( !pattern->source )
        pattern->source = node->source;
    else if ( !AST::match(node->source, pattern->source, this) )
        return false;

    pattern->set_token = node->set_token;

    if ( !pattern->upd_list )
        pattern->upd_list = node->upd_list;
    else if ( !AST::match(node->upd_list, pattern->upd_list, this) )
        return false;

    pattern->where_token = node->where_token;

    if ( !pattern->whereExpr )
        pattern->whereExpr = node->whereExpr;
    else if ( !AST::match(node->whereExpr, pattern->whereExpr, this) )
        return false;

    return true;
}

bool ASTMatcher::match(CharacterTypeAST *node, CharacterTypeAST *pattern)
{
    pattern->type_token = node->type_token;
    pattern->lparen_token = node->lparen_token;
    pattern->size_token = node->size_token;
    pattern->rparen_token = node->rparen_token;

    return true;
}

bool ASTMatcher::match( NumberTypeAST *node, NumberTypeAST *pattern )
{
    pattern->type_token = node->type_token;
    pattern->lparen_token = node->lparen_token;
    pattern->size_token = node->size_token;
    pattern->comma_token = node->comma_token;
    pattern->prec_token = node->prec_token;
    pattern->rparen_token = node->rparen_token;

    return true;
}

bool ASTMatcher::match( SimpleTypeAST *node, SimpleTypeAST *pattern )
{
    pattern->type_token = node->type_token;

    return true;
}

bool ASTMatcher::match( CreateTableStatementAST *node, CreateTableStatementAST *pattern )
{
    pattern->create_token = node->create_token;
    pattern->table_token = node->table_token;

    if ( !pattern->schemaTableName )
        pattern->schemaTableName = node->schemaTableName;
    else if ( !AST::match(node->schemaTableName, pattern->schemaTableName, this) )
        return false;

    if ( !pattern->tableClause )
        pattern->tableClause = node->tableClause;
    else if ( !AST::match(node->tableClause, pattern->tableClause, this) )
        return false;

    return true;
}

bool ASTMatcher::match(CreateTableDirectClauseAST *node, CreateTableDirectClauseAST *pattern)
{
    pattern->lparen_token = node->lparen_token;

    if ( !pattern->column_def_list )
        pattern->column_def_list = node->column_def_list;
    else if ( !AST::match(node->column_def_list, pattern->column_def_list, this) )
        return false;

    if ( !pattern->constraintList )
        pattern->constraintList = node->constraintList;
    else if ( !AST::match(node->constraintList, pattern->constraintList, this) )
        return false;

    pattern->rparen_token = node->rparen_token;

    return true;
}

bool ASTMatcher::match(CreateTableAsSelectClauseAST *node, CreateTableAsSelectClauseAST *pattern)
{
    pattern->as_token = node->as_token;

    if ( !pattern->selectStatement )
        pattern->selectStatement = node->selectStatement;
    else if ( !AST::match(node->selectStatement, pattern->selectStatement, this) )
        return false;

    return true;
}

bool ASTMatcher::match(CreateTriggerRefClauseAST *node, CreateTriggerRefClauseAST *pattern)
{
    pattern->referencing_token = node->referencing_token;
    pattern->new_token = node->new_token;
    pattern->asn_token = node->asn_token;

    if ( !pattern->newAlias )
        pattern->newAlias = node->newAlias;
    else if ( !AST::match(node->newAlias, pattern->newAlias, this) )
        return false;

    pattern->old_token = node->old_token;
    pattern->aso_token = node->aso_token;

    if ( !pattern->oldAlias )
        pattern->oldAlias = node->oldAlias;
    else if ( !AST::match(node->oldAlias, pattern->oldAlias, this) )
        return false;

    return true;
}

bool ASTMatcher::match( CreateRdbTriggerBodyAST *node, CreateRdbTriggerBodyAST *pattern )
{
    if ( !pattern->item_list )
        pattern->item_list = node->item_list;
    else if ( !AST::match(node->item_list, pattern->item_list, this) )
        return false;

    return true;
}

bool ASTMatcher::match( CreateRdbTriggerBodyItemAST *node, CreateRdbTriggerBodyItemAST *pattern )
{
    pattern->when_token = node->when_token;
    pattern->lparen_when_token = node->lparen_when_token;

    if ( !pattern->whenExpr )
        pattern->whenExpr = node->whenExpr;
    else if ( !AST::match(node->whenExpr, pattern->whenExpr, this) )
        return false;

    pattern->rparen_when_token = node->rparen_when_token;
    pattern->lparen_token = node->lparen_token;

    if ( !pattern->stat_list )
        pattern->stat_list = node->stat_list;
    else if ( !AST::match(node->stat_list, pattern->stat_list, this) )
        return false;

    pattern->rparen_token = node->rparen_token;
    pattern->for_token = node->for_token;
    pattern->each_token = node->each_token;
    pattern->row_or_statement_token = node->row_or_statement_token;

    return true;
}

bool ASTMatcher::match( CreateViewStatementAST *node, CreateViewStatementAST *pattern )
{
    pattern->create_token = node->create_token;
    pattern->view_token = node->view_token;

    if ( !pattern->schemaViewName )
        pattern->schemaViewName = node->schemaViewName;
    else if ( !AST::match(node->schemaViewName, pattern->schemaViewName, this) )
        return false;

    pattern->as_token = node->as_token;

    if ( !pattern->selectStatement )
        pattern->selectStatement = node->selectStatement;
    else if ( !AST::match(node->selectStatement, pattern->selectStatement, this) )
        return false;

    return true;
}

bool ASTMatcher::match( CreateIndexStatementAST *node, CreateIndexStatementAST *pattern )
{
    pattern->create_token = node->create_token;
    pattern->unique_token = node->unique_token;
    pattern->index_token = node->index_token;

    if ( !pattern->schemaIndexName )
        pattern->schemaIndexName = node->schemaIndexName;
    else if ( !AST::match(node->schemaIndexName, pattern->schemaIndexName, this) )
        return false;

    pattern->on_token = node->on_token;

    if ( !pattern->schemaTableName )
        pattern->schemaTableName = node->schemaTableName;
    else if ( !AST::match(node->schemaTableName, pattern->schemaTableName, this) )
        return false;

    pattern->lparen_token = node->lparen_token;

    if ( !pattern->columns_list )
        pattern->columns_list = node->columns_list;
    else if ( !AST::match(node->columns_list, pattern->columns_list, this) )
        return false;

    pattern->rparen_token = node->rparen_token;

    return true;
}

bool ASTMatcher::match( CreateTriggerStatementAST *node, CreateTriggerStatementAST *pattern )
{
    pattern->create_token = node->create_token;
    pattern ->trigger_token = node->create_token;

    if ( !pattern->schemaTriggerName )
        pattern->schemaTriggerName = node->schemaTriggerName;
    else if ( !AST::match(node->schemaTriggerName, pattern->schemaTriggerName, this) )
        return false;

    pattern->before_or_after_token = node->before_or_after_token;
    pattern->action_token = node->action_token;
    pattern->of_token = node->of_token;

    if ( !pattern->col_list )
        pattern->col_list = node->col_list;
    else if ( !AST::match(node->col_list, pattern->col_list, this) )
        return false;

    pattern->on_token = node->on_token;

    if ( !pattern->schemaTableName )
        pattern->schemaTableName = node->schemaTableName;
    else if ( !AST::match(node->schemaTableName, pattern->schemaTableName, this) )
        return false;

    if ( !pattern->triggerRefClause )
        pattern->triggerRefClause = node->triggerRefClause;
    else if ( !AST::match(node->triggerRefClause, pattern->triggerRefClause, this) )
        return false;

    if ( !pattern->triggerBody )
        pattern->triggerBody = node->triggerBody;
    else if ( !AST::match(node->triggerBody, pattern->triggerBody, this) )
        return false;

    return true;
}

bool ASTMatcher::match( ColumnDefinitionAST *node, ColumnDefinitionAST *pattern )
{
    if ( !pattern->columnName )
        pattern->columnName = node->columnName;
    else if ( !AST::match(node->columnName, pattern->columnName, this) )
        return false;

    if ( !pattern->columnType )
        pattern->columnType = node->columnType;
    else if ( !AST::match(node->columnType, pattern->columnType, this) )
        return false;

    pattern->default_token = node->default_token;

    if ( !pattern->defaultExpr )
        pattern->defaultExpr = node->defaultExpr;
    else if ( !AST::match(node->defaultExpr, pattern->defaultExpr, this) )
        return false;

    if ( !pattern->constraintList )
        pattern->constraintList = node->constraintList;
    else if ( !AST::match(node->constraintList, pattern->constraintList, this) )
        return false;

    return true;
}

bool ASTMatcher::match( UniqueOrPkTableConstraintAST *node, UniqueOrPkTableConstraintAST *pattern )
{
    pattern->constraint_token = node->constraint_token;

    if ( !pattern->constraintName )
        pattern->constraintName = node->constraintName;
    else if ( !AST::match(node->constraintName, pattern->constraintName, this) )
        return false;

    pattern->unique_or_primary_token = node->unique_or_primary_token;
    pattern->key_token = node->unique_or_primary_token;
    pattern->lparen_token = node->lparen_token;

    if ( !pattern->column_list )
        pattern->column_list = node->column_list;
    else if ( !AST::match(node->column_list, pattern->column_list, this) )
        return false;

    pattern->rparen_token = node->rparen_token;

    return true;
}

bool ASTMatcher::match( CheckTableConstraintAST *node, CheckTableConstraintAST *pattern )
{
    pattern->constraint_token = node->constraint_token;

    if ( !pattern->constraintName )
        pattern->constraintName = node->constraintName;
    else if ( !AST::match(node->constraintName, pattern->constraintName, this) )
        return false;

    pattern->check_token = node->check_token;
    pattern->lparen_token = node->lparen_token;

    if ( !pattern->checkExpr )
        pattern->checkExpr = node->checkExpr;
    else if ( !AST::match(node->checkExpr, pattern->checkExpr, this) )
        return false;

    pattern->rparen_token = node->rparen_token;

    return true;
}

bool ASTMatcher::match( FkTableConstraintAST *node, FkTableConstraintAST *pattern )
{
    pattern->constraint_token = node->constraint_token;

    if ( !pattern->constraintName )
        pattern->constraintName = node->constraintName;
    else if ( !AST::match(node->constraintName, pattern->constraintName, this) )
        return false;

    pattern->foreign_token = node->foreign_token;
    pattern->key_token = node->key_token;
    pattern->lparen_token = node->lparen_token;

    if ( !pattern->col_list )
        pattern->col_list = node->col_list;
    else if ( !AST::match(node->col_list, pattern->col_list, this) )
        return false;

    pattern->rparen_token = node->rparen_token;

    if ( !pattern->refClause )
        pattern->refClause = node->refClause;
    else if ( !AST::match(node->refClause, pattern->refClause, this) )
        return false;

    return true;
}

bool ASTMatcher::match( FkReferencesClauseAST *node, FkReferencesClauseAST *pattern )
{
    pattern->references_token = node->references_token;

    if ( !pattern->refSchemaTableName )
        pattern->refSchemaTableName = node->refSchemaTableName;
    else if ( !AST::match(node->refSchemaTableName, pattern->refSchemaTableName, this) )
        return false;

    pattern->ref_lparen_token = node->ref_lparen_token;

    if ( !pattern->ref_col_list )
        pattern->ref_col_list = node->ref_col_list;
    else if ( !AST::match(node->ref_col_list, pattern->ref_col_list, this) )
        return false;

    pattern->ref_rparen_token = node->ref_rparen_token;

    return true;
}

bool ASTMatcher::match( PkColumnConstraintAST *node, PkColumnConstraintAST *pattern )
{
    pattern->constraint_token = node->constraint_token;

    if ( !pattern->constraintName )
        pattern->constraintName = node->constraintName;
    else if ( !AST::match(node->constraintName, pattern->constraintName, this) )
        return false;

    pattern->primary_token = node->primary_token;
    pattern->key_token = node->key_token;
    pattern->asc_or_desc_token = node->asc_or_desc_token;

    return true;
}

bool ASTMatcher::match( NotNullColumnConstraintAST *node, NotNullColumnConstraintAST *pattern )
{
    pattern->constraint_token = node->constraint_token;

    if ( !pattern->constraintName )
        pattern->constraintName = node->constraintName;
    else if ( !AST::match(node->constraintName, pattern->constraintName, this) )
        return false;

    pattern->not_token = node->not_token;
    pattern->null_token = node->null_token;

    return true;
}

bool ASTMatcher::match( UniqueColumnConstraintAST *node, UniqueColumnConstraintAST *pattern )
{
    pattern->constraint_token = node->constraint_token;

    if ( !pattern->constraintName )
        pattern->constraintName = node->constraintName;
    else if ( !AST::match(node->constraintName, pattern->constraintName, this) )
        return false;

    pattern->unique_token = node->unique_token;

    return true;
}

bool ASTMatcher::match( CheckColumnConstraintAST *node, CheckColumnConstraintAST *pattern )
{
    pattern->constraint_token = node->constraint_token;

    if ( !pattern->constraintName )
        pattern->constraintName = node->constraintName;
    else if ( !AST::match(node->constraintName, pattern->constraintName, this) )
        return false;

    pattern->check_token = node->check_token;
    pattern->lparen_token = node->lparen_token;

    if ( !pattern->checkExpr )
        pattern->checkExpr = node->checkExpr;
    else if ( !AST::match(node->checkExpr, pattern->checkExpr, this) )
        return false;

    pattern->rparen_token = node->rparen_token;

    return true;
}

bool ASTMatcher::match(ReferencesColumnConstraintAST *node, ReferencesColumnConstraintAST *pattern)
{
    pattern->constraint_token = node->constraint_token;

    if ( !pattern->constraintName )
        pattern->constraintName = node->constraintName;
    else if ( !AST::match(node->constraintName, pattern->constraintName, this) )
        return false;

    if ( !pattern->refClause )
        pattern->refClause = node->refClause;
    else if ( !AST::match(node->refClause, pattern->refClause, this) )
        return false;

    return true;
}

bool ASTMatcher::match( SortedColumnNameAST *node, SortedColumnNameAST *pattern )
{
    if ( !pattern->columnName )
        pattern->columnName = node->columnName;
    else if ( !AST::match(node->columnName, pattern->columnName, this) )
        return false;

    pattern->asc_or_desc_token = node->asc_or_desc_token;

    return true;
}

bool ASTMatcher::match( DropTableStatementAST *node, DropTableStatementAST *pattern )
{
    pattern->drop_token = node->drop_token;
    pattern->table_token = node->table_token;

    if ( !pattern->schemaTableName )
        pattern->schemaTableName = node->schemaTableName;
    else if ( !AST::match(node->schemaTableName, pattern->schemaTableName, this) )
        return false;

    return true;
}

bool ASTMatcher::match( DropViewStatementAST *node, DropViewStatementAST *pattern )
{
    pattern->drop_token = node->drop_token;
    pattern->view_token = node->view_token;

    if ( !pattern->schemaViewName )
        pattern->schemaViewName = node->schemaViewName;
    else if ( !AST::match(node->schemaViewName, pattern->schemaViewName, this) )
        return false;

    return true;
}

bool ASTMatcher::match( DropIndexStatementAST *node, DropIndexStatementAST *pattern )
{
    pattern->drop_token = node->drop_token;
    pattern->index_token = node->index_token;

    if ( !pattern->schemaIndexName )
        pattern->schemaIndexName = node->schemaIndexName;
    else if ( !AST::match(node->schemaIndexName, pattern->schemaIndexName, this) )
        return false;

    return true;
}

bool ASTMatcher::match(DropTriggerStatementAST *node, DropTriggerStatementAST *pattern)
{
    pattern->drop_token = node->drop_token;
    pattern->trigger_token = node->trigger_token;

    if ( !pattern->schemaTriggerName )
        pattern->schemaTriggerName = node->schemaTriggerName;
    else if ( !AST::match(node->schemaTriggerName, pattern->schemaTriggerName, this) )
        return false;

    return true;
}

bool ASTMatcher::match( TruncateStatementAST *node, TruncateStatementAST *pattern )
{
    pattern->truncate_token = node->truncate_token;
    pattern->table_token = node->table_token;

    if ( !pattern->schemaTableName )
        pattern->schemaTableName = node->schemaTableName;
    else if ( !AST::match(node->schemaTableName, pattern->schemaTableName, this) )
        return false;

    return true;
}

bool ASTMatcher::match( AlterTableStatementAST *node, AlterTableStatementAST *pattern )
{
    pattern->alter_token = node->alter_token;
    pattern->table_token = node->table_token;

    if ( !pattern->schemaTableName )
        pattern->schemaTableName = node->schemaTableName;
    else if ( !AST::match(node->schemaTableName, pattern->schemaTableName, this) )
        return false;

    if ( !pattern->alterTableClause )
        pattern->alterTableClause = node->alterTableClause;
    else if ( !AST::match(node->alterTableClause, pattern->alterTableClause, this) )
        return false;

    return true;
}

bool ASTMatcher::match( AlterTableDropClauseAST *node, AlterTableDropClauseAST *pattern )
{
    pattern->drop_token = node->drop_token;
    pattern->drop_object_type_token = node->drop_object_type_token;

    if ( !pattern->dropObjectName )
        pattern->dropObjectName = node->dropObjectName;
    else if ( !AST::match(node->dropObjectName, pattern->dropObjectName, this) )
        return false;

    return true;
}

bool ASTMatcher::match( AlterTableAddConstraintClauseAST *node, AlterTableAddConstraintClauseAST *pattern )
{
    pattern->add_token = node->add_token;

    if ( !pattern->constraint )
        pattern->constraint = node->constraint;
    else if ( !AST::match(node->constraint, pattern->constraint, this) )
        return false;

    return true;
}

bool ASTMatcher::match( AlterTableModifyColumnClauseAST *node, AlterTableModifyColumnClauseAST *pattern )
{
    pattern->modify_token = node->modify_token;
    pattern->column_token = node->column_token;

    if ( !pattern->column )
        pattern->column = node->column;
    else if ( !AST::match(node->column, pattern->column, this) )
        return false;

    return true;
}

bool ASTMatcher::match( AlterTableAddColumnClauseAST *node, AlterTableAddColumnClauseAST *pattern )
{
    pattern->add_token = node->add_token;
    pattern->column_token = node->column_token;

    if ( !pattern->column )
        pattern->column = node->column;
    else if ( !AST::match(node->column, pattern->column, this) )
        return false;

    return true;
}

bool ASTMatcher::match( CommentOnTableStatementAST *node, CommentOnTableStatementAST *pattern )
{
    pattern->comment_token = node->comment_token;
    pattern->on_token = node->on_token;
    pattern->table_token = node->table_token;

    if ( !pattern->schemaTableName )
        pattern->schemaTableName = node->schemaTableName;
    else if ( !AST::match(node->schemaTableName, pattern->schemaTableName, this) )
        return false;

    pattern->is_token = node->is_token;

    if ( !pattern->comment )
        pattern->comment = node->comment;
    else if ( !AST::match(node->comment, pattern->comment, this) )
        return false;

    return true;
}

bool ASTMatcher::match( CommentOnColumnStatementAST *node, CommentOnColumnStatementAST *pattern )
{
    pattern->comment_token = node->comment_token;
    pattern->on_token = node->on_token;
    pattern->column_token = node->column_token;

    if ( !pattern->schemaTableName )
        pattern->schemaTableName = node->schemaTableName;
    else if ( !AST::match(node->schemaTableName, pattern->schemaTableName, this) )
        return false;

    pattern->dot_token = node->dot_token;

    if ( !pattern->column )
        pattern->column = node->column;
    else if ( !AST::match(node->column, pattern->column, this) )
        return false;

    pattern->is_token = node->is_token;

    if ( !pattern->comment )
        pattern->comment = node->comment;
    else if ( !AST::match(node->comment, pattern->comment, this) )
        return false;

    return true;
}

bool ASTMatcher::match( CommitStatementAST *node, CommitStatementAST *pattern )
{
    pattern->commit_token = node->commit_token;

    return true;
}

bool ASTMatcher::match( CallStatementAST *node, CallStatementAST *pattern )
{
    pattern->call_token = node->call_token;

    if ( !pattern->funcName )
        pattern->funcName = node->funcName;
    else if ( !AST::match(node->funcName, pattern->funcName, this) )
        return false;

    pattern->lparen_token = node->lparen_token;

    if ( !pattern->arg_list )
        pattern->arg_list = node->arg_list;
    else if ( !AST::match(node->arg_list, pattern->arg_list, this) )
        return false;

    pattern->rparen_token = node->rparen_token;

    return true;
}

bool ASTMatcher::match( RollbackStatementAST *node, RollbackStatementAST *pattern )
{
    pattern->rollback_token = node->rollback_token;

    return true;
}

bool ASTMatcher::match( CompoundValueExpressionAST *node, CompoundValueExpressionAST *pattern )
{
    pattern->lparen_token = node->lparen_token;

    if ( !pattern->valExpr )
        pattern->valExpr = node->valExpr;
    else if ( !AST::match(node->valExpr, pattern->valExpr, this) )
        return false;

    pattern->rparen_token = node->rparen_token;

    return true;
}

bool ASTMatcher::match( UnaryValueExpressionAST *node, UnaryValueExpressionAST *pattern )
{
    pattern->op_token = node->op_token;

    if ( !pattern->valExpr )
        pattern->valExpr = node->valExpr;
    else if ( !AST::match(node->valExpr, pattern->valExpr, this) )
        return false;

    return true;
}

bool ASTMatcher::match( BinaryValueExpressionAST *node, BinaryValueExpressionAST *pattern )
{
    if ( !pattern->lvExpr )
        pattern->lvExpr = node->lvExpr;
    else if ( !AST::match(node->lvExpr, pattern->lvExpr, this) )
        return false;

    pattern->op_token = node->op_token;

    if ( !pattern->rvExpr )
        pattern->rvExpr = node->rvExpr;
    else if ( !AST::match(node->rvExpr, pattern->rvExpr, this) )
        return false;

    return true;
}

bool ASTMatcher::match( ColumnExpressionAST *node, ColumnExpressionAST *pattern )
{
    if ( !pattern->column )
        pattern->column = node->column;
    else if ( !AST::match(node->column, pattern->column, this) )
        return false;

    return true;
}

bool ASTMatcher::match( LiteralExpressionAST *node, LiteralExpressionAST *pattern )
{
    pattern->liter_token = node->liter_token;

    return true;
}

bool ASTMatcher::match( NumericExpressionAST *node, NumericExpressionAST *pattern )
{
    pattern->numeric_token = node->numeric_token;

    return true;
}

bool ASTMatcher::match( FunctionExpressionAST *node, FunctionExpressionAST *pattern )
{
    if ( !pattern->functionName )
        pattern->functionName = node->functionName;
    else if ( !AST::match(node->functionName, pattern->functionName, this) )
        return false;

    pattern->lparen_token = node->lparen_token;

    if ( !pattern->arg_list )
        pattern->arg_list = node->arg_list;
    else if ( !AST::match(node->arg_list, pattern->arg_list, this) )
        return false;

    pattern->rparen_token = node->rparen_token;

    return true;
}

bool ASTMatcher::match( CastFunctionAST *node, CastFunctionAST *pattern )
{
    pattern->cast_token = node->cast_token;
    pattern->lparen_token = node->lparen_token;

    if ( !pattern->castExpr )
        pattern->castExpr = node->castExpr;
    else if ( !AST::match(node->castExpr, pattern->castExpr, this) )
        return false;

    pattern->as_token = node->as_token;

    if ( !pattern->typeSpec )
        pattern->typeSpec = node->typeSpec;
    else if ( !AST::match(node->typeSpec, pattern->typeSpec, this) )
        return false;

    pattern->rparen_token = node->rparen_token;

    return true;
}

bool ASTMatcher::match( SubstringFunctionAST *node, SubstringFunctionAST *pattern )
{
    pattern->substring_token = node->substring_token;
    pattern->lparen_token = node->lparen_token;

    if ( !pattern->strExpr )
        pattern->strExpr = node->strExpr;
    else if ( !AST::match(node->strExpr, pattern->strExpr, this) )
        return false;

    pattern->from_token = node->from_token;

    if ( !pattern->startExpr )
        pattern->startExpr = node->startExpr;
    else if ( !AST::match(node->startExpr, pattern->startExpr, this) )
        return false;

    pattern->for_token = node->for_token;

    if ( !pattern->lengthExpr )
        pattern->lengthExpr = node->lengthExpr;
    else if ( !AST::match(node->lengthExpr, pattern->lengthExpr, this) )
        return false;

    pattern->rparen_token = node->rparen_token;

    return true;
}

bool ASTMatcher::match( CountFunctionAST *node, CountFunctionAST *pattern )
{
    pattern->count_token = node->count_token;
    pattern->lparen_token = node->lparen_token;
    pattern->distinct_token = node->distinct_token;

    if ( !pattern->countExpr )
        pattern->countExpr = node->countExpr;
    else if ( !AST::match(node->countExpr, pattern->countExpr, this) )
        return false;

    pattern->rparen_token = node->rparen_token;

    return true;
}

bool ASTMatcher::match( ParameterExpressionAST *node, ParameterExpressionAST *pattern )
{
    if ( !pattern->binding )
        pattern->binding = node->binding;
    else if ( !AST::match(node->binding, pattern->binding, this) )
        return false;

    return true;
}

bool ASTMatcher::match( NullValueExpressionAST *node, NullValueExpressionAST *pattern )
{
    pattern->not_token = node->not_token;
    pattern->null_token = node->null_token;

    return true;
}

bool ASTMatcher::match( SelectCompoundValueExpressionAST *node, SelectCompoundValueExpressionAST *pattern )
{
    pattern->lparen_token = node->lparen_token;

    if ( !pattern->query )
        pattern->query = node->query;
    else if ( !AST::match(node->query, pattern->query, this) )
        return false;

    pattern->rparen_token = node->rparen_token;

    return true;
}

bool ASTMatcher::match( ValueListExpressionAST *node, ValueListExpressionAST *pattern )
{
    pattern->lparen_token = node->lparen_token;

    if ( !pattern->val_list )
        pattern->val_list = node->val_list;
    else if ( !AST::match(node->val_list, pattern->val_list, this) )
        return false;

    pattern->rparen_roken = node->rparen_roken;

    return true;
}

bool ASTMatcher::match( SubQueryExpressionAST *node, SubQueryExpressionAST *pattern )
{
    pattern->lparen_token = node->lparen_token;

    if ( !pattern->query )
        pattern->query = node->query;
    else if ( !AST::match(node->query, pattern->query, this) )
        return false;

    pattern->rparen_roken = node->rparen_roken;

    return true;
}

bool ASTMatcher::match( CompoundConditionExpressionAST *node, CompoundConditionExpressionAST *pattern )
{
    pattern->lparen_token = node->lparen_token;

    if ( !pattern->condExpr )
        pattern->condExpr = node->condExpr;
    else if ( !AST::match(node->condExpr, pattern->condExpr, this) )
        return false;

    pattern->rparen_token = node->rparen_token;

    return true;
}

bool ASTMatcher::match( InConditionExpressionAST *node, InConditionExpressionAST *pattern )
{
    if ( !pattern->lvExpr )
        pattern->lvExpr = node->lvExpr;
    else if ( !AST::match(node->lvExpr, pattern->lvExpr, this) )
        return false;

    pattern->not_token = node->not_token;
    pattern->in_token = node->in_token;

    if ( !pattern->rvExpr )
        pattern->rvExpr = node->rvExpr;
    else if ( !AST::match(node->rvExpr, pattern->rvExpr, this) )
        return false;

    return true;
}

bool ASTMatcher::match( LikeConditionExpressionAST *node, LikeConditionExpressionAST *pattern )
{
    if ( !pattern->lvExpr )
        pattern->lvExpr = node->lvExpr;
    else if ( !AST::match(node->lvExpr, pattern->lvExpr, this) )
        return false;

    pattern->not_token = node->not_token;
    pattern->like_token = node->like_token;

    if ( !pattern->rvExpr )
        pattern->rvExpr = node->rvExpr;
    else if ( !AST::match(node->rvExpr, pattern->rvExpr, this) )
        return false;

    return true;
}

bool ASTMatcher::match( BetweenConditionExpressionAST *node, BetweenConditionExpressionAST *pattern )
{
    if ( !pattern->lvExpr )
        pattern->lvExpr = node->lvExpr;
    else if ( !AST::match(node->lvExpr, pattern->lvExpr, this) )
        return false;

    pattern->not_token = node->not_token;
    pattern->between_token = node->between_token;

    if ( !pattern->rv1Expr )
        pattern->rv1Expr = node->rv1Expr;
    else if ( !AST::match(node->rv1Expr, pattern->rv1Expr, this) )
        return false;

    pattern->and_token = node->and_token;

    if ( !pattern->rv2Expr )
        pattern->rv2Expr = node->rv2Expr;
    else if ( !AST::match(node->rv2Expr, pattern->rv2Expr, this) )
        return false;

    return true;
}

bool ASTMatcher::match( ExistsConditionExpressionAST *node, ExistsConditionExpressionAST *pattern )
{
    pattern->not_token = node->not_token;
    pattern->exists_token = node->exists_token;

    if ( !pattern->rvExpr )
        pattern->rvExpr = node->rvExpr;
    else if ( !AST::match(node->rvExpr, pattern->rvExpr, this) )
        return false;

    return true;
}

bool ASTMatcher::match( UnaryConditionExpressionAST *node, UnaryConditionExpressionAST *pattern )
{
    if ( !pattern->lvExpr )
        pattern->lvExpr = node->lvExpr;
    else if ( !AST::match(node->lvExpr, pattern->lvExpr, this) )
        return false;

    pattern->last_op_token = node->last_op_token;

    return true;
}

bool ASTMatcher::match( BinaryConditionExpressionAST *node, BinaryConditionExpressionAST *pattern )
{
    if ( !pattern->lvCondExpr )
        pattern->lvCondExpr = node->lvCondExpr;
    else if ( !AST::match(node->lvCondExpr, pattern->lvCondExpr, this) )
        return false;

    pattern->cond_op_token = node->cond_op_token;

    if ( !pattern->rvCondExpr )
        pattern->rvCondExpr = node->rvCondExpr;
    else if ( !AST::match(node->rvCondExpr, pattern->rvCondExpr, this) )
        return false;

    return true;
}

bool ASTMatcher::match( AssignmentExpressionAST *node, AssignmentExpressionAST *pattern )
{
    if ( !pattern->columnName )
        pattern->columnName = node->columnName;
    else if ( !AST::match(node->columnName, pattern->columnName, this) )
        return false;

    pattern->equal_token = node->equal_token;

    if ( !pattern->rvExpr )
        pattern->rvExpr = node->rvExpr;
    else if ( !AST::match(node->rvExpr, pattern->rvExpr, this) )
        return false;

    return true;
}

bool ASTMatcher::match( CaseExpressionAST *node, CaseExpressionAST *pattern )
{
    pattern->case_token = node->case_token;

    if ( !pattern->caseExpr )
        pattern->caseExpr = node->caseExpr;
    else if ( !AST::match(node->caseExpr, pattern->caseExpr, this) )
        return false;

    if ( !pattern->var_list )
        pattern->var_list = node->var_list;
    else if ( !AST::match(node->var_list, pattern->var_list, this) )
        return false;

    pattern->else_token = node->else_token;

    if ( !pattern->elseExpr )
        pattern->elseExpr = node->elseExpr;
    else if ( !AST::match(node->elseExpr, pattern->elseExpr, this) )
        return false;

    pattern->end_token = node->end_token;

    return true;
}

bool ASTMatcher::match( CaseExpressionClauseAST *node, CaseExpressionClauseAST *pattern )
{
    pattern->when_token = node->when_token;

    if ( !pattern->whenExpr )
        pattern->whenExpr = node->whenExpr;
    else if ( !AST::match(node->whenExpr, pattern->whenExpr, this) )
        return false;

    pattern->then_token = node->then_token;

    if ( !pattern->thenExpr )
        pattern->thenExpr = node->thenExpr;
    else if ( !AST::match(node->thenExpr, pattern->thenExpr, this) )
        return false;

    return true;
}

bool ASTMatcher::match( CaseConditionAST *node, CaseConditionAST *pattern )
{
    pattern->case_token = node->case_token;

    if ( !pattern->var_list )
        pattern->var_list = node->var_list;
    else if ( !AST::match(node->var_list, pattern->var_list, this) )
        return false;

    pattern->else_token = node->else_token;

    if ( !pattern->elseExpr )
        pattern->elseExpr = node->elseExpr;
    else if ( !AST::match(node->elseExpr, pattern->elseExpr, this) )
        return false;

    pattern->end_token = node->end_token;

    return true;
}

bool ASTMatcher::match( CaseConditionClauseAST *node, CaseConditionClauseAST *pattern )
{
    pattern->when_token = node->when_token;

    if ( !pattern->whenExpr )
        pattern->whenExpr = node->whenExpr;
    else if ( !AST::match(node->whenExpr, pattern->whenExpr, this) )
        return false;

    pattern->then_token = node->then_token;

    if ( !pattern->thenExpr )
        pattern->thenExpr = node->thenExpr;
    else if ( !AST::match(node->thenExpr, pattern->thenExpr, this) )
        return false;

    return true;
}
